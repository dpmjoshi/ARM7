ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE app
OBJECT MODULE PLACED IN app.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe app.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          #define NO_RECV_BYTE     22
    3          #define NO_OF_SAMPLE     05
    4          #define COOLER_ON        1<<19
    5          #define HEATER_ON        1<<20
    6          #define SSR_ON           1<<21
    7          #define BUZZER           1<<22
    8          //**********************************************//
    9          void irq_init(void);
   10          void uart0_ISR(void)__irq;
   11          void uart1_ISR(void)__irq;
   12          void default_page(void);
   13          void get_user_time(void);
   14          void temp_ctrl(void);
   15          void adc_val_conv(U32, U32, U32, U32, U32, U8);
   16          
   17          void user_time_conv(void);
   18          void user_temp_conv(void);
   19          
   20          
   21          //**********************************************//
   22          U8  space[400]             = {"                                                                          
             -                                                                                                                        
             -                   "};
   23          U8  Uc_cr_lf[3]            = {"\n\r"};
   24          U8  Uc_temp_low_lcd[5]    = {"Low "};
   25          U8  Uc_temp_high_lcd[5]   = {"High"};
   26          
   27          U8  Uc_dec_arr[11]         = {"00000"};
   28          U8  Uc_set_user_time[10]   = {"00:00:00"};
   29          U8  Uc_set_temp[7]         = {"000"};
   30          
   31          U8  ascii_arr[100];
   32          U8  node_addr_arr[2];
   33          U8  node_ascii_arr[5];
   34          U8  Uc_recv_data[100];
   35          
   36          U8  Uc_byte_count = 0;
   37          U8  frame_chk_cnt = 0;
   38          U8  Uc_temp_high  = 0; 
   39          U8  Uc_adc_time_out_flag = 0;
   40          U32 Ui_temp_set_val = 0;
   41          U8  Uc_user_dwn_hr  = 0;
   42          U8  Uc_user_dwn_min = 0;
   43          U8  Uc_user_dwn_sec = 0;
   44          
   45          
   46          struct frame_data
   47          {
   48           unsigned char  api_identifier;
   49           unsigned char  node_addr[5];
   50           unsigned char  rssi_val;
   51           unsigned short no_of_samples;
   52           unsigned char  ch_indicator;
   53           unsigned int   ch0_s1; 
   54           unsigned int   ch0_s2;
   55           unsigned int   ch0_s3;
   56           unsigned int   ch0_s4;
   57           unsigned int   ch0_s5;
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 2   

   58           unsigned int   ch1_s1;
   59          }node_01;
   60                                 
   61          //***************************************************
   62          //Initialisation of ISR
   63          //***************************************************
   64          
   65          void irq_init(void)
   66          {
   67   1        
   68   1        VICVectAddr0 = (U32)&uart0_ISR;
   69   1        VICVectCntl0 = 0x20 | 6;
   70   1        VICIntEnable = 1 << 6;    
   71   1        U0IER=0x1; 
   72   1      
   73   1        VICVectAddr1 = (U32)&uart1_ISR;
   74   1        VICVectCntl1 = 0x20 | 7;
   75   1        VICIntEnable = 1 << 7;    
   76   1        U1IER=0x1;
   77   1      
   78   1      }
   79          //***************************************************
   80          // ISR for UART0
   81          //***************************************************
   82          void uart0_ISR(void)__irq
   83          {
   84   1          
   85   1         VICVectAddr   = 0x00;
   86   1      }  
   87          //***************************************************
   88          // ISR for UART1
   89          //***************************************************
   90          
   91          void uart1_ISR(void)__irq
   92          {
   93   1         Uc_recv_data[Uc_byte_count] = U1RBR;
   94   1         if(Uc_recv_data[Uc_byte_count] == 0x7E)
   95   1         {
   96   2          Uc_byte_count = 0;
   97   2         }
   98   1         Uc_byte_count++;
   99   1         
  100   1         VICVectAddr = 0x00;
  101   1      }
  102          //***************************************************
  103          // default page to be displayed in SYSTEM mode
  104          //***************************************************
  105          void default_page(void)
  106          {
  107   1        U8 lcd_data_temp[10]     = {"TEMP:"};
  108   1        U8 lcd_data_pres[10]     = {"PRES:"};
  109   1        U8 lcd_data_rpm[10]      = {"RPM :"};
  110   1        U8 lcd_data_temp_unit[5] = {" C"};
  111   1        U8 lcd_data_pres_unit[5] = {"PSI"};
  112   1      
  113   1        clrscr();
  114   1      
  115   1        lcd_data_temp_unit[0] = 0xdf;       // hex value for degree
  116   1        
  117   1        lcd_line1_disp(&lcd_data_temp[0],0);
  118   1        lcd_line1_disp(&lcd_data_temp_unit[0],17);
  119   1        lcd_line1_disp(&Uc_set_temp[0],12);
  120   1        lcd_line2_disp(&lcd_data_pres[0],0);
  121   1        lcd_line2_disp(&lcd_data_pres_unit[0],17);
  122   1        lcd_line3_disp(&lcd_data_rpm[0],0);
  123   1      }
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 3   

  124          //***************************************************
  125          // function to get time duration from user
  126          //***************************************************
  127          void get_user_time(void)
  128          {
  129   1        U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
  130   1        U8 uc_lcd_data_user_temp[30] = {"Enter Temp: "};
  131   1        U8 sc_set_time_count = 0;
  132   1        U8 uc_set_temp_count = 0;
  133   1      
  134   1        clrscr();
  135   1        lcd_line1_disp(&uc_lcd_data_user_time[0],0);
  136   1        lcd_line1_disp(&Uc_set_user_time[0],12);
  137   1       
  138   1        while(sc_set_time_count < 8)                   //uc_set_time_count < 9
  139   1        {
  140   2          wdt_feed(0x03ffffff);
  141   2          Uc_key_temp = get_key(1);
  142   2          pwm5_pulse_width(5000, 100);
  143   2          //pwm_enable();
  144   2      
  145   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  146   2          {
  147   3              if(sc_set_time_count == 0)
  148   3              {
  149   4                  
  150   4                  if(Uc_key_temp < '3')
  151   4                  {
  152   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  153   5                      sc_set_time_count += 1;
  154   5                  }
  155   4              }
  156   3              else if(sc_set_time_count == 1)
  157   3              {
  158   4                 if((Uc_set_user_time[0] - 0x30) == 2)
  159   4                 {
  160   5                  if(Uc_key_temp < '4')
  161   5                  {
  162   6                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  163   6                      sc_set_time_count += 2;
  164   6                  }
  165   5                 }
  166   4                 else
  167   4                 {
  168   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  169   5                      sc_set_time_count += 2;
  170   5                 }
  171   4              }
  172   3              else if(sc_set_time_count == 3)
  173   3              {
  174   4                  
  175   4                  if(Uc_key_temp < '6')
  176   4                  {
  177   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  178   5                      sc_set_time_count += 1;
  179   5                  }
  180   4              }
  181   3              else if(sc_set_time_count == 4)
  182   3              {
  183   4                  
  184   4                  Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  185   4                  sc_set_time_count += 2;
  186   4                  
  187   4              }
  188   3              else if(sc_set_time_count == 6)
  189   3              {
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 4   

  190   4                  
  191   4                  if(Uc_key_temp < '6')
  192   4                  {
  193   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  194   5                      sc_set_time_count += 1;
  195   5                  }
  196   4              }
  197   3              else if(sc_set_time_count == 7)
  198   3              {
  199   4                  
  200   4                  if(Uc_key_temp < 'A')
  201   4                  {
  202   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  203   5                      sc_set_time_count += 1;
  204   5                  }
  205   4              }
  206   3      
  207   3          }
  208   2      
  209   2          if(Uc_key_temp == 'A')
  210   2          {       
  211   3                lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
  212   3                lcd_line2_disp(&Uc_set_temp[0],12);
  213   3                sc_set_time_count = 8;
  214   3                uc_set_temp_count = 3;
  215   3          }
  216   2          //*********************************************//
  217   2        
  218   2          if(sc_set_time_count == 0)
  219   2          {
  220   3              lcd_line4_disp("Range 0-2",11);
  221   3          }
  222   2          if(sc_set_time_count == 1)
  223   2          {
  224   3              lcd_line4_disp("Range 0-3",11);
  225   3          }
  226   2          if(sc_set_time_count == 3)
  227   2          {
  228   3              lcd_line4_disp("Range 0-5",11);
  229   3          }
  230   2          if(sc_set_time_count == 4)
  231   2          {
  232   3              lcd_line4_disp("Range 0-9",11);
  233   3          }
  234   2          if(sc_set_time_count == 6)
  235   2          {
  236   3              lcd_line4_disp("Range 0-5",11);
  237   3          }
  238   2          if(sc_set_time_count == 7)
  239   2          {
  240   3              lcd_line4_disp("Range 0-9",11);
  241   3          }
  242   2          //*********************************************//
  243   2          lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
  244   2          //Uc_set_user_time[sc_set_time_count + 1] = '\0';
  245   2          key_delay(250);     // do not remove it
  246   2          lcd_line1_disp(&Uc_set_user_time[0],12);
  247   2          pwm_disable();
  248   2        }
  249   1        
  250   1      
  251   1      //---------------------------------------------------------------------------------
  252   1      //------------------------------get temp from User---------------------------------
  253   1      //---------------------------------------------------------------------------------
  254   1        lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
  255   1        while(uc_set_temp_count < 3)
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 5   

  256   1        {
  257   2          wdt_feed(0x03ffffff);
  258   2          Uc_key_temp = get_key(1);
  259   2          
  260   2          pwm5_pulse_width(5000, 100);
  261   2      
  262   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  263   2          {
  264   3               if(uc_set_temp_count == 0)
  265   3               {
  266   4                  if(Uc_key_temp <= '3')
  267   4                  {
  268   5                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  269   5                      uc_set_temp_count++; 
  270   5      
  271   5                  }
  272   4               }
  273   3               else 
  274   3               {
  275   4                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  276   4                      uc_set_temp_count++; 
  277   4      
  278   4               }
  279   3      
  280   3          }
  281   2          if(Uc_key_temp == 'A')
  282   2          {
  283   3               uc_set_temp_count = 3;
  284   3          }
  285   2          lcd_line2_disp(&Uc_set_temp[0],12);
  286   2          key_delay(250);     // do not remove it
  287   2          //*************range of no*****************//
  288   2          if(uc_set_temp_count == 0)
  289   2          {
  290   3              lcd_line4_disp("Range 0-3",11);
  291   3          }
  292   2          if(uc_set_temp_count == 1)
  293   2          {
  294   3              lcd_line4_disp("Range 0-9",11);
  295   3          }
  296   2          if(uc_set_temp_count == 2)
  297   2          {
  298   3              lcd_line4_disp("Range 0-9",11);
  299   3          }
  300   2          //****************************************//
  301   2          pwm_disable();
  302   2        } 
  303   1        
  304   1        lcd_line4_disp("Press Start",9);                                                           
  305   1        while((Uc_key_temp = get_key(1)) != 'D');
  306   1        Uc_alrm = 3;
  307   1        user_time_conv();   // to convert the time entered by USER
  308   1        user_temp_conv();   // to convert the temp entered by USER
  309   1      
  310   1        clrscr();
  311   1        default_page();    // Displaying default PAGE while leaving from USER MODE.
  312   1      }
  313          //***************************************************
  314          // function to convert user time in to hex
  315          //***************************************************
  316          
  317          void user_time_conv(void)
  318          {   
  319   1          U8 uc_user_hr  = 0;
  320   1          U8 uc_user_min = 0;
  321   1          U8 uc_user_sec = 0;
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 6   

  322   1      
  323   1          uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
  324   1          uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
  325   1          uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
  326   1          uc_user_min += (Uc_set_user_time[4] - 0x30);
  327   1          uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
  328   1          uc_user_sec += (Uc_set_user_time[7] - 0x30);
  329   1      
  330   1          Uc_user_dwn_hr  = uc_user_hr;
  331   1          Uc_user_dwn_min = uc_user_min;
  332   1          Uc_user_dwn_sec = uc_user_sec;
  333   1          
  334   1          set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
  335   1      }
  336          //**********************************************************************************//
  337          // Function Name: function to convert User Temp in to hex                           //
  338          // Arguments    : NONE                                                              //
  339          // Return Types : NONE                                                              //
  340          // Description  : Converts Ui_temp_set_val to HEX and the conversion is placed into //
  341          //                Uc_set_temp[] array                                               //
  342          //**********************************************************************************//
  343          void user_temp_conv(void)
  344          {   
  345   1          Ui_temp_set_val   =  0;
  346   1          Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
  347   1          Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
  348   1          Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
  349   1          
  350   1      }
  351          //**********************************************************************************//
  352          // Function Name: function to control SSR and SOLENOID                              //
  353          // Arguments    : NONE                                                              //
  354          // Return Types : NONE                                                              //
  355          // Description  : Depending on Uc_temp_high  HEATER and COOLER are controlled       //
  356          //**********************************************************************************//
  357          void temp_ctrl(void)
  358          {
  359   1          if(Uc_temp_high == 1)
  360   1           {
  361   2              IO0SET = COOLER_ON; 
  362   2              IO0CLR = HEATER_ON; 
  363   2              IO0CLR = SSR_ON;
  364   2           }
  365   1          else
  366   1           {
  367   2              IO0SET = HEATER_ON; 
  368   2              IO0CLR = COOLER_ON;
  369   2              IO0SET = SSR_ON;
  370   2           }
  371   1      }
  372          //**********************************************************************************//
  373          // Description : function to convert ADC hex value into DEC                         //
  374          // Argument    : U32 (5 samples)                                                    //
  375          // Return Type : NONE                                                               //
  376          //**********************************************************************************//
  377          void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
  378          {
  379   1       U8 a = 0;
  380   1       U32 adc_temp;
  381   1       U32 adc_val;
  382   1      //*****************************************
  383   1      // Taking AVG of 3 samples
  384   1      //*****************************************
  385   1       adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
  386   1       if(condition == 1)
  387   1       {
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 7   

  388   2          if(adc_val < 4)
  389   2          {
  390   3              lcd_line3_disp("Sensor Open", 9);
  391   3           }
  392   2          else
  393   2          {
  394   3              lcd_line3_disp("           ", 9);
  395   3          }
  396   2       }
  397   1      //*****************************************
  398   1      // calibrating ADC hex data
  399   1      //*****************************************
  400   1       adc_val *= 3300;   
  401   1       adc_val >>= 10;
  402   1      
  403   1      
  404   1       if(condition == 0)
  405   1       {
  406   2          adc_val *= 2;
  407   2      //  adc_val /= 700;
  408   2       }
  409   1      
  410   1       if(condition == 1)
  411   1       {
  412   2          if(adc_val > 10)
  413   2          {
  414   3              adc_val -= 10;
  415   3          }
  416   2       }
  417   1       
  418   1       adc_temp = adc_val;
  419   1      //*****************************************
  420   1      // Temp Control
  421   1      //*****************************************
  422   1      if(condition == 1)
  423   1      {
  424   2       if( adc_val  > Ui_temp_set_val)
  425   2         {
  426   3              Uc_temp_high = 1;
  427   3         }
  428   2       else
  429   2         {
  430   3              Uc_temp_high = 0;
  431   3         }
  432   2      
  433   2      }
  434   1      //*****************************************
  435   1      // HEX to DEC conversion 
  436   1      //*****************************************
  437   1       Uc_dec_arr[a]  = adc_temp/10000;   
  438   1       Uc_dec_arr[a] += 0x30;
  439   1       adc_temp       = adc_temp%10000;
  440   1       a++;
  441   1      //--------------------------------------
  442   1       Uc_dec_arr[a]  = adc_temp/1000;    
  443   1       Uc_dec_arr[a] += 0x30;
  444   1       adc_temp       = adc_temp%1000;
  445   1       a++;
  446   1      //--------------------------------------
  447   1       Uc_dec_arr[a]  = adc_temp/100;
  448   1       Uc_dec_arr[a] += 0x30;
  449   1       adc_temp       = adc_temp%100;
  450   1       a++;
  451   1      //--------------------------------------
  452   1       Uc_dec_arr[a]  = adc_temp/10;
  453   1       Uc_dec_arr[a] += 0x30;
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 8   

  454   1       adc_temp       = adc_temp%10;
  455   1       a++;
  456   1       Uc_dec_arr[a]  = adc_temp + 0x30;
  457   1      
  458   1      }
  459           
  460            
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (lcd_line1_ch_disp?T)
 EXTERN DATA (Uc_alrm)
 EXTERN CODE16 (set_alarm?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (pwm5_pulse_width?T)
 EXTERN CODE16 (pwm_disable?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         uart0_ISR?A
 PUBLIC         uart1_ISR?A
 PUBLIC         irq_init?T
 PUBLIC         default_page?T
 PUBLIC         get_user_time?T
 PUBLIC         user_temp_conv?T
 PUBLIC         temp_ctrl?T
 PUBLIC         adc_val_conv?T
 PUBLIC         user_time_conv?T
 PUBLIC         Uc_dec_arr
 PUBLIC         Uc_set_user_time
 PUBLIC         space
 PUBLIC         Uc_user_dwn_hr
 PUBLIC         Uc_user_dwn_min
 PUBLIC         Uc_user_dwn_sec
 PUBLIC         Uc_adc_time_out_flag
 PUBLIC         Uc_cr_lf
 PUBLIC         Uc_temp_low_lcd
 PUBLIC         Uc_temp_high_lcd
 PUBLIC         Uc_set_temp
 PUBLIC         ascii_arr
 PUBLIC         node_addr_arr
 PUBLIC         node_ascii_arr
 PUBLIC         Uc_recv_data
 PUBLIC         Uc_byte_count
 PUBLIC         frame_chk_cnt
 PUBLIC         Uc_temp_high
 PUBLIC         Ui_temp_set_val
 PUBLIC         node_01



*** DATA SEGMENT '?CON?app':
 00000000          ??S_21:
 00000000            DB          '           ',0x00
 0000000C          ??S_20:
 0000000C            DB          'Sensor Open',0x00
 00000018          ??S_19:
 00000018            DB          'Press Start',0x00
 00000024          ??S_18:
 00000024            DB          'Range 0-9',0x00
 0000002E          ??S_17:
 0000002E            DB          'Range 0-5',0x00
 00000038          ??S_16:
 00000038            DB          'Range 0-3',0x00
 00000042          ??S_15:
 00000042            DB          'Range 0-2',0x00
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 10  

 0000004C          ?tpl?0001:
 0000004C           BEGIN_INIT
 0000004C            DB          'TEMP:',0x00
 00000052            SPACE       4
 00000056           END_INIT
 00000056            ALIGN       4
 00000058          ?tpl?0002:
 00000058           BEGIN_INIT
 00000058            DB          'PRES:',0x00
 0000005E            SPACE       4
 00000062           END_INIT
 00000062            ALIGN       4
 00000064          ?tpl?0003:
 00000064           BEGIN_INIT
 00000064            DB          'RPM :',0x00
 0000006A            SPACE       4
 0000006E           END_INIT
 0000006E            ALIGN       4
 00000070          ?tpl?0004:
 00000070           BEGIN_INIT
 00000070            DB          ' C',0x00
 00000073            SPACE       2
 00000075           END_INIT
 00000075            ALIGN       4
 00000078          ?tpl?0005:
 00000078           BEGIN_INIT
 00000078            DB          'PSI',0x00
 0000007C            SPACE       1
 0000007D           END_INIT
 0000007D            ALIGN       4
 00000080          ?tpl?0006:
 00000080           BEGIN_INIT
 00000080            DB          'Enter Time: ',0x00
 0000008D            SPACE       17
 0000009E           END_INIT
 0000009E            ALIGN       4
 000000A0          ?tpl?0007:
 000000A0           BEGIN_INIT
 000000A0            DB          'Enter Temp: ',0x00
 000000AD            SPACE       17
 000000BE           END_INIT

*** DATA SEGMENT '?DT0?app':
 00000000          Ui_temp_set_val:
 00000000           BEGIN_INIT
 00000000  00000000  DD          0x0
 00000004           END_INIT
 00000004          node_01:
 00000004            DS          36
 00000028          Uc_dec_arr:
 00000028           BEGIN_INIT
 00000028            DB          '00000',0x00
 0000002E            SPACE       5
 00000033           END_INIT
 00000033          Uc_set_user_time:
 00000033           BEGIN_INIT
 00000033            DB          '00:00:00',0x00
 0000003C            SPACE       1
 0000003D           END_INIT
 0000003D          space:
 0000003D           BEGIN_INIT
 0000003D            DB          '                                      '
 00000063            DB          '                                      '
 00000089            DB          '                                      '
 000000AF            DB          '                                      '
 000000D5            DB          '                                      '
 000000FB            DB          '                       ',0x00
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 11  

 00000113            SPACE       186
 000001CD           END_INIT
 000001CD          Uc_user_dwn_hr:
 000001CD           BEGIN_INIT
 000001CD  00        DB          0x0
 000001CE           END_INIT
 000001CE          Uc_user_dwn_min:
 000001CE           BEGIN_INIT
 000001CE  00        DB          0x0
 000001CF           END_INIT
 000001CF          Uc_user_dwn_sec:
 000001CF           BEGIN_INIT
 000001CF  00        DB          0x0
 000001D0           END_INIT
 000001D0          Uc_adc_time_out_flag:
 000001D0           BEGIN_INIT
 000001D0  00        DB          0x0
 000001D1           END_INIT
 000001D1          Uc_cr_lf:
 000001D1           BEGIN_INIT
 000001D1            DB          0x0A,0x0D,0x00
 000001D4           END_INIT
 000001D4          Uc_temp_low_lcd:
 000001D4           BEGIN_INIT
 000001D4            DB          'Low ',0x00
 000001D9           END_INIT
 000001D9          Uc_temp_high_lcd:
 000001D9           BEGIN_INIT
 000001D9            DB          'High',0x00
 000001DE           END_INIT
 000001DE          Uc_set_temp:
 000001DE           BEGIN_INIT
 000001DE            DB          '000',0x00
 000001E2            SPACE       3
 000001E5           END_INIT
 000001E5          ascii_arr:
 000001E5            DS          100
 00000249          node_addr_arr:
 00000249            DS          2
 0000024B          node_ascii_arr:
 0000024B            DS          5
 00000250          Uc_recv_data:
 00000250            DS          100
 000002B4          Uc_byte_count:
 000002B4           BEGIN_INIT
 000002B4  00        DB          0x0
 000002B5           END_INIT
 000002B5          frame_chk_cnt:
 000002B5           BEGIN_INIT
 000002B5  00        DB          0x0
 000002B6           END_INIT
 000002B6          Uc_temp_high:
 000002B6           BEGIN_INIT
 000002B6  00        DB          0x0
 000002B7           END_INIT



*** CODE SEGMENT '?PR?irq_init?T?app':
   68:   VICVectAddr0 = (U32)&uart0_ISR;
 00000000  4900      LDR         R1,=uart0_ISR?A ; uart0_ISR?A
 00000002  4800      LDR         R0,=0xFFFFF100
 00000004  6001      STR         R1,[R0,#0x0]
   69:   VICVectCntl0 = 0x20 | 6;
 00000006  2126      MOV         R1,#0x26
 00000008  4800      LDR         R0,=0xFFFFF200
 0000000A  6001      STR         R1,[R0,#0x0]
   70:   VICIntEnable = 1 << 6;    
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 12  

 0000000C  2140      MOV         R1,#0x40
 0000000E  4800      LDR         R0,=0xFFFFF010
 00000010  6001      STR         R1,[R0,#0x0]
   71:   U0IER=0x1; 
 00000012  2101      MOV         R1,#0x1
 00000014  4800      LDR         R0,=0xE000C004
 00000016  6001      STR         R1,[R0,#0x0]
   73:   VICVectAddr1 = (U32)&uart1_ISR;
 00000018  4A00      LDR         R2,=uart1_ISR?A ; uart1_ISR?A
 0000001A  4800      LDR         R0,=0xFFFFF104
 0000001C  6002      STR         R2,[R0,#0x0]
   74:   VICVectCntl1 = 0x20 | 7;
 0000001E  2227      MOV         R2,#0x27
 00000020  4800      LDR         R0,=0xFFFFF204
 00000022  6002      STR         R2,[R0,#0x0]
   75:   VICIntEnable = 1 << 7;    
 00000024  2280      MOV         R2,#0x80
 00000026  4800      LDR         R0,=0xFFFFF010
 00000028  6002      STR         R2,[R0,#0x0]
   76:   U1IER=0x1;
 0000002A  4800      LDR         R0,=0xE0010004
 0000002C  6001      STR         R1,[R0,#0x0]
   78: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'irq_init?T'


*** CODE SEGMENT '?PR?uart0_ISR?A?app':
   82: void uart0_ISR(void)__irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   85:    VICVectAddr   = 0x00;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xFFFFF030
 0000000C  E5801000  STR         R1,[R0,#0x0]
   86: }  
 00000010  E8BD0003  LDMIA       R13!,{R0-R1}
 00000014  E25EF004  SUBS        R15,R14,#0x0004
 00000018          ENDP ; 'uart0_ISR?A'


*** CODE SEGMENT '?PR?uart1_ISR?A?app':
   91: void uart1_ISR(void)__irq
 00000000  E92D0007  STMDB       R13!,{R0-R2}
   93:    Uc_recv_data[Uc_byte_count] = U1RBR;
 00000004  E5100000  LDR         R0,=0xE0010000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E5101000  LDR         R1,=Uc_byte_count ; Uc_byte_count
 00000010  E5D11000  LDRB        R1,[R1,#0x0] ; Uc_byte_count
 00000014  E5102000  LDR         R2,=Uc_recv_data ; Uc_recv_data
 00000018  E7C20001  STRB        R0,[R2,+R1]
   94:    if(Uc_recv_data[Uc_byte_count] == 0x7E)
 0000001C  E5100000  LDR         R0,=Uc_recv_data ; Uc_recv_data
 00000020  E7D00001  LDRB        R0,[R0,+R1]
 00000024  E350007E  CMP         R0,#0x007E
 00000028  1A000002  BNE         L_1  ; Targ=0x38
   96:     Uc_byte_count = 0;
 0000002C  E3A01000  MOV         R1,#0x0
 00000030  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000034  E5C01000  STRB        R1,[R0,#0x0] ; Uc_byte_count
   97:    }
 00000038          L_1:
   98:    Uc_byte_count++;
 00000038  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 0000003C  E5D01000  LDRB        R1,[R0,#0x0] ; Uc_byte_count
 00000040  E2811001  ADD         R1,R1,#0x0001
 00000044  E5C01000  STRB        R1,[R0,#0x0] ; Uc_byte_count
  100:    VICVectAddr = 0x00;
 00000048  E3A01000  MOV         R1,#0x0
 0000004C  E5100000  LDR         R0,=0xFFFFF030
 00000050  E5801000  STR         R1,[R0,#0x0]
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 13  

  101: }
 00000054  E8BD0007  LDMIA       R13!,{R0-R2}
 00000058  E25EF004  SUBS        R15,R14,#0x0004
 0000005C          ENDP ; 'uart1_ISR?A'


*** CODE SEGMENT '?PR?default_page?T?app':
  105: void default_page(void)
 00000000  B500      PUSH        {LR}
 00000002  B08D      SUB         R13,#0x34
  106: {
 00000004            ; SCOPE-START
  107:   U8 lcd_data_temp[10]     = {"TEMP:"};
 00000004  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000006  A800      ADD         R0,R13,#0x0
 00000008  220A      MOV         R2,#0xA
 0000000A          L_72:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_72  ; T=0x0000000A
  108:   U8 lcd_data_pres[10]     = {"PRES:"};
 00000016  4800      LDR         R1,=?tpl?0002 ; ?tpl?0002
 00000018  A803      ADD         R0,R13,#0xC
 0000001A  220A      MOV         R2,#0xA
 0000001C          L_73:
 0000001C  780B      LDRB        R3,[R1,#0x0]
 0000001E  7003      STRB        R3,[R0,#0x0]
 00000020  1C49      ADD         R1,R1,#0x1
 00000022  1C40      ADD         R0,R0,#0x1
 00000024  1E52      SUB         R2,R2,#0x1
 00000026  D1F9      BNE         L_73  ; T=0x0000001C
  109:   U8 lcd_data_rpm[10]      = {"RPM :"};
 00000028  4800      LDR         R1,=?tpl?0003 ; ?tpl?0003
 0000002A  A806      ADD         R0,R13,#0x18
 0000002C  220A      MOV         R2,#0xA
 0000002E          L_74:
 0000002E  780B      LDRB        R3,[R1,#0x0]
 00000030  7003      STRB        R3,[R0,#0x0]
 00000032  1C49      ADD         R1,R1,#0x1
 00000034  1C40      ADD         R0,R0,#0x1
 00000036  1E52      SUB         R2,R2,#0x1
 00000038  D1F9      BNE         L_74  ; T=0x0000002E
  110:   U8 lcd_data_temp_unit[5] = {" C"};
 0000003A  4800      LDR         R1,=?tpl?0004 ; ?tpl?0004
 0000003C  A809      ADD         R0,R13,#0x24
 0000003E  2205      MOV         R2,#0x5
 00000040          L_75:
 00000040  780B      LDRB        R3,[R1,#0x0]
 00000042  7003      STRB        R3,[R0,#0x0]
 00000044  1C49      ADD         R1,R1,#0x1
 00000046  1C40      ADD         R0,R0,#0x1
 00000048  1E52      SUB         R2,R2,#0x1
 0000004A  D1F9      BNE         L_75  ; T=0x00000040
  111:   U8 lcd_data_pres_unit[5] = {"PSI"};
 0000004C  4800      LDR         R1,=?tpl?0005 ; ?tpl?0005
 0000004E  A80B      ADD         R0,R13,#0x2C
 00000050  2205      MOV         R2,#0x5
 00000052          L_76:
 00000052  780B      LDRB        R3,[R1,#0x0]
 00000054  7003      STRB        R3,[R0,#0x0]
 00000056  1C49      ADD         R1,R1,#0x1
 00000058  1C40      ADD         R0,R0,#0x1
 0000005A  1E52      SUB         R2,R2,#0x1
 0000005C  D1F9      BNE         L_76  ; T=0x00000052
  113:   clrscr();
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 14  

 0000005E  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000060  FFCF      BL          clrscr?T  ; T=0x0001  (2)
  115:   lcd_data_temp_unit[0] = 0xdf;       // hex value for degree
 00000062  21DF      MOV         R1,#0xDF
 00000064  A809      ADD         R0,R13,#0x24
 00000066  7001      STRB        R1,[R0,#0x0] ; lcd_data_temp_unit
  117:   lcd_line1_disp(&lcd_data_temp[0],0);
 00000068  A800      ADD         R0,R13,#0x0
 0000006A  2100      MOV         R1,#0x0
 0000006C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000006E  FFC8      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  118:   lcd_line1_disp(&lcd_data_temp_unit[0],17);
 00000070  A809      ADD         R0,R13,#0x24
 00000072  2111      MOV         R1,#0x11
 00000074  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000076  FFC4      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  119:   lcd_line1_disp(&Uc_set_temp[0],12);
 00000078  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 0000007A  210C      MOV         R1,#0xC
 0000007C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  120:   lcd_line2_disp(&lcd_data_pres[0],0);
 00000080  A803      ADD         R0,R13,#0xC
 00000082  2100      MOV         R1,#0x0
 00000084  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000086  FFBC      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  121:   lcd_line2_disp(&lcd_data_pres_unit[0],17);
 00000088  A80B      ADD         R0,R13,#0x2C
 0000008A  2111      MOV         R1,#0x11
 0000008C  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  122:   lcd_line3_disp(&lcd_data_rpm[0],0);
 00000090  A806      ADD         R0,R13,#0x18
 00000092  2100      MOV         R1,#0x0
 00000094  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000096  FFB4      BL          lcd_line3_disp?T  ; T=0x0001  (2)
 00000098            ; SCOPE-END
  123: }
 00000098  B00D      ADD         R13,#0x34
 0000009A  BC08      POP         {R3}
 0000009C  4718      BX          R3
 0000009E          ENDP ; 'default_page?T'


*** CODE SEGMENT '?PR?get_user_time?T?app':
  127: void get_user_time(void)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  B090      SUB         R13,#0x40
  128: {
 00000004            ; SCOPE-START
  129:   U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
 00000004  4800      LDR         R1,=?tpl?0006 ; ?tpl?0006
 00000006  A800      ADD         R0,R13,#0x0
 00000008  221E      MOV         R2,#0x1E
 0000000A          L_79:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_79  ; T=0x0000000A
  130:   U8 uc_lcd_data_user_temp[30] = {"Enter Temp: "};
 00000016  4800      LDR         R1,=?tpl?0007 ; ?tpl?0007
 00000018  A808      ADD         R0,R13,#0x20
 0000001A  221E      MOV         R2,#0x1E
 0000001C          L_80:
 0000001C  780B      LDRB        R3,[R1,#0x0]
 0000001E  7003      STRB        R3,[R0,#0x0]
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 15  

 00000020  1C49      ADD         R1,R1,#0x1
 00000022  1C40      ADD         R0,R0,#0x1
 00000024  1E52      SUB         R2,R2,#0x1
 00000026  D1F9      BNE         L_80  ; T=0x0000001C
  131:   U8 sc_set_time_count = 0;
 00000028  2400      MOV         R4,#0x0
 0000002A  1C25      MOV         R5,R4 ; sc_set_time_count
 0000002C  ---- Variable 'sc_set_time_count' assigned to Register 'R5' ----
  132:   U8 uc_set_temp_count = 0;
 0000002C  ---- Variable 'uc_set_temp_count' assigned to Register 'R4' ----
  134:   clrscr();
 0000002C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          clrscr?T  ; T=0x0001  (2)
  135:   lcd_line1_disp(&uc_lcd_data_user_time[0],0);
 00000030  A800      ADD         R0,R13,#0x0
 00000032  2100      MOV         R1,#0x0
 00000034  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000036  FFE4      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  136:   lcd_line1_disp(&Uc_set_user_time[0],12);
 00000038  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 0000003A  210C      MOV         R1,#0xC
 0000003C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000003E  FFE0      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  138:   while(sc_set_time_count < 8)                   //uc_set_time_count < 9
 00000040  E0DA      B           L_2  ; T=0x000001F8
 00000042          L_4:
  140:       wdt_feed(0x03ffffff);
 00000042  4800      LDR         R0,=0x3FFFFFF
 00000044  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000046  FFDC      BL          wdt_feed?T  ; T=0x0001  (2)
  141:     Uc_key_temp = get_key(1);
 00000048  2001      MOV         R0,#0x1
 0000004A  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          get_key?T  ; T=0x0001  (2)
 0000004E  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000050  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  142:     pwm5_pulse_width(5000, 100);
 00000052  4800      LDR         R0,=0x1388
 00000054  2164      MOV         R1,#0x64
 00000056  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000058  FFD3      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  145:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 0000005A  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000005C  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000005E  1C01      MOV         R1,R0
 00000060  2930      CMP         R1,#0x30
 00000062  DB01      BLT         L_7  ; T=0x00000068
 00000064  2301      MOV         R3,#0x1
 00000066  E000      B           L_8  ; T=0x0000006A
 00000068          L_7:
 00000068  2300      MOV         R3,#0x0
 0000006A          L_8:
 0000006A  2939      CMP         R1,#0x39
 0000006C  DC01      BGT         L_9  ; T=0x00000072
 0000006E  2201      MOV         R2,#0x1
 00000070  E000      B           L_10  ; T=0x00000074
 00000072          L_9:
 00000072  2200      MOV         R2,#0x0
 00000074          L_10:
 00000074  401A      AND         R2,R3
 00000076  2A00      CMP         R2,#0x0
 00000078  D06A      BEQ         L_6  ; T=0x00000150
  147:         if(sc_set_time_count == 0)
 0000007A  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000007C  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000007E  0E12      LSR         R2,R2,#0x18
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 16  

 00000080  2A00      CMP         R2,#0x0
 00000082  D10A      BNE         L_11  ; T=0x0000009A
  150:             if(Uc_key_temp < '3')
 00000084  2933      CMP         R1,#0x33
 00000086  DA63      BGE         L_6  ; T=0x00000150
  152:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000088  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000008A  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 0000008C  0E1B      LSR         R3,R3,#0x18
 0000008E  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000090  54D0      STRB        R0,[R2,R3]
  153:                 sc_set_time_count += 1;
 00000092  3501      ADD         R5,#0x1
 00000094  062D      LSL         R5,R5,#0x18
 00000096  0E2D      LSR         R5,R5,#0x18
  155:         }
 00000098  E05A      B           L_6  ; T=0x00000150
 0000009A          L_11:
  156:         else if(sc_set_time_count == 1)
 0000009A  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000009C  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000009E  0E12      LSR         R2,R2,#0x18
 000000A0  2A01      CMP         R2,#0x1
 000000A2  D118      BNE         L_14  ; T=0x000000D6
  158:            if((Uc_set_user_time[0] - 0x30) == 2)
 000000A4  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000A6  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time
 000000A8  3A30      SUB         R2,#0x30
 000000AA  2A02      CMP         R2,#0x2
 000000AC  D10A      BNE         L_15  ; T=0x000000C4
  160:             if(Uc_key_temp < '4')
 000000AE  2934      CMP         R1,#0x34
 000000B0  DA4E      BGE         L_6  ; T=0x00000150
  162:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000B2  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000B4  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000B6  0E1B      LSR         R3,R3,#0x18
 000000B8  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000BA  54D0      STRB        R0,[R2,R3]
  163:                 sc_set_time_count += 2;
 000000BC  3502      ADD         R5,#0x2
 000000BE  062D      LSL         R5,R5,#0x18
 000000C0  0E2D      LSR         R5,R5,#0x18
  165:            }
 000000C2  E045      B           L_6  ; T=0x00000150
 000000C4          L_15:
  168:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000C4  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000C6  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000C8  0E1B      LSR         R3,R3,#0x18
 000000CA  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000CC  54D0      STRB        R0,[R2,R3]
  169:                 sc_set_time_count += 2;
 000000CE  3502      ADD         R5,#0x2
 000000D0  062D      LSL         R5,R5,#0x18
 000000D2  0E2D      LSR         R5,R5,#0x18
  171:         }
 000000D4  E03C      B           L_6  ; T=0x00000150
 000000D6          L_14:
  172:         else if(sc_set_time_count == 3)
 000000D6  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000D8  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000DA  0E12      LSR         R2,R2,#0x18
 000000DC  2A03      CMP         R2,#0x3
 000000DE  D10A      BNE         L_19  ; T=0x000000F6
  175:             if(Uc_key_temp < '6')
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 17  

 000000E0  2936      CMP         R1,#0x36
 000000E2  DA35      BGE         L_6  ; T=0x00000150
  177:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000E4  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000E6  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000E8  0E1B      LSR         R3,R3,#0x18
 000000EA  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000EC  54D0      STRB        R0,[R2,R3]
  178:                 sc_set_time_count += 1;
 000000EE  3501      ADD         R5,#0x1
 000000F0  062D      LSL         R5,R5,#0x18
 000000F2  0E2D      LSR         R5,R5,#0x18
  180:         }
 000000F4  E02C      B           L_6  ; T=0x00000150
 000000F6          L_19:
  181:         else if(sc_set_time_count == 4)
 000000F6  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000F8  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000FA  0E12      LSR         R2,R2,#0x18
 000000FC  2A04      CMP         R2,#0x4
 000000FE  D108      BNE         L_22  ; T=0x00000112
  184:             Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000100  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000102  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000104  0E1B      LSR         R3,R3,#0x18
 00000106  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000108  54D0      STRB        R0,[R2,R3]
  185:             sc_set_time_count += 2;
 0000010A  3502      ADD         R5,#0x2
 0000010C  062D      LSL         R5,R5,#0x18
 0000010E  0E2D      LSR         R5,R5,#0x18
  187:         }
 00000110  E01E      B           L_6  ; T=0x00000150
 00000112          L_22:
  188:         else if(sc_set_time_count == 6)
 00000112  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000114  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000116  0E12      LSR         R2,R2,#0x18
 00000118  2A06      CMP         R2,#0x6
 0000011A  D10A      BNE         L_24  ; T=0x00000132
  191:             if(Uc_key_temp < '6')
 0000011C  2936      CMP         R1,#0x36
 0000011E  DA17      BGE         L_6  ; T=0x00000150
  193:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000120  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000122  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000124  0E1B      LSR         R3,R3,#0x18
 00000126  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000128  54D0      STRB        R0,[R2,R3]
  194:                 sc_set_time_count += 1;
 0000012A  3501      ADD         R5,#0x1
 0000012C  062D      LSL         R5,R5,#0x18
 0000012E  0E2D      LSR         R5,R5,#0x18
  196:         }
 00000130  E00E      B           L_6  ; T=0x00000150
 00000132          L_24:
  197:         else if(sc_set_time_count == 7)
 00000132  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000134  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000136  0E12      LSR         R2,R2,#0x18
 00000138  2A07      CMP         R2,#0x7
 0000013A  D109      BNE         L_6  ; T=0x00000150
  200:             if(Uc_key_temp < 'A')
 0000013C  2941      CMP         R1,#0x41
 0000013E  DA07      BGE         L_6  ; T=0x00000150
  202:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 18  

 00000140  1C29      MOV         R1,R5 ; sc_set_time_count
 00000142  060A      LSL         R2,R1,#0x18 ; sc_set_time_count
 00000144  0E12      LSR         R2,R2,#0x18
 00000146  4800      LDR         R1,=Uc_set_user_time ; Uc_set_user_time
 00000148  5488      STRB        R0,[R1,R2]
  203:                 sc_set_time_count += 1;
 0000014A  3501      ADD         R5,#0x1
 0000014C  062D      LSL         R5,R5,#0x18
 0000014E  0E2D      LSR         R5,R5,#0x18
  207:     }
 00000150          L_6:
  209:     if(Uc_key_temp == 'A')
 00000150  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000152  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000154  2841      CMP         R0,#0x41
 00000156  D109      BNE         L_29  ; T=0x0000016C
  211:           lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
 00000158  A808      ADD         R0,R13,#0x20
 0000015A  2100      MOV         R1,#0x0
 0000015C  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000015E  FF50      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  212:           lcd_line2_disp(&Uc_set_temp[0],12);
 00000160  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000162  210C      MOV         R1,#0xC
 00000164  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000166  FF4C      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  213:           sc_set_time_count = 8;
 00000168  2508      MOV         R5,#0x8
  214:           uc_set_temp_count = 3;
 0000016A  2403      MOV         R4,#0x3
  215:     }
 0000016C          L_29:
  218:       if(sc_set_time_count == 0)
 0000016C  1C28      MOV         R0,R5 ; sc_set_time_count
 0000016E  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000170  0E00      LSR         R0,R0,#0x18
 00000172  2800      CMP         R0,#0x0
 00000174  D103      BNE         L_30  ; T=0x0000017E
  220:         lcd_line4_disp("Range 0-2",11);
 00000176  4800      LDR         R0,=??S_15 ; ??S_15
 00000178  210B      MOV         R1,#0xB
 0000017A  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000017C  FF41      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  221:     }
 0000017E          L_30:
  222:     if(sc_set_time_count == 1)
 0000017E  1C28      MOV         R0,R5 ; sc_set_time_count
 00000180  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000182  0E00      LSR         R0,R0,#0x18
 00000184  2801      CMP         R0,#0x1
 00000186  D103      BNE         L_31  ; T=0x00000190
  224:         lcd_line4_disp("Range 0-3",11);
 00000188  4800      LDR         R0,=??S_16 ; ??S_16
 0000018A  210B      MOV         R1,#0xB
 0000018C  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000018E  FF38      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  225:     }
 00000190          L_31:
  226:     if(sc_set_time_count == 3)
 00000190  1C28      MOV         R0,R5 ; sc_set_time_count
 00000192  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000194  0E00      LSR         R0,R0,#0x18
 00000196  2803      CMP         R0,#0x3
 00000198  D103      BNE         L_32  ; T=0x000001A2
  228:         lcd_line4_disp("Range 0-5",11);
 0000019A  4800      LDR         R0,=??S_17 ; ??S_17
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 19  

 0000019C  210B      MOV         R1,#0xB
 0000019E  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001A0  FF2F      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  229:     }
 000001A2          L_32:
  230:     if(sc_set_time_count == 4)
 000001A2  1C28      MOV         R0,R5 ; sc_set_time_count
 000001A4  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001A6  0E00      LSR         R0,R0,#0x18
 000001A8  2804      CMP         R0,#0x4
 000001AA  D103      BNE         L_33  ; T=0x000001B4
  232:         lcd_line4_disp("Range 0-9",11);
 000001AC  4800      LDR         R0,=??S_18 ; ??S_18
 000001AE  210B      MOV         R1,#0xB
 000001B0  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001B2  FF26      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  233:     }
 000001B4          L_33:
  234:     if(sc_set_time_count == 6)
 000001B4  1C28      MOV         R0,R5 ; sc_set_time_count
 000001B6  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001B8  0E00      LSR         R0,R0,#0x18
 000001BA  2806      CMP         R0,#0x6
 000001BC  D103      BNE         L_34  ; T=0x000001C6
  236:         lcd_line4_disp("Range 0-5",11);
 000001BE  4800      LDR         R0,=??S_17 ; ??S_17
 000001C0  210B      MOV         R1,#0xB
 000001C2  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001C4  FF1D      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  237:     }
 000001C6          L_34:
  238:     if(sc_set_time_count == 7)
 000001C6  1C28      MOV         R0,R5 ; sc_set_time_count
 000001C8  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001CA  0E00      LSR         R0,R0,#0x18
 000001CC  2807      CMP         R0,#0x7
 000001CE  D103      BNE         L_35  ; T=0x000001D8
  240:         lcd_line4_disp("Range 0-9",11);
 000001D0  4800      LDR         R0,=??S_18 ; ??S_18
 000001D2  210B      MOV         R1,#0xB
 000001D4  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001D6  FF14      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  241:     }
 000001D8          L_35:
  243:     lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
 000001D8  1C28      MOV         R0,R5 ; sc_set_time_count
 000001DA  0601      LSL         R1,R0,#0x18 ; sc_set_time_count
 000001DC  0E09      LSR         R1,R1,#0x18
 000001DE  310B      ADD         R1,#0xB
 000001E0  2020      MOV         R0,#0x20
 000001E2  F7FF      BL          lcd_line1_ch_disp?T  ; T=0x0001  (1)
 000001E4  FF0D      BL          lcd_line1_ch_disp?T  ; T=0x0001  (2)
  245:     key_delay(250);     // do not remove it
 000001E6  20FA      MOV         R0,#0xFA
 000001E8  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000001EA  FF0A      BL          key_delay?T  ; T=0x0001  (2)
  246:     lcd_line1_disp(&Uc_set_user_time[0],12);
 000001EC  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 000001EE  210C      MOV         R1,#0xC
 000001F0  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 000001F2  FF06      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  247:     pwm_disable();
 000001F4  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000001F6  FF04      BL          pwm_disable?T  ; T=0x0001  (2)
  248:   }
 000001F8          L_2:
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 20  

 000001F8  1C28      MOV         R0,R5 ; sc_set_time_count
 000001FA  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001FC  0E00      LSR         R0,R0,#0x18
 000001FE  2808      CMP         R0,#0x8
 00000200  DA00      BLT         $+4
 00000202  E71E      B           L_4  ; T=0x00000042
  254:   lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
 00000206  A808      ADD         R0,R13,#0x20
 00000208  2100      MOV         R1,#0x0
 0000020A  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000020C  FEF9      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  255:   while(uc_set_temp_count < 3)
 0000020E  E05B      B           L_36  ; T=0x000002C8
 00000210          L_38:
  257:       wdt_feed(0x03ffffff);
 00000210  4800      LDR         R0,=0x3FFFFFF
 00000212  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000214  FEF5      BL          wdt_feed?T  ; T=0x0001  (2)
  258:     Uc_key_temp = get_key(1);
 00000216  2001      MOV         R0,#0x1
 00000218  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000021A  FEF2      BL          get_key?T  ; T=0x0001  (2)
 0000021C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000021E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  260:     pwm5_pulse_width(5000, 100);
 00000220  4800      LDR         R0,=0x1388
 00000222  2164      MOV         R1,#0x64
 00000224  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000226  FEEC      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  262:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 00000228  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000022A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000022C  1C01      MOV         R1,R0
 0000022E  2930      CMP         R1,#0x30
 00000230  DB00      BLT         L_41  ; T=0x00000234
 00000232  2301      MOV         R3,#0x1
 00000234  E7FF      B           L_42  ; T=0x00000236
 00000236          L_41:
 00000236  2300      MOV         R3,#0x0
 00000238          L_42:
 00000238  2939      CMP         R1,#0x39
 0000023A  DC00      BGT         L_43  ; T=0x0000023E
 0000023C  2201      MOV         R2,#0x1
 0000023E  E7FF      B           L_44  ; T=0x00000240
 00000240          L_43:
 00000240  2200      MOV         R2,#0x0
 00000242          L_44:
 00000242  401A      AND         R2,R3
 00000244  2A00      CMP         R2,#0x0
 00000246  D016      BEQ         L_40  ; T=0x00000276
  264:          if(uc_set_temp_count == 0)
 00000248  1C22      MOV         R2,R4 ; uc_set_temp_count
 0000024A  0612      LSL         R2,R2,#0x18 ; uc_set_temp_count
 0000024C  0E12      LSR         R2,R2,#0x18
 0000024E  2A00      CMP         R2,#0x0
 00000250  D109      BNE         L_45  ; T=0x00000266
  266:             if(Uc_key_temp <= '3')
 00000252  2933      CMP         R1,#0x33
 00000254  DC0F      BGT         L_40  ; T=0x00000276
  268:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000256  1C21      MOV         R1,R4 ; uc_set_temp_count
 00000258  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 0000025A  0E12      LSR         R2,R2,#0x18
 0000025C  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 0000025E  5488      STRB        R0,[R1,R2]
  269:                 uc_set_temp_count++; 
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 21  

 00000260  3401      ADD         R4,#0x1
 00000262  0624      LSL         R4,R4,#0x18
 00000264  0E24      LSR         R4,R4,#0x18
  272:          }
 00000266  E006      B           L_40  ; T=0x00000276
 00000268          L_45:
  275:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000268  1C21      MOV         R1,R4 ; uc_set_temp_count
 0000026A  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 0000026C  0E12      LSR         R2,R2,#0x18
 0000026E  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 00000270  5488      STRB        R0,[R1,R2]
  276:                 uc_set_temp_count++; 
 00000272  3401      ADD         R4,#0x1
 00000274  0624      LSL         R4,R4,#0x18
 00000276  0E24      LSR         R4,R4,#0x18
  280:     }
 00000278          L_40:
  281:     if(Uc_key_temp == 'A')
 00000278  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000027A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000027C  2841      CMP         R0,#0x41
 0000027E  D1FF      BNE         L_48  ; T=0x00000280
  283:          uc_set_temp_count = 3;
 00000280  2403      MOV         R4,#0x3
  284:     }
 00000282          L_48:
  285:     lcd_line2_disp(&Uc_set_temp[0],12);
 00000282  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000284  210C      MOV         R1,#0xC
 00000286  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000288  FEBB      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  286:     key_delay(250);     // do not remove it
 0000028A  20FA      MOV         R0,#0xFA
 0000028C  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 0000028E  FEB8      BL          key_delay?T  ; T=0x0001  (2)
  288:     if(uc_set_temp_count == 0)
 00000290  1C20      MOV         R0,R4 ; uc_set_temp_count
 00000292  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 00000294  0E00      LSR         R0,R0,#0x18
 00000296  2800      CMP         R0,#0x0
 00000298  D102      BNE         L_49  ; T=0x000002A0
  290:         lcd_line4_disp("Range 0-3",11);
 0000029A  4800      LDR         R0,=??S_16 ; ??S_16
 0000029C  210B      MOV         R1,#0xB
 0000029E  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002A0  FEAF      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  291:     }
 000002A2          L_49:
  292:     if(uc_set_temp_count == 1)
 000002A2  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002A4  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002A6  0E00      LSR         R0,R0,#0x18
 000002A8  2801      CMP         R0,#0x1
 000002AA  D102      BNE         L_50  ; T=0x000002B2
  294:         lcd_line4_disp("Range 0-9",11);
 000002AC  4800      LDR         R0,=??S_18 ; ??S_18
 000002AE  210B      MOV         R1,#0xB
 000002B0  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002B2  FEA6      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  295:     }
 000002B4          L_50:
  296:     if(uc_set_temp_count == 2)
 000002B4  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002B6  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002B8  0E00      LSR         R0,R0,#0x18
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 22  

 000002BA  2802      CMP         R0,#0x2
 000002BC  D102      BNE         L_51  ; T=0x000002C4
  298:         lcd_line4_disp("Range 0-9",11);
 000002BE  4800      LDR         R0,=??S_18 ; ??S_18
 000002C0  210B      MOV         R1,#0xB
 000002C2  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002C4  FE9D      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  299:     }
 000002C6          L_51:
  301:     pwm_disable();
 000002C6  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000002C8  FE9B      BL          pwm_disable?T  ; T=0x0001  (2)
  302:   }    
 000002CA          L_36:
 000002CA  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002CC  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002CE  0E00      LSR         R0,R0,#0x18
 000002D0  2803      CMP         R0,#0x3
 000002D2  DB9D      BLT         L_38  ; T=0x00000210
  304:   lcd_line4_disp("Press Start",9);                                                           
 000002D4  4800      LDR         R0,=??S_19 ; ??S_19
 000002D6  2109      MOV         R1,#0x9
 000002D8  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002DA  FE92      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  305:   while((Uc_key_temp = get_key(1)) != 'D');
 000002DC          L_52:
 000002DC  2001      MOV         R0,#0x1
 000002DE  F7FF      BL          get_key?T  ; T=0x0001  (1)
 000002E0  FE8F      BL          get_key?T  ; T=0x0001  (2)
 000002E2  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 000002E4  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 000002E6  0600      LSL         R0,R0,#0x18 ; get_key?T
 000002E8  0E00      LSR         R0,R0,#0x18
 000002EA  2844      CMP         R0,#0x44
 000002EC  D1F6      BNE         L_52  ; T=0x000002DC
  306:   Uc_alrm = 3;
 000002EE  2103      MOV         R1,#0x3
 000002F0  4800      LDR         R0,=Uc_alrm ; Uc_alrm
 000002F2  7001      STRB        R1,[R0,#0x0] ; Uc_alrm
  307:   user_time_conv();   // to convert the time entered by USER
 000002F4  F7FF      BL          user_time_conv?T  ; T=0x0001  (1)
 000002F6  FE84      BL          user_time_conv?T  ; T=0x0001  (2)
  308:   user_temp_conv();   // to convert the temp entered by USER
 000002F8  F7FF      BL          user_temp_conv?T  ; T=0x0001  (1)
 000002FA  FE82      BL          user_temp_conv?T  ; T=0x0001  (2)
  310:   clrscr();
 000002FC  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000002FE  FE80      BL          clrscr?T  ; T=0x0001  (2)
  311:   default_page();    // Displaying default PAGE while leaving from USER MODE.
 00000300  F7FF      BL          default_page?T  ; T=0x0001  (1)
 00000302  FE7E      BL          default_page?T  ; T=0x0001  (2)
 00000304            ; SCOPE-END
  312: }
 00000304  B010      ADD         R13,#0x40
 00000306  BC30      POP         {R4-R5}
 00000308  BC08      POP         {R3}
 0000030A  4718      BX          R3
 0000030C          ENDP ; 'get_user_time?T'


*** CODE SEGMENT '?PR?user_time_conv?T?app':
  317: void user_time_conv(void)
 00000000  B510      PUSH        {R4,LR}
  318: {    
 00000002            ; SCOPE-START
  319:     U8 uc_user_hr  = 0;
 00000002  2300      MOV         R3,#0x0
 00000004  1C19      MOV         R1,R3 ; uc_user_hr
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 23  

 00000006  ---- Variable 'uc_user_hr' assigned to Register 'R1' ----
  320:     U8 uc_user_min = 0;
 00000006  1C1A      MOV         R2,R3 ; uc_user_min
 00000008  ---- Variable 'uc_user_min' assigned to Register 'R2' ----
  321:     U8 uc_user_sec = 0;
 00000008  ---- Variable 'uc_user_sec' assigned to Register 'R3' ----
  323:     uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
 00000008  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 0000000A  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time
 0000000C  1C01      MOV         R1,R0
 0000000E  3930      SUB         R1,#0x30
 00000010  200A      MOV         R0,#0xA
 00000012  4341      MUL         R1,R0
 00000014  0609      LSL         R1,R1,#0x18
 00000016  0E09      LSR         R1,R1,#0x18
  324:     uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
 00000018  4800      LDR         R2,=Uc_set_user_time + 0x1 ; Uc_set_user_time+1
 0000001A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+1
 0000001C  3A30      SUB         R2,#0x30
 0000001E  0612      LSL         R2,R2,#0x18
 00000020  0E12      LSR         R2,R2,#0x18
 00000022  1889      ADD         R1,R2 ; uc_user_hr
 00000024  0609      LSL         R1,R1,#0x18
 00000026  0E09      LSR         R1,R1,#0x18
  325:     uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
 00000028  4800      LDR         R2,=Uc_set_user_time + 0x3 ; Uc_set_user_time+3
 0000002A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+3
 0000002C  3A30      SUB         R2,#0x30
 0000002E  4342      MUL         R2,R0
 00000030  0612      LSL         R2,R2,#0x18
 00000032  0E12      LSR         R2,R2,#0x18
  326:     uc_user_min += (Uc_set_user_time[4] - 0x30);
 00000034  4800      LDR         R3,=Uc_set_user_time + 0x4 ; Uc_set_user_time+4
 00000036  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+4
 00000038  3B30      SUB         R3,#0x30
 0000003A  061B      LSL         R3,R3,#0x18
 0000003C  0E1B      LSR         R3,R3,#0x18
 0000003E  18D2      ADD         R2,R3 ; uc_user_min
 00000040  0612      LSL         R2,R2,#0x18
 00000042  0E12      LSR         R2,R2,#0x18
  327:     uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
 00000044  4800      LDR         R3,=Uc_set_user_time + 0x6 ; Uc_set_user_time+6
 00000046  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+6
 00000048  3B30      SUB         R3,#0x30
 0000004A  4343      MUL         R3,R0
 0000004C  061B      LSL         R3,R3,#0x18
 0000004E  0E1B      LSR         R3,R3,#0x18
  328:     uc_user_sec += (Uc_set_user_time[7] - 0x30);
 00000050  4800      LDR         R0,=Uc_set_user_time + 0x7 ; Uc_set_user_time+7
 00000052  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time+7
 00000054  3830      SUB         R0,#0x30
 00000056  0600      LSL         R0,R0,#0x18
 00000058  0E00      LSR         R0,R0,#0x18
 0000005A  181B      ADD         R3,R0 ; uc_user_sec
 0000005C  061B      LSL         R3,R3,#0x18
 0000005E  0E1B      LSR         R3,R3,#0x18
  330:     Uc_user_dwn_hr  = uc_user_hr;
 00000060  1C0C      MOV         R4,R1 ; uc_user_hr
 00000062  4800      LDR         R0,=Uc_user_dwn_hr ; Uc_user_dwn_hr
 00000064  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_hr
  331:     Uc_user_dwn_min = uc_user_min;
 00000066  1C14      MOV         R4,R2 ; uc_user_min
 00000068  4800      LDR         R0,=Uc_user_dwn_min ; Uc_user_dwn_min
 0000006A  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_min
  332:     Uc_user_dwn_sec = uc_user_sec;
 0000006C  1C1C      MOV         R4,R3 ; uc_user_sec
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 24  

 0000006E  4800      LDR         R0,=Uc_user_dwn_sec ; Uc_user_dwn_sec
 00000070  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_sec
  334:     set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
 00000072  1C08      MOV         R0,R1 ; uc_user_hr
 00000074  0600      LSL         R0,R0,#0x18 ; uc_user_hr
 00000076  0E00      LSR         R0,R0,#0x18
 00000078  1C11      MOV         R1,R2 ; uc_user_min
 0000007A  0609      LSL         R1,R1,#0x18 ; uc_user_min
 0000007C  0E09      LSR         R1,R1,#0x18
 0000007E  1C1A      MOV         R2,R3 ; uc_user_sec
 00000080  0612      LSL         R2,R2,#0x18 ; uc_user_sec
 00000082  0E12      LSR         R2,R2,#0x18
 00000084  F7FF      BL          set_alarm?T  ; T=0x0001  (1)
 00000086  FFBC      BL          set_alarm?T  ; T=0x0001  (2)
 00000088            ; SCOPE-END
  335: }
 00000088  BC10      POP         {R4}
 0000008A  BC08      POP         {R3}
 0000008C  4718      BX          R3
 0000008E          ENDP ; 'user_time_conv?T'


*** CODE SEGMENT '?PR?user_temp_conv?T?app':
  345:     Ui_temp_set_val   =  0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000004  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  346:     Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
 00000006  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000008  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp
 0000000A  1C01      MOV         R1,R0
 0000000C  3930      SUB         R1,#0x30
 0000000E  48FA      LDR         R0,=0x3E8
 00000010  4341      MUL         R1,R0
 00000012  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000014  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  347:     Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
 00000016  4800      LDR         R0,=Uc_set_temp + 0x1 ; Uc_set_temp+1
 00000018  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+1
 0000001A  1C02      MOV         R2,R0
 0000001C  3A30      SUB         R2,#0x30
 0000001E  2064      MOV         R0,#0x64
 00000020  4342      MUL         R2,R0
 00000022  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000024  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 00000026  1889      ADD         R1,R2
 00000028  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  348:     Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
 0000002A  4800      LDR         R0,=Uc_set_temp + 0x2 ; Uc_set_temp+2
 0000002C  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+2
 0000002E  1C02      MOV         R2,R0
 00000030  3A30      SUB         R2,#0x30
 00000032  200A      MOV         R0,#0xA
 00000034  4342      MUL         R2,R0
 00000036  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000038  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000003A  1889      ADD         R1,R2
 0000003C  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  350: }
 0000003E  4770      BX          R14
 00000040          ENDP ; 'user_temp_conv?T'


*** CODE SEGMENT '?PR?temp_ctrl?T?app':
  359:     if(Uc_temp_high == 1)
 00000000  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000002  7800      LDRB        R0,[R0,#0x0] ; Uc_temp_high
 00000004  2801      CMP         R0,#0x1
 00000006  D109      BNE         L_56  ; T=0x0000001C
  361:         IO0SET = COOLER_ON; 
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 25  

 00000008  4800      LDR         R1,=0x80000
 0000000A  4800      LDR         R0,=0xE0028004
 0000000C  6001      STR         R1,[R0,#0x0]
  362:         IO0CLR = HEATER_ON; 
 0000000E  4800      LDR         R1,=0x100000
 00000010  4800      LDR         R0,=0xE002800C
 00000012  6001      STR         R1,[R0,#0x0]
  363:         IO0CLR = SSR_ON;
 00000014  4800      LDR         R1,=0x200000
 00000016  4800      LDR         R0,=0xE002800C
 00000018  6001      STR         R1,[R0,#0x0]
  364:      }
 0000001A  E008      B           L_57  ; T=0x0000002E
 0000001C          L_56:
  367:         IO0SET = HEATER_ON; 
 0000001C  4800      LDR         R1,=0x100000
 0000001E  4800      LDR         R0,=0xE0028004
 00000020  6001      STR         R1,[R0,#0x0]
  368:         IO0CLR = COOLER_ON;
 00000022  4800      LDR         R1,=0x80000
 00000024  4800      LDR         R0,=0xE002800C
 00000026  6001      STR         R1,[R0,#0x0]
  369:         IO0SET = SSR_ON;
 00000028  4800      LDR         R1,=0x200000
 0000002A  4800      LDR         R0,=0xE0028004
 0000002C  6001      STR         R1,[R0,#0x0]
  370:      }
 0000002E          L_57:
  371: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'temp_ctrl?T'


*** CODE SEGMENT '?PR?adc_val_conv?T?app':
  377: void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  ---- Variable 'sample4' assigned to Register 'R3' ----
 00000002  ---- Variable 'sample3' assigned to Register 'R2' ----
 00000002  1C0E      MOV         R6,R1 ; sample2
 00000004  ---- Variable 'sample2' assigned to Register 'R6' ----
 00000004  1C05      MOV         R5,R0 ; sample1
 00000006  ---- Variable 'sample1' assigned to Register 'R5' ----
  378: {
 00000006            ; SCOPE-START
  379:  U8 a = 0;
 00000006  2400      MOV         R4,#0x0
 00000008  ---- Variable 'a' assigned to Register 'R4' ----
  385:  adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
 00000008  1C31      MOV         R1,R6 ; sample2
 0000000A  1C28      MOV         R0,R5 ; sample1
 0000000C  1840      ADD         R0,R1 ; sample1
 0000000E  1C11      MOV         R1,R2 ; sample3
 00000010  1840      ADD         R0,R1 ; sample3
 00000012  1C19      MOV         R1,R3 ; sample4
 00000014  1840      ADD         R0,R1 ; sample4
 00000016  9900      LDR         R1,[R13,#0x0] ; sample5
 00000018  1840      ADD         R0,R1
 0000001A  2105      MOV         R1,#0x5
 0000001C  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000001E  FFF0      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000020  1C08      MOV         R0,R1
 00000022  1C05      MOV         R5,R0 ; adc_val
 00000024  ---- Variable 'adc_val' assigned to Register 'R5' ----
  386:  if(condition == 1)
 00000024  A801      ADD         R0,R13,#0x4
 00000026  7800      LDRB        R0,[R0,#0x0] ; condition
 00000028  2801      CMP         R0,#0x1
 0000002A  D10B      BNE         L_58  ; T=0x00000044
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 26  

  388:      if(adc_val < 4)
 0000002C  1C28      MOV         R0,R5 ; adc_val
 0000002E  2804      CMP         R0,#0x4 ; adc_val
 00000030  D204      BCS         L_59  ; T=0x0000003C
  390:          lcd_line3_disp("Sensor Open", 9);
 00000032  4800      LDR         R0,=??S_20 ; ??S_20
 00000034  2109      MOV         R1,#0x9
 00000036  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000038  FFE3      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  391:      }
 0000003A  E003      B           L_58  ; T=0x00000044
 0000003C          L_59:
  394:          lcd_line3_disp("           ", 9);
 0000003C  4800      LDR         R0,=??S_21 ; ??S_21
 0000003E  2109      MOV         R1,#0x9
 00000040  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000042  FFDE      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  396:  }
 00000044          L_58:
  400:  adc_val *= 3300;   
 00000044  4800      LDR         R0,=0xCE4
 00000046  4345      MUL         R5,R0
  401:  adc_val >>= 10;
 00000048  0AAD      LSR         R5,R5,#0xA ; adc_val
  404:  if(condition == 0)
 0000004A  A801      ADD         R0,R13,#0x4
 0000004C  7800      LDRB        R0,[R0,#0x0] ; condition
 0000004E  2800      CMP         R0,#0x0
 00000050  D101      BNE         L_61  ; T=0x00000056
  406:       adc_val *= 2;
 00000052  2102      MOV         R1,#0x2
 00000054  434D      MUL         R5,R1
  408:  }
 00000056          L_61:
  410:  if(condition == 1)
 00000056  2801      CMP         R0,#0x1
 00000058  D103      BNE         L_62  ; T=0x00000062
  412:      if(adc_val > 10)
 0000005A  1C29      MOV         R1,R5 ; adc_val
 0000005C  290A      CMP         R1,#0xA ; adc_val
 0000005E  D900      BLS         L_62  ; T=0x00000062
  414:          adc_val -= 10;
 00000060  3D0A      SUB         R5,#0xA
  416:  }
 00000062          L_62:
  418:  adc_temp = adc_val;
 00000062  1C2A      MOV         R2,R5 ; adc_val
 00000064  ---- Variable 'adc_temp' assigned to Register 'R2' ----
  422: if(condition == 1)
 00000064  2801      CMP         R0,#0x1
 00000066  D10B      BNE         L_64  ; T=0x00000080
  424:  if( adc_val  > Ui_temp_set_val)
 00000068  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 0000006A  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000006C  1C28      MOV         R0,R5 ; adc_val
 0000006E  4288      CMP         R0,R1 ; adc_val
 00000070  D903      BLS         L_65  ; T=0x0000007A
  426:            Uc_temp_high = 1;
 00000072  2101      MOV         R1,#0x1
 00000074  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000076  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  427:    }
 00000078  E002      B           L_64  ; T=0x00000080
 0000007A          L_65:
  430:            Uc_temp_high = 0;
 0000007A  2100      MOV         R1,#0x0
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 27  

 0000007C  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 0000007E  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  433: }
 00000080          L_64:
  437:  Uc_dec_arr[a]  = adc_temp/10000;   
 00000080  1C10      MOV         R0,R2 ; adc_temp
 00000082  4800      LDR         R3,=0x2710
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000088  FFBB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000008A  1C08      MOV         R0,R1
 0000008C  0600      LSL         R0,R0,#0x18
 0000008E  0E00      LSR         R0,R0,#0x18
 00000090  1C21      MOV         R1,R4 ; a
 00000092  060D      LSL         R5,R1,#0x18 ; a
 00000094  0E2D      LSR         R5,R5,#0x18
 00000096  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000098  5548      STRB        R0,[R1,R5]
  438:  Uc_dec_arr[a] += 0x30;
 0000009A  1C20      MOV         R0,R4 ; a
 0000009C  0601      LSL         R1,R0,#0x18 ; a
 0000009E  0E09      LSR         R1,R1,#0x18
 000000A0  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000A2  1840      ADD         R0,R1 ; Uc_dec_arr
 000000A4  7801      LDRB        R1,[R0,#0x0]
 000000A6  3130      ADD         R1,#0x30
 000000A8  7001      STRB        R1,[R0,#0x0]
  439:  adc_temp       = adc_temp%10000;
 000000AA  1C10      MOV         R0,R2 ; adc_temp
 000000AC  1C19      MOV         R1,R3
 000000AE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000B0  FFA7      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000B2  1C01      MOV         R1,R0
 000000B4  1C0A      MOV         R2,R1 ; adc_temp
  440:  a++;
 000000B6  3401      ADD         R4,#0x1
 000000B8  0624      LSL         R4,R4,#0x18
 000000BA  0E24      LSR         R4,R4,#0x18
  442:  Uc_dec_arr[a]  = adc_temp/1000;    
 000000BC  1C10      MOV         R0,R2 ; adc_temp
 000000BE  4BFA      LDR         R3,=0x3E8
 000000C0  1C19      MOV         R1,R3
 000000C2  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000C4  FF9D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000C6  1C08      MOV         R0,R1
 000000C8  0600      LSL         R0,R0,#0x18
 000000CA  0E00      LSR         R0,R0,#0x18
 000000CC  1C21      MOV         R1,R4 ; a
 000000CE  060D      LSL         R5,R1,#0x18 ; a
 000000D0  0E2D      LSR         R5,R5,#0x18
 000000D2  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 000000D4  5548      STRB        R0,[R1,R5]
  443:  Uc_dec_arr[a] += 0x30;
 000000D6  1C20      MOV         R0,R4 ; a
 000000D8  0601      LSL         R1,R0,#0x18 ; a
 000000DA  0E09      LSR         R1,R1,#0x18
 000000DC  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000DE  1840      ADD         R0,R1 ; Uc_dec_arr
 000000E0  7801      LDRB        R1,[R0,#0x0]
 000000E2  3130      ADD         R1,#0x30
 000000E4  7001      STRB        R1,[R0,#0x0]
  444:  adc_temp       = adc_temp%1000;
 000000E6  1C10      MOV         R0,R2 ; adc_temp
 000000E8  1C19      MOV         R1,R3
 000000EA  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000EC  FF89      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 28  

 000000EE  1C01      MOV         R1,R0
 000000F0  1C0A      MOV         R2,R1 ; adc_temp
  445:  a++;
 000000F2  3401      ADD         R4,#0x1
 000000F4  0624      LSL         R4,R4,#0x18
 000000F6  0E24      LSR         R4,R4,#0x18
  447:  Uc_dec_arr[a]  = adc_temp/100;
 000000F8  1C10      MOV         R0,R2 ; adc_temp
 000000FA  2364      MOV         R3,#0x64
 000000FC  1C19      MOV         R1,R3
 000000FE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000100  FF7F      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000102  1C08      MOV         R0,R1
 00000104  0600      LSL         R0,R0,#0x18
 00000106  0E00      LSR         R0,R0,#0x18
 00000108  1C21      MOV         R1,R4 ; a
 0000010A  060D      LSL         R5,R1,#0x18 ; a
 0000010C  0E2D      LSR         R5,R5,#0x18
 0000010E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000110  5548      STRB        R0,[R1,R5]
  448:  Uc_dec_arr[a] += 0x30;
 00000112  1C20      MOV         R0,R4 ; a
 00000114  0601      LSL         R1,R0,#0x18 ; a
 00000116  0E09      LSR         R1,R1,#0x18
 00000118  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 0000011A  1840      ADD         R0,R1 ; Uc_dec_arr
 0000011C  7801      LDRB        R1,[R0,#0x0]
 0000011E  3130      ADD         R1,#0x30
 00000120  7001      STRB        R1,[R0,#0x0]
  449:  adc_temp       = adc_temp%100;
 00000122  1C10      MOV         R0,R2 ; adc_temp
 00000124  1C19      MOV         R1,R3
 00000126  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000128  FF6B      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000012A  1C01      MOV         R1,R0
 0000012C  1C0A      MOV         R2,R1 ; adc_temp
  450:  a++;
 0000012E  3401      ADD         R4,#0x1
 00000130  0624      LSL         R4,R4,#0x18
 00000132  0E24      LSR         R4,R4,#0x18
  452:  Uc_dec_arr[a]  = adc_temp/10;
 00000134  1C10      MOV         R0,R2 ; adc_temp
 00000136  230A      MOV         R3,#0xA
 00000138  1C19      MOV         R1,R3
 0000013A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000013C  FF61      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000013E  1C08      MOV         R0,R1
 00000140  0600      LSL         R0,R0,#0x18
 00000142  0E00      LSR         R0,R0,#0x18
 00000144  1C21      MOV         R1,R4 ; a
 00000146  060D      LSL         R5,R1,#0x18 ; a
 00000148  0E2D      LSR         R5,R5,#0x18
 0000014A  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 0000014C  5548      STRB        R0,[R1,R5]
  453:  Uc_dec_arr[a] += 0x30;
 0000014E  1C20      MOV         R0,R4 ; a
 00000150  0601      LSL         R1,R0,#0x18 ; a
 00000152  0E09      LSR         R1,R1,#0x18
 00000154  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000156  1840      ADD         R0,R1 ; Uc_dec_arr
 00000158  7801      LDRB        R1,[R0,#0x0]
 0000015A  3130      ADD         R1,#0x30
 0000015C  7001      STRB        R1,[R0,#0x0]
  454:  adc_temp       = adc_temp%10;
 0000015E  1C10      MOV         R0,R2 ; adc_temp
 00000160  1C19      MOV         R1,R3
ARM COMPILER V2.50a,  app                                                                  27/11/12  15:41:10  PAGE 29  

 00000162  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000164  FF4D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000166  1C01      MOV         R1,R0
 00000168  1C0A      MOV         R2,R1 ; adc_temp
  455:  a++;
 0000016A  3401      ADD         R4,#0x1
 0000016C  0624      LSL         R4,R4,#0x18
 0000016E  0E24      LSR         R4,R4,#0x18
  456:  Uc_dec_arr[a]  = adc_temp + 0x30;
 00000170  1C10      MOV         R0,R2 ; adc_temp
 00000172  3030      ADD         R0,#0x30
 00000174  0600      LSL         R0,R0,#0x18
 00000176  0E00      LSR         R0,R0,#0x18
 00000178  1C21      MOV         R1,R4 ; a
 0000017A  060A      LSL         R2,R1,#0x18 ; a
 0000017C  0E12      LSR         R2,R2,#0x18
 0000017E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000180  5488      STRB        R0,[R1,R2]
 00000182            ; SCOPE-END
  458: }
 00000182  BC70      POP         {R4-R6}
 00000184  BC08      POP         {R3}
 00000186  4718      BX          R3
 00000188          ENDP ; 'adc_val_conv?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =       695
  const size           =       190
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
