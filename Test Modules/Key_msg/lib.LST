ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 1   


ARM COMPILER V2.40e, COMPILATION OF MODULE lib
OBJECT MODULE PLACED IN lib.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe lib.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2           
    3          U8 Uc_ascii_arr[10];
    4          
    5          U8 hex_dec(U32 hex_val)
    6          {
    7   1       U32 uc_hex_temp;
    8   1       U8  temp_cnt = 0;
    9   1       uc_hex_temp = hex_val;
   10   1       //--------------------------------------
   11   1       Uc_dec_arr[temp_cnt]  = uc_hex_temp/10000; 
   12   1       Uc_dec_arr[temp_cnt] += 0x30;
   13   1       uc_hex_temp           = uc_hex_temp%10000;
   14   1       temp_cnt++;
   15   1      //--------------------------------------
   16   1       Uc_dec_arr[temp_cnt]  = uc_hex_temp/1000;  
   17   1       Uc_dec_arr[temp_cnt] += 0x30;
   18   1       uc_hex_temp           = uc_hex_temp%1000;
   19   1       temp_cnt++;
   20   1      //--------------------------------------
   21   1       Uc_dec_arr[temp_cnt]  = uc_hex_temp/100;
   22   1       Uc_dec_arr[temp_cnt] += 0x30;
   23   1       uc_hex_temp           = uc_hex_temp%100;
   24   1       temp_cnt++;
   25   1      //--------------------------------------
   26   1       Uc_dec_arr[temp_cnt]  = uc_hex_temp/10;
   27   1       Uc_dec_arr[temp_cnt] += 0x30;
   28   1       temp_cnt++;
   29   1      //--------------------------------------
   30   1       uc_hex_temp           = uc_hex_temp%10;
   31   1       Uc_dec_arr[temp_cnt]  = uc_hex_temp + 0x30;
   32   1       temp_cnt++;
   33   1       Uc_dec_arr[temp_cnt]  = '\0';
   34   1      //--------------------------------------
   35   1       return &Uc_dec_arr[0];
*** WARNING C10 IN LINE 35 OF LIB.C: conversion: 'pointer' to 'unsigned int'
   36   1      }
   37          
   38          U8 hex_ascii(U32 hex_val)
   39          {
   40   1       U32 uc_hex_temp = 0;
   41   1       U8  temp_cnt    = 0;
   42   1       U32 uc_hex_mask = 0xf0000000;
   43   1       for(temp_cnt = 0; temp_cnt < 8; temp_cnt++)
   44   1       {
   45   2        uc_hex_temp = hex_val;
   46   2        uc_hex_temp = (uc_hex_temp & uc_hex_mask);
   47   2        uc_hex_temp = uc_hex_temp >> (28-(4*temp_cnt));
   48   2        uc_hex_temp += 0x30; 
   49   2        if(uc_hex_temp > 10)
   50   2        {
   51   3         uc_hex_temp += 7; 
   52   3        }
   53   2        Uc_ascii_arr[temp_cnt] = uc_hex_temp;
   54   2        uc_hex_mask >>= (4*temp_cnt);
   55   2       }
   56   1       Uc_ascii_arr[temp_cnt] = '\0';
   57   1       return &Uc_ascii_arr[0];
*** WARNING C10 IN LINE 57 OF LIB.C: conversion: 'pointer' to 'unsigned int'
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 2   

   58   1      }
   59          
   60          
   61          
   62          
   63          
   64          
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN DATA (Uc_dec_arr)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         hex_dec?T
 PUBLIC         hex_ascii?T
 PUBLIC         Uc_ascii_arr



*** DATA SEGMENT '?DT0?lib':
 00000000          Uc_ascii_arr:
 00000000            DS          10



*** CODE SEGMENT '?PR?hex_dec?T?lib':
    5: U8 hex_dec(U32 hex_val)
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'hex_val' assigned to Register 'R0' ----
    6: {
 00000002            ; SCOPE-START
    8:  U8  temp_cnt = 0;
 00000002  2200      MOV         R2,#0x0
 00000004  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
    9:  uc_hex_temp = hex_val;
 00000004  1C03      MOV         R3,R0 ; hex_val
 00000006  ---- Variable 'uc_hex_temp' assigned to Register 'R3' ----
   11:  Uc_dec_arr[temp_cnt]  = uc_hex_temp/10000; 
 00000006  1C18      MOV         R0,R3 ; uc_hex_temp
 00000008  4800      LDR         R1,=0x2710
 0000000A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000000C  FFF9      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000000E  1C08      MOV         R0,R1
 00000010  0600      LSL         R0,R0,#0x18
 00000012  0E00      LSR         R0,R0,#0x18
 00000014  1C11      MOV         R1,R2 ; temp_cnt
 00000016  060C      LSL         R4,R1,#0x18 ; temp_cnt
 00000018  0E24      LSR         R4,R4,#0x18
 0000001A  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 0000001C  5508      STRB        R0,[R1,R4]
   12:  Uc_dec_arr[temp_cnt] += 0x30;
 0000001E  1C10      MOV         R0,R2 ; temp_cnt
 00000020  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000022  0E09      LSR         R1,R1,#0x18
 00000024  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000026  1840      ADD         R0,R1 ; Uc_dec_arr
 00000028  7801      LDRB        R1,[R0,#0x0]
 0000002A  3130      ADD         R1,#0x30
 0000002C  7001      STRB        R1,[R0,#0x0]
   13:  uc_hex_temp           = uc_hex_temp%10000;
 0000002E  1C18      MOV         R0,R3 ; uc_hex_temp
 00000030  4800      LDR         R1,=0x2710
 00000032  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000034  FFE5      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000036  1C01      MOV         R1,R0
 00000038  1C0B      MOV         R3,R1 ; uc_hex_temp
   14:  temp_cnt++;
 0000003A  3201      ADD         R2,#0x1
 0000003C  0612      LSL         R2,R2,#0x18
 0000003E  0E12      LSR         R2,R2,#0x18
   16:  Uc_dec_arr[temp_cnt]  = uc_hex_temp/1000;  
 00000040  1C18      MOV         R0,R3 ; uc_hex_temp
 00000042  49FA      LDR         R1,=0x3E8
 00000044  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000046  FFDC      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 4   

 00000048  1C08      MOV         R0,R1
 0000004A  0600      LSL         R0,R0,#0x18
 0000004C  0E00      LSR         R0,R0,#0x18
 0000004E  1C11      MOV         R1,R2 ; temp_cnt
 00000050  060C      LSL         R4,R1,#0x18 ; temp_cnt
 00000052  0E24      LSR         R4,R4,#0x18
 00000054  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000056  5508      STRB        R0,[R1,R4]
   17:  Uc_dec_arr[temp_cnt] += 0x30;
 00000058  1C10      MOV         R0,R2 ; temp_cnt
 0000005A  0601      LSL         R1,R0,#0x18 ; temp_cnt
 0000005C  0E09      LSR         R1,R1,#0x18
 0000005E  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000060  1840      ADD         R0,R1 ; Uc_dec_arr
 00000062  7801      LDRB        R1,[R0,#0x0]
 00000064  3130      ADD         R1,#0x30
 00000066  7001      STRB        R1,[R0,#0x0]
   18:  uc_hex_temp           = uc_hex_temp%1000;
 00000068  1C18      MOV         R0,R3 ; uc_hex_temp
 0000006A  49FA      LDR         R1,=0x3E8
 0000006C  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000006E  FFC8      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000070  1C01      MOV         R1,R0
 00000072  1C0B      MOV         R3,R1 ; uc_hex_temp
   19:  temp_cnt++;
 00000074  3201      ADD         R2,#0x1
 00000076  0612      LSL         R2,R2,#0x18
 00000078  0E12      LSR         R2,R2,#0x18
   21:  Uc_dec_arr[temp_cnt]  = uc_hex_temp/100;
 0000007A  1C18      MOV         R0,R3 ; uc_hex_temp
 0000007C  2164      MOV         R1,#0x64
 0000007E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000080  FFBF      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000082  1C08      MOV         R0,R1
 00000084  0600      LSL         R0,R0,#0x18
 00000086  0E00      LSR         R0,R0,#0x18
 00000088  1C11      MOV         R1,R2 ; temp_cnt
 0000008A  060C      LSL         R4,R1,#0x18 ; temp_cnt
 0000008C  0E24      LSR         R4,R4,#0x18
 0000008E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000090  5508      STRB        R0,[R1,R4]
   22:  Uc_dec_arr[temp_cnt] += 0x30;
 00000092  1C10      MOV         R0,R2 ; temp_cnt
 00000094  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000096  0E09      LSR         R1,R1,#0x18
 00000098  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 0000009A  1840      ADD         R0,R1 ; Uc_dec_arr
 0000009C  7801      LDRB        R1,[R0,#0x0]
 0000009E  3130      ADD         R1,#0x30
 000000A0  7001      STRB        R1,[R0,#0x0]
   23:  uc_hex_temp           = uc_hex_temp%100;
 000000A2  1C18      MOV         R0,R3 ; uc_hex_temp
 000000A4  2164      MOV         R1,#0x64
 000000A6  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000A8  FFAB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000AA  1C01      MOV         R1,R0
 000000AC  1C0B      MOV         R3,R1 ; uc_hex_temp
   24:  temp_cnt++;
 000000AE  3201      ADD         R2,#0x1
 000000B0  0612      LSL         R2,R2,#0x18
 000000B2  0E12      LSR         R2,R2,#0x18
   26:  Uc_dec_arr[temp_cnt]  = uc_hex_temp/10;
 000000B4  1C18      MOV         R0,R3 ; uc_hex_temp
 000000B6  210A      MOV         R1,#0xA
 000000B8  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000BA  FFA2      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 5   

 000000BC  1C08      MOV         R0,R1
 000000BE  0600      LSL         R0,R0,#0x18
 000000C0  0E00      LSR         R0,R0,#0x18
 000000C2  1C11      MOV         R1,R2 ; temp_cnt
 000000C4  060C      LSL         R4,R1,#0x18 ; temp_cnt
 000000C6  0E24      LSR         R4,R4,#0x18
 000000C8  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 000000CA  5508      STRB        R0,[R1,R4]
   27:  Uc_dec_arr[temp_cnt] += 0x30;
 000000CC  1C10      MOV         R0,R2 ; temp_cnt
 000000CE  0601      LSL         R1,R0,#0x18 ; temp_cnt
 000000D0  0E09      LSR         R1,R1,#0x18
 000000D2  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000D4  1840      ADD         R0,R1 ; Uc_dec_arr
 000000D6  7801      LDRB        R1,[R0,#0x0]
 000000D8  3130      ADD         R1,#0x30
 000000DA  7001      STRB        R1,[R0,#0x0]
   28:  temp_cnt++;
 000000DC  3201      ADD         R2,#0x1
 000000DE  0612      LSL         R2,R2,#0x18
 000000E0  0E12      LSR         R2,R2,#0x18
   30:  uc_hex_temp           = uc_hex_temp%10;
 000000E2  1C18      MOV         R0,R3 ; uc_hex_temp
 000000E4  210A      MOV         R1,#0xA
 000000E6  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000E8  FF8B      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000EA  1C01      MOV         R1,R0
 000000EC  1C0B      MOV         R3,R1 ; uc_hex_temp
   31:  Uc_dec_arr[temp_cnt]  = uc_hex_temp + 0x30;
 000000EE  1C18      MOV         R0,R3 ; uc_hex_temp
 000000F0  3030      ADD         R0,#0x30
 000000F2  0600      LSL         R0,R0,#0x18
 000000F4  0E00      LSR         R0,R0,#0x18
 000000F6  1C11      MOV         R1,R2 ; temp_cnt
 000000F8  060B      LSL         R3,R1,#0x18 ; temp_cnt
 000000FA  0E1B      LSR         R3,R3,#0x18
 000000FC  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 000000FE  54C8      STRB        R0,[R1,R3]
   32:  temp_cnt++;
 00000100  3201      ADD         R2,#0x1
 00000102  0612      LSL         R2,R2,#0x18
 00000104  0E12      LSR         R2,R2,#0x18
   33:  Uc_dec_arr[temp_cnt]  = '\0';
 00000106  2000      MOV         R0,#0x0
 00000108  1C11      MOV         R1,R2 ; temp_cnt
 0000010A  060A      LSL         R2,R1,#0x18 ; temp_cnt
 0000010C  0E12      LSR         R2,R2,#0x18
 0000010E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000110  5488      STRB        R0,[R1,R2]
   35:  return &Uc_dec_arr[0];
 00000112  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000114            ; SCOPE-END
   36: }
 00000114  BC10      POP         {R4}
 00000116  BC08      POP         {R3}
 00000118  4718      BX          R3
 0000011A          ENDP ; 'hex_dec?T'


*** CODE SEGMENT '?PR?hex_ascii?T?lib':
   38: U8 hex_ascii(U32 hex_val)
 00000000  B470      PUSH        {R4-R6}
 00000002  ---- Variable 'hex_val' assigned to Register 'R0' ----
   39: {
 00000002            ; SCOPE-START
   40:  U32 uc_hex_temp = 0;
 00000002  2300      MOV         R3,#0x0
 00000004  ---- Variable 'uc_hex_temp' assigned to Register 'R3' ----
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 6   

   41:  U8  temp_cnt    = 0;
 00000004  2400      MOV         R4,#0x0
 00000006  1C22      MOV         R2,R4 ; temp_cnt
 00000008  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
   42:  U32 uc_hex_mask = 0xf0000000;
 00000008  4800      LDR         R1,=0xF0000000
 0000000A  ---- Variable 'uc_hex_mask' assigned to Register 'R1' ----
   43:  for(temp_cnt = 0; temp_cnt < 8; temp_cnt++)
 0000000A  1C22      MOV         R2,R4 ; temp_cnt
 0000000C  E01E      B           L_4  ; T=0x0000004C
 0000000E          L_5:
   45:   uc_hex_temp = hex_val;
 0000000E  1C03      MOV         R3,R0 ; hex_val
   46:   uc_hex_temp = (uc_hex_temp & uc_hex_mask);
 00000010  1C0C      MOV         R4,R1 ; uc_hex_mask
 00000012  4023      AND         R3,R4 ; uc_hex_mask
   47:   uc_hex_temp = uc_hex_temp >> (28-(4*temp_cnt));
 00000014  1C14      MOV         R4,R2 ; temp_cnt
 00000016  0625      LSL         R5,R4,#0x18 ; temp_cnt
 00000018  0E2D      LSR         R5,R5,#0x18
 0000001A  00AD      LSL         R5,R5,#0x2
 0000001C  241C      MOV         R4,#0x1C
 0000001E  1B64      SUB         R4,R5
 00000020  40E3      LSR         R3,R4
   48:   uc_hex_temp += 0x30; 
 00000022  3330      ADD         R3,#0x30
   49:   if(uc_hex_temp > 10)
 00000024  1C1C      MOV         R4,R3 ; uc_hex_temp
 00000026  2C0A      CMP         R4,#0xA ; uc_hex_temp
 00000028  D900      BLS         L_7  ; T=0x0000002C
   51:    uc_hex_temp += 7; 
 0000002A  3307      ADD         R3,#0x7
   52:   }
 0000002C          L_7:
   53:   Uc_ascii_arr[temp_cnt] = uc_hex_temp;
 0000002C  1C1C      MOV         R4,R3 ; uc_hex_temp
 0000002E  0624      LSL         R4,R4,#0x18 ; uc_hex_temp
 00000030  0E24      LSR         R4,R4,#0x18
 00000032  1C15      MOV         R5,R2 ; temp_cnt
 00000034  062E      LSL         R6,R5,#0x18 ; temp_cnt
 00000036  0E36      LSR         R6,R6,#0x18
 00000038  4800      LDR         R5,=Uc_ascii_arr ; Uc_ascii_arr
 0000003A  55AC      STRB        R4,[R5,R6]
   54:   uc_hex_mask >>= (4*temp_cnt);
 0000003C  1C14      MOV         R4,R2 ; temp_cnt
 0000003E  0624      LSL         R4,R4,#0x18 ; temp_cnt
 00000040  0E24      LSR         R4,R4,#0x18
 00000042  00A4      LSL         R4,R4,#0x2
 00000044  40E1      LSR         R1,R4
   55:  }
 00000046  3201      ADD         R2,#0x1
 00000048  0612      LSL         R2,R2,#0x18
 0000004A  0E12      LSR         R2,R2,#0x18
 0000004C          L_4:
 0000004C  1C14      MOV         R4,R2 ; temp_cnt
 0000004E  0624      LSL         R4,R4,#0x18 ; temp_cnt
 00000050  0E24      LSR         R4,R4,#0x18
 00000052  2C08      CMP         R4,#0x8
 00000054  DBDB      BLT         L_5  ; T=0x0000000E
   56:  Uc_ascii_arr[temp_cnt] = '\0';
 00000056  2000      MOV         R0,#0x0
 00000058  1C11      MOV         R1,R2 ; temp_cnt
 0000005A  060A      LSL         R2,R1,#0x18 ; temp_cnt
 0000005C  0E12      LSR         R2,R2,#0x18
 0000005E  4800      LDR         R1,=Uc_ascii_arr ; Uc_ascii_arr
 00000060  5488      STRB        R0,[R1,R2]
ARM COMPILER V2.40e,  lib                                                                  14/05/12  15:40:28  PAGE 7   

   57:  return &Uc_ascii_arr[0];
 00000062  4800      LDR         R0,=Uc_ascii_arr ; Uc_ascii_arr
 00000064            ; SCOPE-END
   58: }
 00000064  BC70      POP         {R4-R6}
 00000066  4770      BX          R14
 00000068          ENDP ; 'hex_ascii?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        10
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
