ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 1   


ARM COMPILER V2.40e, COMPILATION OF MODULE key
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe key.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include"includes.h"
    2          
    3          void scancode(long temp1,long temp2);
    4          U8 get_key(U8 pass_key);
    5          
    6          U8 keyboard[4][4] =           
    7           { '.','A','D','1',
    8             'G','J','M','3',
    9             'P','T','W','6',
   10             '5','0','6','7'};
   11          
   12           
   13          U8 ch ;
   14          U8 Uc_key_temp;
   15          //*************************************
   16          // Get key
   17          //*************************************
   18          U8 get_key(U8 pass_key)
   19          {
   20   1              
   21   1      U32 i=0,temp1,temp2; 
   22   1      U32 val1 =0, val2 = 0;
   23   1      U32 col1=0,col2=0; 
   24   1      
   25   1      
   26   1      ch = 0;
   27   1      IO1CLR = 0xFFFFFFFF;
   28   1      temp1  = IO1PIN;                            
   29   1      val1   = temp1;
   30   1      if(pass_key == 1)
   31   1      {
   32   2          while((val1 & 0xF0000000) == 0xF0000000)
   33   2          {
   34   3              temp1  = IO1PIN;                            
   35   3              val1   = temp1;
   36   3          }
   37   2      }
   38   1      if((col1 = (val1 & 0xF0000000)) != 0xF0000000)                  //temp2 ==  Row
   39   1      {
   40   2      
   41   2       val1 = temp1;
   42   2       key_delay(20);     //wait 20msec debounce time
   43   2       if((col2 = (val1 & 0xF0000000)) != 0xF0000000)
   44   2          {   
   45   3         for(i=0;i<4;i++)
   46   3              {
   47   4                  switch(i)
   48   4                  {
   49   5                  case 0 : IO1SET = 0x0D000000;    //0x00580000
   50   5                           break;
   51   5                  case 1 : IO1SET = 0x07000000;    //0x00380000
   52   5                           break;
   53   5                  case 2 : IO1SET = 0x0E000000;     //0x00700000    0x0E000000
   54   5                           break;
   55   5                  case 3 : IO1SET = 0x0B000000;     //0x00680000
   56   5                           break;
   57   5                  }
   58   4                  temp2 = IO1PIN;  ////------>  temp2 ====  row .... temp1 = column
   59   4                  val2 = temp2;
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 2   

   60   4                  if((val2 & 0xF0000000) != 0xF0000000)
   61   4                      {                         
   62   5                          scancode(temp1,temp2);      //temp2 ------> row number
   63   5                          break;
   64   5                      }
   65   4                  IO1SET = 0xFFFFFFFF;
   66   4                  IO1CLR = 0xFFFFFFFF; 
   67   4              }
   68   3          }
   69   2          //else
   70   2          //continue;
   71   2       } 
   72   1      key_delay(100);
   73   1      return ch;
   74   1      }
   75          
   76          
   77           
   78          void scancode(long temp1,long temp2)    //temp1 = column......temp2 = row......
   79          {
   80   1                      
   81   1      U16  code1 = 0,code2 = 0, j=0;
   82   1      U16  val1=0,val2=0;                 //ADDED VARIABLES
   83   1      
   84   1      
   85   1      
   86   1      temp1=temp1>>28;                  //col
   87   1      temp2=temp2 & 0x0F000000 ;   //row
   88   1      temp2=temp2>>24;
   89   1      
   90   1      
   91   1      for(j=0;j<4;j++)
   92   1      {
   93   2      val1 = temp1;                   //ADDED
   94   2      code1 = val1 & (1<<j);
   95   2          if(code1 == 0)
   96   2              {
   97   3                  code1 = j;
   98   3                  break;
   99   3              }
  100   2          else
  101   2                  continue;
  102   2      }
  103   1      
  104   1      for(j=0;j<4;j++)
  105   1      {
  106   2      val2=temp2;                     //ADDED
  107   2      code2 = val2 & (1<<j);
  108   2          if(code2 == 0)
  109   2              {
  110   3                  code2 = j;
  111   3                  break;
  112   3              }
  113   2          else
  114   2          continue;
  115   2      }
  116   1      
  117   1      
  118   1      ch = keyboard[code2][code1];
  119   1      
  120   1      temp1 = temp2 = 0;
  121   1      IO1SET=0xFFFFFFFF;
  122   1      IO1CLR = 0xFFFFFFFF;
  123   1      
  124   1      }
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (key_delay?T)



*** PUBLICS:
 PUBLIC         scancode?T
 PUBLIC         get_key?T
 PUBLIC         Uc_key_temp
 PUBLIC         keyboard
 PUBLIC         ch



*** DATA SEGMENT '?DT0?key':
 00000000          Uc_key_temp:
 00000000            DS          1
 00000001          keyboard:
 00000001           BEGIN_INIT
 00000001  2E        DB          0x2E
 00000002  41        DB          0x41
 00000003  44        DB          0x44
 00000004  31        DB          0x31
 00000005  47        DB          0x47
 00000006  4A        DB          0x4A
 00000007  4D        DB          0x4D
 00000008  33        DB          0x33
 00000009  50        DB          0x50
 0000000A  54        DB          0x54
 0000000B  57        DB          0x57
 0000000C  36        DB          0x36
 0000000D  35        DB          0x35
 0000000E  30        DB          0x30
 0000000F  36        DB          0x36
 00000010  37        DB          0x37
 00000011           END_INIT
 00000011          ch:
 00000011            DS          1



*** CODE SEGMENT '?PR?get_key?T?key':
   18: U8 get_key(U8 pass_key)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C01      MOV         R1,R0 ; pass_key
 00000004  ---- Variable 'pass_key' assigned to Register 'R1' ----
 00000004  B081      SUB         R13,#0x4
   19: {
 00000006            ; SCOPE-START
   21: U32 i=0,temp1,temp2; 
 00000006  2000      MOV         R0,#0x0
 00000008  1C06      MOV         R6,R0 ; i
 0000000A  ---- Variable 'i' assigned to Register 'R6' ----
   22: U32 val1 =0, val2 = 0;
 0000000A  1C07      MOV         R7,R0 ; val1
 0000000C  ---- Variable 'val1' assigned to Register 'R7' ----
 0000000C  1C05      MOV         R5,R0 ; val2
 0000000E  ---- Variable 'val2' assigned to Register 'R5' ----
   23: U32 col1=0,col2=0; 
 0000000E  1C02      MOV         R2,R0 ; col1
 00000010  ---- Variable 'col1' assigned to Register 'R2' ----
 00000010  9000      STR         R0,[R13,#0x0] ; col2
   26: ch = 0;
 00000012  2300      MOV         R3,#0x0
 00000014  4800      LDR         R0,=ch ; ch
 00000016  7003      STRB        R3,[R0,#0x0] ; ch
   27: IO1CLR = 0xFFFFFFFF;
 00000018  4800      LDR         R3,=0xFFFFFFFF
 0000001A  4800      LDR         R0,=0xE002801C
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 4   

 0000001C  6003      STR         R3,[R0,#0x0]
   28: temp1  = IO1PIN;                            
 0000001E  4800      LDR         R0,=0xE0028010
 00000020  6804      LDR         R4,[R0,#0x0]
 00000022  ---- Variable 'temp1' assigned to Register 'R4' ----
   29: val1   = temp1;
 00000022  1C27      MOV         R7,R4 ; temp1
   30: if(pass_key == 1)
 00000024  1C08      MOV         R0,R1 ; pass_key
 00000026  0600      LSL         R0,R0,#0x18 ; pass_key
 00000028  0E00      LSR         R0,R0,#0x18
 0000002A  2801      CMP         R0,#0x1
 0000002C  D109      BNE         L_1  ; T=0x00000042
   32:     while((val1 & 0xF0000000) == 0xF0000000)
 0000002E  E002      B           L_2  ; T=0x00000036
 00000030          L_4:
   34:         temp1  = IO1PIN;                            
 00000030  4800      LDR         R0,=0xE0028010
 00000032  6804      LDR         R4,[R0,#0x0]
   35:         val1   = temp1;
 00000034  1C27      MOV         R7,R4 ; temp1
   36:     }
 00000036          L_2:
 00000036  1C38      MOV         R0,R7 ; val1
 00000038  4800      LDR         R1,=0xF0000000
 0000003A  4008      AND         R0,R1
 0000003C  4800      LDR         R1,=0x10000000
 0000003E  42C8      CMN         R0,R1
 00000040  D0F6      BEQ         L_4  ; T=0x00000030
   37: }
 00000042          L_1:
   38: if((col1 = (val1 & 0xF0000000)) != 0xF0000000)                  //temp2 ==  Row
 00000042  1C38      MOV         R0,R7 ; val1
 00000044  4800      LDR         R1,=0xF0000000
 00000046  4008      AND         R0,R1
 00000048  1C02      MOV         R2,R0 ; col1
 0000004A  4800      LDR         R1,=0x10000000
 0000004C  42C8      CMN         R0,R1
 0000004E  D03A      BEQ         L_6  ; T=0x000000C6
   41:  val1 = temp1;
 00000050  1C27      MOV         R7,R4 ; temp1
   42:  key_delay(20);     //wait 20msec debounce time
 00000052  2014      MOV         R0,#0x14
 00000054  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 00000056  FFD4      BL          key_delay?T  ; T=0x0001  (2)
   43:  if((col2 = (val1 & 0xF0000000)) != 0xF0000000)
 00000058  1C38      MOV         R0,R7 ; val1
 0000005A  4800      LDR         R1,=0xF0000000
 0000005C  4008      AND         R0,R1
 0000005E  9000      STR         R0,[R13,#0x0] ; col2
 00000060  4800      LDR         R1,=0x10000000
 00000062  42C8      CMN         R0,R1
 00000064  D02F      BEQ         L_6  ; T=0x000000C6
   45:    for(i=0;i<4;i++)
 00000066  2600      MOV         R6,#0x0
 00000068          L_11:
   47:               switch(i)
 00000068  1C30      MOV         R0,R6 ; i
 0000006A  2801      CMP         R0,#0x1 ; i
 0000006C  D009      BEQ         L_15  ; T=0x00000082
 0000006E  2802      CMP         R0,#0x2 ; i
 00000070  D00B      BEQ         L_16  ; T=0x0000008A
 00000072  2803      CMP         R0,#0x3 ; i
 00000074  D00D      BEQ         L_17  ; T=0x00000092
 00000076  2800      CMP         R0,#0x0 ; i
 00000078  D10E      BNE         L_13  ; T=0x00000098
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 5   

   49:             case 0 : IO1SET = 0x0D000000;    //0x00580000
 0000007A          L_14:
 0000007A  4800      LDR         R1,=0xD000000
 0000007C  4800      LDR         R0,=0xE0028014
 0000007E  6001      STR         R1,[R0,#0x0]
   50:                      break;
 00000080  E00A      B           L_13  ; T=0x00000098
   51:             case 1 : IO1SET = 0x07000000;    //0x00380000
 00000082          L_15:
 00000082  4800      LDR         R1,=0x7000000
 00000084  4800      LDR         R0,=0xE0028014
 00000086  6001      STR         R1,[R0,#0x0]
   52:                      break;
 00000088  E006      B           L_13  ; T=0x00000098
   53:             case 2 : IO1SET = 0x0E000000;     //0x00700000    0x0E000000
 0000008A          L_16:
 0000008A  4800      LDR         R1,=0xE000000
 0000008C  4800      LDR         R0,=0xE0028014
 0000008E  6001      STR         R1,[R0,#0x0]
   54:                      break;
 00000090  E002      B           L_13  ; T=0x00000098
   55:             case 3 : IO1SET = 0x0B000000;     //0x00680000
 00000092          L_17:
 00000092  4800      LDR         R1,=0xB000000
 00000094  4800      LDR         R0,=0xE0028014
 00000096  6001      STR         R1,[R0,#0x0]
   57:             }
 00000098          L_13:
   58:             temp2 = IO1PIN;  ////------>  temp2 ====  row .... temp1 = column
 00000098  4800      LDR         R0,=0xE0028010
 0000009A  6802      LDR         R2,[R0,#0x0]
 0000009C  ---- Variable 'temp2' assigned to Register 'R2' ----
   59:             val2 = temp2;
 0000009C  1C15      MOV         R5,R2 ; temp2
   60:             if((val2 & 0xF0000000) != 0xF0000000)
 0000009E  1C28      MOV         R0,R5 ; val2
 000000A0  4800      LDR         R1,=0xF0000000
 000000A2  4008      AND         R0,R1
 000000A4  4800      LDR         R1,=0x10000000
 000000A6  42C8      CMN         R0,R1
 000000A8  D004      BEQ         L_18  ; T=0x000000B4
   62:                        scancode(temp1,temp2);      //temp2 ------> row number
 000000AA  1C20      MOV         R0,R4 ; temp1
 000000AC  1C11      MOV         R1,R2 ; temp2
 000000AE  F7FF      BL          scancode?T  ; T=0x0001  (1)
 000000B0  FFA7      BL          scancode?T  ; T=0x0001  (2)
   63:                     break;
 000000B2  E008      B           L_9  ; T=0x000000C6
   64:                   }
 000000B4          L_18:
   65:             IO1SET = 0xFFFFFFFF;
 000000B4  4800      LDR         R1,=0xFFFFFFFF
 000000B6  4800      LDR         R0,=0xE0028014
 000000B8  6001      STR         R1,[R0,#0x0]
   66:             IO1CLR = 0xFFFFFFFF; 
 000000BA  4800      LDR         R0,=0xE002801C
 000000BC  6001      STR         R1,[R0,#0x0]
   67:           }
 000000BE  3601      ADD         R6,#0x1
 000000C0  1C30      MOV         R0,R6 ; i
 000000C2  2804      CMP         R0,#0x4 ; i
 000000C4  D3D0      BCC         L_11  ; T=0x00000068
 000000C6          L_9:
   71:  } 
 000000C6          L_6:
   72: key_delay(100);
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 6   

 000000C6  2064      MOV         R0,#0x64
 000000C8  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          key_delay?T  ; T=0x0001  (2)
   73: return ch;
 000000CC  4800      LDR         R0,=ch ; ch
 000000CE  7800      LDRB        R0,[R0,#0x0] ; ch
 000000D0            ; SCOPE-END
   74: }
 000000D0  B001      ADD         R13,#0x4
 000000D2  BCF0      POP         {R4-R7}
 000000D4  BC08      POP         {R3}
 000000D6  4718      BX          R3
 000000D8          ENDP ; 'get_key?T'


*** CODE SEGMENT '?PR?scancode?T?key':
   78: void scancode(long temp1,long temp2)    //temp1 = column......temp2 = row......
 00000000  B470      PUSH        {R4-R6}
 00000002  ---- Variable 'temp2' assigned to Register 'R1' ----
 00000002  ---- Variable 'temp1' assigned to Register 'R0' ----
 00000002  B081      SUB         R13,#0x4
   79: {
 00000004            ; SCOPE-START
   81: U16  code1 = 0,code2 = 0, j=0;
 00000004  2600      MOV         R6,#0x0
 00000006  1C32      MOV         R2,R6 ; code1
 00000008  ---- Variable 'code1' assigned to Register 'R2' ----
 00000008  1C33      MOV         R3,R6 ; code2
 0000000A  ---- Variable 'code2' assigned to Register 'R3' ----
 0000000A  1C35      MOV         R5,R6 ; j
 0000000C  ---- Variable 'j' assigned to Register 'R5' ----
   82: U16  val1=0,val2=0;                 //ADDED VARIABLES
 0000000C  AC00      ADD         R4,R13,#0x0
 0000000E  8026      STRH        R6,[R4,#0x0] ; val1
 00000010  1C34      MOV         R4,R6 ; val2
 00000012  ---- Variable 'val2' assigned to Register 'R4' ----
   86: temp1=temp1>>28;                  //col
 00000012  1700      ASR         R0,R0,#0x1C ; temp1
   87: temp2=temp2 & 0x0F000000 ;   //row
 00000014  4800      LDR         R5,=0xF000000
 00000016  4029      AND         R1,R5
   88: temp2=temp2>>24;
 00000018  1609      ASR         R1,R1,#0x18 ; temp2
   91: for(j=0;j<4;j++)
 0000001A  1C35      MOV         R5,R6 ; j
 0000001C  E018      B           L_22  ; T=0x00000050
 0000001E          L_23:
   93: val1 = temp1;                   //ADDED
 0000001E  1C06      MOV         R6,R0 ; temp1
 00000020  0436      LSL         R6,R6,#0x10 ; temp1
 00000022  0C36      LSR         R6,R6,#0x10
 00000024  AA00      ADD         R2,R13,#0x0
 00000026  8016      STRH        R6,[R2,#0x0] ; val1
   94: code1 = val1 & (1<<j);
 00000028  1C2A      MOV         R2,R5 ; j
 0000002A  0412      LSL         R2,R2,#0x10 ; j
 0000002C  0C12      LSR         R2,R2,#0x10
 0000002E  2601      MOV         R6,#0x1
 00000030  4096      LSL         R6,R2
 00000032  AA00      ADD         R2,R13,#0x0
 00000034  8812      LDRH        R2,[R2,#0x0] ; val1
 00000036  4032      AND         R2,R6
 00000038  0412      LSL         R2,R2,#0x10
 0000003A  0C12      LSR         R2,R2,#0x10
   95:     if(code1 == 0)
 0000003C  1C16      MOV         R6,R2 ; code1
 0000003E  0436      LSL         R6,R6,#0x10 ; code1
 00000040  0C36      LSR         R6,R6,#0x10
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 7   

 00000042  2E00      CMP         R6,#0x0
 00000044  D101      BNE         L_20  ; T=0x0000004A
   97:             code1 = j;
 00000046  1C2A      MOV         R2,R5 ; j
   98:             break;
 00000048  E007      B           L_21  ; T=0x0000005A
  102: }
 0000004A          L_20:
 0000004A  3501      ADD         R5,#0x1
 0000004C  042D      LSL         R5,R5,#0x10
 0000004E  0C2D      LSR         R5,R5,#0x10
 00000050          L_22:
 00000050  1C2E      MOV         R6,R5 ; j
 00000052  0436      LSL         R6,R6,#0x10 ; j
 00000054  0C36      LSR         R6,R6,#0x10
 00000056  2E04      CMP         R6,#0x4
 00000058  D3E1      BCC         L_23  ; T=0x0000001E
 0000005A          L_21:
  104: for(j=0;j<4;j++)
 0000005A  2500      MOV         R5,#0x0
 0000005C  E017      B           L_29  ; T=0x0000008E
 0000005E          L_30:
  106: val2=temp2;                     //ADDED
 0000005E  1C0C      MOV         R4,R1 ; temp2
 00000060  0424      LSL         R4,R4,#0x10 ; temp2
 00000062  0C24      LSR         R4,R4,#0x10
  107: code2 = val2 & (1<<j);
 00000064  1C2B      MOV         R3,R5 ; j
 00000066  041B      LSL         R3,R3,#0x10 ; j
 00000068  0C1B      LSR         R3,R3,#0x10
 0000006A  2601      MOV         R6,#0x1
 0000006C  409E      LSL         R6,R3
 0000006E  1C23      MOV         R3,R4 ; val2
 00000070  041B      LSL         R3,R3,#0x10 ; val2
 00000072  0C1B      LSR         R3,R3,#0x10
 00000074  4033      AND         R3,R6
 00000076  041B      LSL         R3,R3,#0x10
 00000078  0C1B      LSR         R3,R3,#0x10
  108:     if(code2 == 0)
 0000007A  1C1E      MOV         R6,R3 ; code2
 0000007C  0436      LSL         R6,R6,#0x10 ; code2
 0000007E  0C36      LSR         R6,R6,#0x10
 00000080  2E00      CMP         R6,#0x0
 00000082  D101      BNE         L_27  ; T=0x00000088
  110:             code2 = j;
 00000084  1C2B      MOV         R3,R5 ; j
  111:             break;
 00000086  E007      B           L_28  ; T=0x00000098
  115: }
 00000088          L_27:
 00000088  3501      ADD         R5,#0x1
 0000008A  042D      LSL         R5,R5,#0x10
 0000008C  0C2D      LSR         R5,R5,#0x10
 0000008E          L_29:
 0000008E  1C2E      MOV         R6,R5 ; j
 00000090  0436      LSL         R6,R6,#0x10 ; j
 00000092  0C36      LSR         R6,R6,#0x10
 00000094  2E04      CMP         R6,#0x4
 00000096  D3E2      BCC         L_30  ; T=0x0000005E
 00000098          L_28:
  118: ch = keyboard[code2][code1];
 00000098  1C18      MOV         R0,R3 ; code2
 0000009A  0401      LSL         R1,R0,#0x10 ; code2
 0000009C  0C09      LSR         R1,R1,#0x10
 0000009E  0089      LSL         R1,R1,#0x2
 000000A0  1C10      MOV         R0,R2 ; code1
ARM COMPILER V2.40e,  key                                                                  14/05/12  15:40:26  PAGE 8   

 000000A2  0400      LSL         R0,R0,#0x10 ; code1
 000000A4  0C00      LSR         R0,R0,#0x10
 000000A6  1809      ADD         R1,R0
 000000A8  4800      LDR         R0,=keyboard ; keyboard
 000000AA  5C41      LDRB        R1,[R0,R1]
 000000AC  4800      LDR         R0,=ch ; ch
 000000AE  7001      STRB        R1,[R0,#0x0] ; ch
  120: temp1 = temp2 = 0;
 000000B0  2000      MOV         R0,#0x0
 000000B2  1C01      MOV         R1,R0 ; temp2
  121: IO1SET=0xFFFFFFFF;
 000000B4  4800      LDR         R1,=0xFFFFFFFF
 000000B6  4800      LDR         R0,=0xE0028014
 000000B8  6001      STR         R1,[R0,#0x0]
  122: IO1CLR = 0xFFFFFFFF;
 000000BA  4800      LDR         R0,=0xE002801C
 000000BC  6001      STR         R1,[R0,#0x0]
 000000BE            ; SCOPE-END
 000000BE  B001      ADD         R13,#0x4
 000000C0  BC70      POP         {R4-R6}
 000000C2  4770      BX          R14
 000000C4          ENDP ; 'scancode?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        18
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
