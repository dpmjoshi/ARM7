ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 1   


ARM COMPILER V2.40e, COMPILATION OF MODULE lcd
OBJECT MODULE PLACED IN lcd.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe lcd.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          #include <stdio.h>
    3          
    4          #define DATA_MASK 0xFF<<16
    5          #define RS        1<<11
    6          #define EN        1<<10
    7          
    8          #define EIGHT_BIT_MODE   0x38
    9          #define FOUR_BIT_MODE    0x28
   10          #define CLR_DISP         0x01
   11          #define AUTO_CUR         0x06
   12          #define DISP_ON_CUR_OFF  0x0C
   13          #define DISP_ON_CUR_ON   0x0F
   14          
   15          
   16          void lcd_init();
   17          void delay();
   18          void lcd_data();
   19          void lcd_cmd();
   20          void cursur_on();
   21          void cursur_off();
   22          void display();
   23          void clrscr();
   24          
   25          //**********************************************************************************//
   26          // Function Name: lcd_data                                                          //
   27          // Arguments    : U8 data                                                           //
   28          // Return Types : NONE                                                              //
   29          // Description  : Function to write into DATA Reg. of LCD                           //
   30          //**********************************************************************************//
   31          void lcd_data(U8 data)
   32          {
   33   1         IO1CLR |= DATA_MASK;                  
   34   1         IO1SET  = data<<16;
   35   1         IO0SET |= RS;                //RS=1
   36   1         IO0SET |= EN;                //EN=1
   37   1         ms_delay(5);
   38   1         IO0CLR |= EN;                //EN=0
   39   1      
   40   1      }
   41          //**********************************************************************************//
   42          // Function Name: lcd_cmd                                                           //
   43          // Arguments    : U8 cmd                                                            //
   44          // Return Types : NONE                                                              //
   45          // Description  : Function to write into Command Reg. of LCD                        //
   46          //**********************************************************************************//
   47          void lcd_cmd(U8 cmd)
   48          {   
   49   1         IO1CLR |= DATA_MASK;                             
   50   1         IO1SET  = cmd<<16;
   51   1         IO0CLR |= RS;                //RS=0
   52   1         IO0SET |= EN;                //EN=1
   53   1         ms_delay(5);
   54   1         IO0CLR |= EN;                //EN=0
   55   1         
   56   1      }
   57          //**********************************************************************************//
   58          // Function Name: lcd_init                                                          //
   59          // Arguments    : NONE                                                              //
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 2   

   60          // Return Types : NONE                                                              //
   61          // Description  : Function to initialize LCD in 8-bit mode, 5*7 display, autocursor //
   62          //                increament with cursor off                                        //
   63          //**********************************************************************************//
   64          void lcd_init()
   65          {     
   66   1         lcd_cmd(EIGHT_BIT_MODE);  //2 line,5*7 matrix
   67   1         ms_delay(25);
   68   1         lcd_cmd(CLR_DISP); //clear display
   69   1         ms_delay(25);
   70   1         lcd_cmd(AUTO_CUR);   //automatic rt shift cursor
   71   1         ms_delay(25);
   72   1         lcd_cmd(DISP_ON_CUR_OFF);    //display on cursor off
   73   1         ms_delay(25);
   74   1      }
   75          //**********************************************************************************//
   76          // Function Name: clrscr                                                            //
   77          // Arguments    : NONE                                                              //
   78          // Return Types : NONE                                                              //
   79          // Description  : Function to clear the display                                     //
   80          //**********************************************************************************//
   81          void clrscr()
   82          {
   83   1        lcd_cmd(CLR_DISP); //clear display
   84   1        ms_delay(5);
   85   1      }
   86          
   87          void cursur_on()
   88          {
   89   1          lcd_cmd(DISP_ON_CUR_ON);    //display on cursor on
   90   1          ms_delay(25);
   91   1      }
   92          
   93          void cursur_off()
   94          {
   95   1          lcd_cmd(DISP_ON_CUR_OFF);   //display on cursor off
   96   1          ms_delay(25);
   97   1      }
   98          
   99          
  100          
  101          void lcd_line1_disp(unsigned char *line1_data, unsigned char position)
  102          {
  103   1       unsigned char l;
  104   1       position += 0x80;
  105   1       lcd_cmd(position);
  106   1       ms_delay(15);
  107   1       for(l=0; *line1_data!='\0'; l++)
  108   1       {      
  109   2        lcd_data(*line1_data);
  110   2        ms_delay(10);
  111   2        line1_data++;
  112   2       } 
  113   1      }
  114          
  115          
  116          
  117           void lcd_line2_disp(unsigned char *line2_data, unsigned char position)
  118          {
  119   1       unsigned char l;
  120   1       position += 0xc0;
  121   1       lcd_cmd(position);
  122   1       ms_delay(5);
  123   1       for(l=0; *line2_data!='\0'; l++)
  124   1       {      
  125   2        lcd_data(*line2_data);
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 3   

  126   2        ms_delay(1);
  127   2        line2_data++;
  128   2       } 
  129   1      }
  130          void lcd_line3_disp(unsigned char *line3_data, unsigned char position)
  131          {
  132   1       unsigned char l;
  133   1       position += 0x94;
  134   1       lcd_cmd(position);
  135   1       ms_delay(5);
  136   1       for(l=0; *line3_data!='\0'; l++)
  137   1       {      
  138   2        lcd_data(*line3_data);
  139   2        ms_delay(1);
  140   2        line3_data++;
  141   2       } 
  142   1      }
  143          
  144          void lcd_line4_disp(unsigned char *line4_data, unsigned char position)
  145          {
  146   1       unsigned char l;
  147   1       position += 0xd4;
  148   1       lcd_cmd(position);
  149   1       ms_delay(5);
  150   1       for(l=0; *line4_data!='\0'; l++)
  151   1       {      
  152   2        lcd_data(*line4_data);
  153   2        ms_delay(1);
  154   2        line4_data++;
  155   2       } 
  156   1      }
  157          
  158          void lcd_scroll_disp(unsigned char *scroll_data,  unsigned char position)
  159          {
  160   1       unsigned char i, j, *d;
  161   1       
  162   1      
  163   1       position += 0x80;
  164   1       d = scroll_data;       
  165   1       lcd_cmd(position);
  166   1       for(j = 15; j>0 ; j--)
  167   1       {
  168   2        position = j + 0x80;
  169   2        lcd_cmd(position);
  170   2        ms_delay(5);
  171   2        for(i=0; *d!='\0'; i++)
  172   2        {
  173   3         lcd_data(*d);
  174   3         ms_delay(1);
  175   3         d++;
  176   3        }
  177   2        d = scroll_data++;
  178   2        ms_delay(9000);
  179   2        clrscr();
  180   2       }
  181   1      }
  182          
  183          void display_dots()
  184          {
  185   1       U8 b,m;
  186   1        for(b=0;b<5;b++)
  187   1          {
  188   2          for(m=0;m<3;m++)
  189   2              {
  190   3                  lcd_cmd(0x8c+m);
  191   3                  lcd_data('.');
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 4   

  192   3                  ms_delay(1000);
  193   3              }
  194   2          for(m=0;m<3;m++)
  195   2              {
  196   3                  lcd_cmd(0x8e-m);
  197   3                  lcd_data(' ');
  198   3                  ms_delay(9);
  199   3              }
  200   2          ms_delay(50);
  201   2          }
  202   1      }
  203          
  204          
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ms_delay?T)



*** PUBLICS:
 PUBLIC         lcd_init?T
 PUBLIC         clrscr?T
 PUBLIC         lcd_data?T
 PUBLIC         lcd_cmd?T
 PUBLIC         cursur_on?T
 PUBLIC         cursur_off?T
 PUBLIC         lcd_line1_disp?T
 PUBLIC         lcd_line2_disp?T
 PUBLIC         lcd_line3_disp?T
 PUBLIC         lcd_line4_disp?T
 PUBLIC         display_dots?T
 PUBLIC         lcd_scroll_disp?T



*** CODE SEGMENT '?PR?lcd_data?T?lcd':
   31: void lcd_data(U8 data)
 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; data
 00000004  ---- Variable 'data' assigned to Register 'R1' ----
   33:    IO1CLR |= DATA_MASK;                  
 00000004  4800      LDR         R3,=0xFF0000
 00000006  4800      LDR         R0,=0xE002801C
 00000008  6802      LDR         R2,[R0,#0x0]
 0000000A  431A      ORR         R2,R3
 0000000C  6002      STR         R2,[R0,#0x0]
   34:    IO1SET  = data<<16;
 0000000E  1C08      MOV         R0,R1 ; data
 00000010  0601      LSL         R1,R0,#0x18 ; data
 00000012  0E09      LSR         R1,R1,#0x18
 00000014  0409      LSL         R1,R1,#0x10
 00000016  4800      LDR         R0,=0xE0028014
 00000018  6001      STR         R1,[R0,#0x0]
   35:    IO0SET |= RS;                //RS=1
 0000001A  4800      LDR         R2,=0x800
 0000001C  4800      LDR         R0,=0xE0028004
 0000001E  6801      LDR         R1,[R0,#0x0]
 00000020  4311      ORR         R1,R2
 00000022  6001      STR         R1,[R0,#0x0]
   36:    IO0SET |= EN;                //EN=1
 00000024  4800      LDR         R2,=0x400
 00000026  4800      LDR         R0,=0xE0028004
 00000028  6801      LDR         R1,[R0,#0x0]
 0000002A  4311      ORR         R1,R2
 0000002C  6001      STR         R1,[R0,#0x0]
   37:    ms_delay(5);
 0000002E  2005      MOV         R0,#0x5
 00000030  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000032  FFE6      BL          ms_delay?T  ; T=0x0001  (2)
   38:    IO0CLR |= EN;                //EN=0
 00000034  4800      LDR         R2,=0x400
 00000036  4800      LDR         R0,=0xE002800C
 00000038  6801      LDR         R1,[R0,#0x0]
 0000003A  4311      ORR         R1,R2
 0000003C  6001      STR         R1,[R0,#0x0]
   40: }
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_data?T'


*** CODE SEGMENT '?PR?lcd_cmd?T?lcd':
   47: void lcd_cmd(U8 cmd)
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 6   

 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; cmd
 00000004  ---- Variable 'cmd' assigned to Register 'R1' ----
   49:    IO1CLR |= DATA_MASK;                             
 00000004  4800      LDR         R3,=0xFF0000
 00000006  4800      LDR         R0,=0xE002801C
 00000008  6802      LDR         R2,[R0,#0x0]
 0000000A  431A      ORR         R2,R3
 0000000C  6002      STR         R2,[R0,#0x0]
   50:    IO1SET  = cmd<<16;
 0000000E  1C08      MOV         R0,R1 ; cmd
 00000010  0601      LSL         R1,R0,#0x18 ; cmd
 00000012  0E09      LSR         R1,R1,#0x18
 00000014  0409      LSL         R1,R1,#0x10
 00000016  4800      LDR         R0,=0xE0028014
 00000018  6001      STR         R1,[R0,#0x0]
   51:    IO0CLR |= RS;                //RS=0
 0000001A  4800      LDR         R2,=0x800
 0000001C  4800      LDR         R0,=0xE002800C
 0000001E  6801      LDR         R1,[R0,#0x0]
 00000020  4311      ORR         R1,R2
 00000022  6001      STR         R1,[R0,#0x0]
   52:    IO0SET |= EN;                //EN=1
 00000024  4800      LDR         R2,=0x400
 00000026  4800      LDR         R0,=0xE0028004
 00000028  6801      LDR         R1,[R0,#0x0]
 0000002A  4311      ORR         R1,R2
 0000002C  6001      STR         R1,[R0,#0x0]
   53:    ms_delay(5);
 0000002E  2005      MOV         R0,#0x5
 00000030  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000032  FFE6      BL          ms_delay?T  ; T=0x0001  (2)
   54:    IO0CLR |= EN;                //EN=0
 00000034  4800      LDR         R2,=0x400
 00000036  4800      LDR         R0,=0xE002800C
 00000038  6801      LDR         R1,[R0,#0x0]
 0000003A  4311      ORR         R1,R2
 0000003C  6001      STR         R1,[R0,#0x0]
   56: }
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_cmd?T'


*** CODE SEGMENT '?PR?lcd_init?T?lcd':
   64: void lcd_init()
 00000000  B500      PUSH        {LR}
   66:    lcd_cmd(EIGHT_BIT_MODE);  //2 line,5*7 matrix
 00000002  2038      MOV         R0,#0x38
 00000004  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000006  FFFC      BL          lcd_cmd?T  ; T=0x0001  (2)
   67:    ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   68:    lcd_cmd(CLR_DISP); //clear display
 0000000E  2001      MOV         R0,#0x1
 00000010  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_cmd?T  ; T=0x0001  (2)
   69:    ms_delay(25);
 00000014  2019      MOV         R0,#0x19
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
   70:    lcd_cmd(AUTO_CUR);   //automatic rt shift cursor
 0000001A  2006      MOV         R0,#0x6
 0000001C  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          lcd_cmd?T  ; T=0x0001  (2)
   71:    ms_delay(25);
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 7   

 00000020  2019      MOV         R0,#0x19
 00000022  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000024  FFED      BL          ms_delay?T  ; T=0x0001  (2)
   72:    lcd_cmd(DISP_ON_CUR_OFF);    //display on cursor off
 00000026  200C      MOV         R0,#0xC
 00000028  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          lcd_cmd?T  ; T=0x0001  (2)
   73:    ms_delay(25);
 0000002C  2019      MOV         R0,#0x19
 0000002E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000030  FFE7      BL          ms_delay?T  ; T=0x0001  (2)
   74: }
 00000032  BC08      POP         {R3}
 00000034  4718      BX          R3
 00000036          ENDP ; 'lcd_init?T'


*** CODE SEGMENT '?PR?clrscr?T?lcd':
   81: void clrscr()
 00000000  B500      PUSH        {LR}
   83:   lcd_cmd(CLR_DISP); //clear display
 00000002  2001      MOV         R0,#0x1
 00000004  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000006  FFFC      BL          lcd_cmd?T  ; T=0x0001  (2)
   84:   ms_delay(5);
 00000008  2005      MOV         R0,#0x5
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   85: }
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'clrscr?T'


*** CODE SEGMENT '?PR?cursur_on?T?lcd':
   87: void cursur_on()
 00000000  B500      PUSH        {LR}
   89:     lcd_cmd(DISP_ON_CUR_ON);    //display on cursor on
 00000002  200F      MOV         R0,#0xF
 00000004  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000006  FFFC      BL          lcd_cmd?T  ; T=0x0001  (2)
   90:       ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   91: }
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'cursur_on?T'


*** CODE SEGMENT '?PR?cursur_off?T?lcd':
   93: void cursur_off()
 00000000  B500      PUSH        {LR}
   95:     lcd_cmd(DISP_ON_CUR_OFF);   //display on cursor off
 00000002  200C      MOV         R0,#0xC
 00000004  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000006  FFFC      BL          lcd_cmd?T  ; T=0x0001  (2)
   96:       ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   97: }
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'cursur_off?T'


*** CODE SEGMENT '?PR?lcd_line1_disp?T?lcd':
  101: void lcd_line1_disp(unsigned char *line1_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line1_data
 00000004  ---- Variable 'line1_data' assigned to Register 'R5' ----
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 8   

  102: {
 00000004            ; SCOPE-START
  104:  position += 0x80;
 00000004  3180      ADD         R1,#0x80
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  105:  lcd_cmd(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_cmd?T  ; T=0x0001  (2)
  106:  ms_delay(15);
 00000014  200F      MOV         R0,#0xF
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  107:  for(l=0; *line1_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_3  ; T=0x00000034
 0000001E          L_4:
  109:   lcd_data(*line1_data);
 0000001E  1C28      MOV         R0,R5 ; line1_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line1_data
 00000022  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_data?T  ; T=0x0001  (2)
  110:   ms_delay(10);
 00000026  200A      MOV         R0,#0xA
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  111:   line1_data++;
 0000002C  3501      ADD         R5,#0x1
  112:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_3:
 00000034  1C28      MOV         R0,R5 ; line1_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line1_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_4  ; T=0x0000001E
 0000003C            ; SCOPE-END
  113: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line1_disp?T'


*** CODE SEGMENT '?PR?lcd_line2_disp?T?lcd':
  117:  void lcd_line2_disp(unsigned char *line2_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line2_data
 00000004  ---- Variable 'line2_data' assigned to Register 'R5' ----
  118: {
 00000004            ; SCOPE-START
  120:  position += 0xc0;
 00000004  31C0      ADD         R1,#0xC0
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  121:  lcd_cmd(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_cmd?T  ; T=0x0001  (2)
  122:  ms_delay(5);
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 9   

 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  123:  for(l=0; *line2_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_8  ; T=0x00000034
 0000001E          L_9:
  125:   lcd_data(*line2_data);
 0000001E  1C28      MOV         R0,R5 ; line2_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line2_data
 00000022  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_data?T  ; T=0x0001  (2)
  126:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  127:   line2_data++;
 0000002C  3501      ADD         R5,#0x1
  128:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_8:
 00000034  1C28      MOV         R0,R5 ; line2_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line2_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_9  ; T=0x0000001E
 0000003C            ; SCOPE-END
  129: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line2_disp?T'


*** CODE SEGMENT '?PR?lcd_line3_disp?T?lcd':
  130: void lcd_line3_disp(unsigned char *line3_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line3_data
 00000004  ---- Variable 'line3_data' assigned to Register 'R5' ----
  131: {
 00000004            ; SCOPE-START
  133:  position += 0x94;
 00000004  3194      ADD         R1,#0x94
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  134:  lcd_cmd(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_cmd?T  ; T=0x0001  (2)
  135:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  136:  for(l=0; *line3_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_13  ; T=0x00000034
 0000001E          L_14:
  138:   lcd_data(*line3_data);
 0000001E  1C28      MOV         R0,R5 ; line3_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line3_data
 00000022  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_data?T  ; T=0x0001  (2)
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 10  

  139:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  140:   line3_data++;
 0000002C  3501      ADD         R5,#0x1
  141:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_13:
 00000034  1C28      MOV         R0,R5 ; line3_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line3_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_14  ; T=0x0000001E
 0000003C            ; SCOPE-END
  142: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line3_disp?T'


*** CODE SEGMENT '?PR?lcd_line4_disp?T?lcd':
  144: void lcd_line4_disp(unsigned char *line4_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line4_data
 00000004  ---- Variable 'line4_data' assigned to Register 'R5' ----
  145: {
 00000004            ; SCOPE-START
  147:  position += 0xd4;
 00000004  31D4      ADD         R1,#0xD4
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  148:  lcd_cmd(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_cmd?T  ; T=0x0001  (2)
  149:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  150:  for(l=0; *line4_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_18  ; T=0x00000034
 0000001E          L_19:
  152:   lcd_data(*line4_data);
 0000001E  1C28      MOV         R0,R5 ; line4_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line4_data
 00000022  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_data?T  ; T=0x0001  (2)
  153:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  154:   line4_data++;
 0000002C  3501      ADD         R5,#0x1
  155:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_18:
 00000034  1C28      MOV         R0,R5 ; line4_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line4_data
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 11  

 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_19  ; T=0x0000001E
 0000003C            ; SCOPE-END
  156: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line4_disp?T'


*** CODE SEGMENT '?PR?lcd_scroll_disp?T?lcd':
  158: void lcd_scroll_disp(unsigned char *scroll_data,  unsigned char position)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C0F      MOV         R7,R1 ; position
 00000004  ---- Variable 'position' assigned to Register 'R7' ----
 00000004  1C06      MOV         R6,R0 ; scroll_data
 00000006  ---- Variable 'scroll_data' assigned to Register 'R6' ----
 00000006  B081      SUB         R13,#0x4
  159: {
 00000008            ; SCOPE-START
  163:  position += 0x80;
 00000008  3780      ADD         R7,#0x80
 0000000A  063F      LSL         R7,R7,#0x18
 0000000C  0E3F      LSR         R7,R7,#0x18
  164:  d = scroll_data;       
 0000000E  1C35      MOV         R5,R6 ; scroll_data
 00000010  ---- Variable 'd' assigned to Register 'R5' ----
  165:  lcd_cmd(position);
 00000010  1C38      MOV         R0,R7 ; position
 00000012  0600      LSL         R0,R0,#0x18 ; position
 00000014  0E00      LSR         R0,R0,#0x18
 00000016  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000018  FFF3      BL          lcd_cmd?T  ; T=0x0001  (2)
  166:  for(j = 15; j>0 ; j--)
 0000001A  240F      MOV         R4,#0xF
 0000001C  ---- Variable 'j' assigned to Register 'R4' ----
 0000001C  E02B      B           L_23  ; T=0x00000076
 0000001E          L_24:
  168:   position = j + 0x80;
 0000001E  1C20      MOV         R0,R4 ; j
 00000020  0607      LSL         R7,R0,#0x18 ; j
 00000022  0E3F      LSR         R7,R7,#0x18
 00000024  3780      ADD         R7,#0x80
 00000026  063F      LSL         R7,R7,#0x18
 00000028  0E3F      LSR         R7,R7,#0x18
  169:   lcd_cmd(position);
 0000002A  1C38      MOV         R0,R7 ; position
 0000002C  0600      LSL         R0,R0,#0x18 ; position
 0000002E  0E00      LSR         R0,R0,#0x18
 00000030  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000032  FFE6      BL          lcd_cmd?T  ; T=0x0001  (2)
  170:   ms_delay(5);
 00000034  2005      MOV         R0,#0x5
 00000036  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000038  FFE3      BL          ms_delay?T  ; T=0x0001  (2)
  171:   for(i=0; *d!='\0'; i++)
 0000003A  2100      MOV         R1,#0x0
 0000003C  A800      ADD         R0,R13,#0x0
 0000003E  7001      STRB        R1,[R0,#0x0] ; i
 00000040  E00B      B           L_28  ; T=0x0000005A
 00000042          L_29:
  173:    lcd_data(*d);
 00000042  1C28      MOV         R0,R5 ; d
 00000044  7800      LDRB        R0,[R0,#0x0] ; d
 00000046  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000048  FFDB      BL          lcd_data?T  ; T=0x0001  (2)
  174:    ms_delay(1);
 0000004A  2001      MOV         R0,#0x1
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 12  

 0000004C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          ms_delay?T  ; T=0x0001  (2)
  175:    d++;
 00000050  3501      ADD         R5,#0x1
  176:   }
 00000052  A800      ADD         R0,R13,#0x0
 00000054  7801      LDRB        R1,[R0,#0x0] ; i
 00000056  3101      ADD         R1,#0x1
 00000058  7001      STRB        R1,[R0,#0x0] ; i
 0000005A          L_28:
 0000005A  1C28      MOV         R0,R5 ; d
 0000005C  7800      LDRB        R0,[R0,#0x0] ; d
 0000005E  2800      CMP         R0,#0x0
 00000060  D1EF      BNE         L_29  ; T=0x00000042
  177:   d = scroll_data++;
 00000062  1C35      MOV         R5,R6 ; scroll_data
 00000064  3601      ADD         R6,#0x1
  178:   ms_delay(9000);
 00000066  4800      LDR         R0,=0x2328
 00000068  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          ms_delay?T  ; T=0x0001  (2)
  179:   clrscr();
 0000006C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000006E  FFC8      BL          clrscr?T  ; T=0x0001  (2)
  180:  }
 00000070  3C01      SUB         R4,#0x1
 00000072  0624      LSL         R4,R4,#0x18
 00000074  0E24      LSR         R4,R4,#0x18
 00000076          L_23:
 00000076  1C20      MOV         R0,R4 ; j
 00000078  0600      LSL         R0,R0,#0x18 ; j
 0000007A  0E00      LSR         R0,R0,#0x18
 0000007C  2800      CMP         R0,#0x0
 0000007E  DCCE      BGT         L_24  ; T=0x0000001E
 00000080            ; SCOPE-END
  181: }
 00000080  B001      ADD         R13,#0x4
 00000082  BCF0      POP         {R4-R7}
 00000084  BC08      POP         {R3}
 00000086  4718      BX          R3
 00000088          ENDP ; 'lcd_scroll_disp?T'


*** CODE SEGMENT '?PR?display_dots?T?lcd':
  183: void display_dots()
 00000000  B530      PUSH        {R4-R5,LR}
  184: {
 00000002            ; SCOPE-START
  186:   for(b=0;b<5;b++)
 00000002  2400      MOV         R4,#0x0
 00000004  ---- Variable 'b' assigned to Register 'R4' ----
 00000004  E032      B           L_33  ; T=0x0000006C
  188:     for(m=0;m<3;m++)
 00000006          L_40:
 00000006  2500      MOV         R5,#0x0
 00000008  ---- Variable 'm' assigned to Register 'R5' ----
 00000008  E00E      B           L_38  ; T=0x00000028
 0000000A          L_39:
  190:             lcd_cmd(0x8c+m);
 0000000A  1C28      MOV         R0,R5 ; m
 0000000C  0600      LSL         R0,R0,#0x18 ; m
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  308C      ADD         R0,#0x8C
 00000012  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000014  FFF5      BL          lcd_cmd?T  ; T=0x0001  (2)
  191:             lcd_data('.');
 00000016  202E      MOV         R0,#0x2E
 00000018  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 13  

 0000001A  FFF2      BL          lcd_data?T  ; T=0x0001  (2)
  192:             ms_delay(1000);
 0000001C  48FA      LDR         R0,=0x3E8
 0000001E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000020  FFEF      BL          ms_delay?T  ; T=0x0001  (2)
  193:         }
 00000022  3501      ADD         R5,#0x1
 00000024  062D      LSL         R5,R5,#0x18
 00000026  0E2D      LSR         R5,R5,#0x18
 00000028          L_38:
 00000028  1C28      MOV         R0,R5 ; m
 0000002A  0600      LSL         R0,R0,#0x18 ; m
 0000002C  0E00      LSR         R0,R0,#0x18
 0000002E  2803      CMP         R0,#0x3
 00000030  DBEB      BLT         L_39  ; T=0x0000000A
  194:     for(m=0;m<3;m++)
 00000032  2500      MOV         R5,#0x0
 00000034  E00F      B           L_43  ; T=0x00000056
 00000036          L_44:
  196:             lcd_cmd(0x8e-m);
 00000036  1C28      MOV         R0,R5 ; m
 00000038  0601      LSL         R1,R0,#0x18 ; m
 0000003A  0E09      LSR         R1,R1,#0x18
 0000003C  208E      MOV         R0,#0x8E
 0000003E  1A40      SUB         R0,R1
 00000040  F7FF      BL          lcd_cmd?T  ; T=0x0001  (1)
 00000042  FFDE      BL          lcd_cmd?T  ; T=0x0001  (2)
  197:             lcd_data(' ');
 00000044  2020      MOV         R0,#0x20
 00000046  F7FF      BL          lcd_data?T  ; T=0x0001  (1)
 00000048  FFDB      BL          lcd_data?T  ; T=0x0001  (2)
  198:             ms_delay(9);
 0000004A  2009      MOV         R0,#0x9
 0000004C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          ms_delay?T  ; T=0x0001  (2)
  199:         }
 00000050  3501      ADD         R5,#0x1
 00000052  062D      LSL         R5,R5,#0x18
 00000054  0E2D      LSR         R5,R5,#0x18
 00000056          L_43:
 00000056  1C28      MOV         R0,R5 ; m
 00000058  0600      LSL         R0,R0,#0x18 ; m
 0000005A  0E00      LSR         R0,R0,#0x18
 0000005C  2803      CMP         R0,#0x3
 0000005E  DBEA      BLT         L_44  ; T=0x00000036
  200:     ms_delay(50);
 00000060  2032      MOV         R0,#0x32
 00000062  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000064  FFCD      BL          ms_delay?T  ; T=0x0001  (2)
  201:     }
 00000066  3401      ADD         R4,#0x1
 00000068  0624      LSL         R4,R4,#0x18
 0000006A  0E24      LSR         R4,R4,#0x18
 0000006C          L_33:
 0000006C  1C20      MOV         R0,R4 ; b
 0000006E  0600      LSL         R0,R0,#0x18 ; b
 00000070  0E00      LSR         R0,R0,#0x18
 00000072  2805      CMP         R0,#0x5
 00000074  DBC7      BLT         L_40  ; T=0x00000006
 00000076            ; SCOPE-END
  202: }
 00000076  BC30      POP         {R4-R5}
 00000078  BC08      POP         {R3}
 0000007A  4718      BX          R3
 0000007C          ENDP ; 'display_dots?T'


ARM COMPILER V2.40e,  lcd                                                                  30/04/12  17:52:57  PAGE 14  


Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
