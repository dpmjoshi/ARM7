ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe main.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include"includes.h"
    2          //************************************************************//
    3          #define no_recv_byte      14
    4          #define COOLER_ON         1<<19
    5          #define HEATER_ON         1<<20
    6          #define SSR_ON            1<<21
    7          #define BUZZER            1<<22
    8          
    9          U8 Uc_data_sent[30];
   10          U8 uart1_set[30]         = {"\n\rUART1 connected at 9600-8-N"};
   11          U8 uart0_set[30]         = {"\n\rUART0 connected at 9600-8-N"};
   12          U8 welcome_note1[25]     = {"Reaction  Controller"};
   13          U8 welcome_note2[20]     = {"NCL-Pune"};
   14          U8 lcd_data_sys_chk[20]  = {"Initializing"};
   15          
   16          U8 Uc_data = 0;
   17          //*************************Flags*******************************//
   18          U8 Uc_user_mode_flag = 4;
   19          U8 Uc_labview_stop = 1;
   20          U8 Uc_labview_hdsk = 0;
   21          
   22          
   23          void main()
   24          {   
   25   1        PINSEL0 |= 0X00050005;     // selecting UART0 and UART1
   26   1        PINSEL1 |= 0X00080000;
   27   1        IO1DIR  |= 0X0FFF0000;     //pins 1.16 to 1.23 output pins
   28   1        IO0DIR  |= 0X003E0C00;     //port 0 rs and en as output
   29   1        IO0CLR   = 0X00FF0000;    
   30   1        
   31   1        IO0SET   = 0X0FF00400;
   32   1        IO0CLR   = BUZZER;
   33   1      
   34   1        PCONP   |= 0x00000218;
   35   1        INTWAKE |= 0x8000; 
   36   1        //*************************************//
   37   1        //         Initialisations             //
   38   1        //*************************************//
   39   1        lcd_init();
   40   1        irq_init();
   41   1        uart_init();
   42   1        adc_init();
   43   1        //wdt_init();
   44   1        pwm5_init();
   45   1        timer1_init_interrupt();
   46   1        rtc_init_interrupt();
   47   1        
   48   1        //*************************************//
   49   1        //          Welcome Note               //
   50   1        //*************************************//
   51   1        lcd_line1_disp("Power-Down Testing",0);
   52   1        ms_delay(50000);
   53   1        
   54   1        //*************************************//
   55   1        //  Displaying Static Messages         //
   56   1        //*************************************//
   57   1      
   58   1        U0IER = 0;
   59   1        
ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 2   

   60   1        
   61   1          
   62   1        wdt_init();
   63   1        while(1)
   64   1        { 
   65   2          
   66   2          wdt_feed(0x03ffffff);
   67   2          if(wdt_timeout == 1)
   68   2          {
   69   3              wdt_timeout = 0;
   70   3              lcd_line3_disp("WDEnable",12);
   71   3          }
   72   2          
   73   2          rtc_get_time();
   74   2          lcd_line2_disp(Uc_real_time,8);
   75   2           
   76   2          
   77   2          //*********************************************//
   78   2          //   displaying Real Time & user Set Time      //
   79   2          //*********************************************//
   80   2          if(Uc_alrm == 1)
   81   2          {
   82   3              Uc_alrm = 2;
   83   3              lcd_line3_disp("Alarm",9);
   84   3          }
   85   2         
   86   2          //*********************************************//
   87   2          //          key press on background            //
   88   2          //*********************************************//
   89   2          Uc_key_temp = get_key(0);
   90   2          if(Uc_key_temp == '1')
   91   2          {
   92   3              Uc_key_temp = 0;
   93   3              get_user_time();
   94   3              PCON = 0x02;                                 // forcing ARM in power-down mode
   95   3          
   96   3          }
   97   2        }
   98   1      }
   99          
  100          
  101          
  102          
  103          
  104          
  105          
ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (uart_init?T)
 EXTERN CODE16 (irq_init?T)
 EXTERN CODE16 (get_user_time?T)
 EXTERN CODE16 (lcd_init?T)
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (rtc_init_interrupt?T)
 EXTERN CODE16 (rtc_get_time?T)
 EXTERN DATA (Uc_real_time)
 EXTERN DATA (Uc_alrm)
 EXTERN CODE16 (timer1_init_interrupt?T)
 EXTERN CODE16 (adc_init?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (pwm5_init?T)
 EXTERN CODE16 (wdt_init?T)
 EXTERN DATA (wdt_timeout)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         main
 PUBLIC         Uc_data_sent
 PUBLIC         uart1_set
 PUBLIC         uart0_set
 PUBLIC         welcome_note1
 PUBLIC         welcome_note2
 PUBLIC         lcd_data_sys_chk
 PUBLIC         Uc_data
 PUBLIC         Uc_user_mode_flag
 PUBLIC         Uc_labview_stop
 PUBLIC         Uc_labview_hdsk



*** DATA SEGMENT '?CON?main':
 00000000          ??S_8:
 00000000            DB          'Alarm',0x00
 00000006          ??S_7:
 00000006            DB          'WDEnable',0x00
 0000000F          ??S_6:
 0000000F            DB          'Power-Down Testing',0x00

*** DATA SEGMENT '?DT0?main':
 00000000          Uc_data_sent:
 00000000            DS          30
 0000001E          uart1_set:
 0000001E           BEGIN_INIT
 0000001E            DB          0x0A,0x0D,'UART1 connected at 9600-8-N',0x00
 0000003C           END_INIT
 0000003C          uart0_set:
 0000003C           BEGIN_INIT
 0000003C            DB          0x0A,0x0D,'UART0 connected at 9600-8-N',0x00
 0000005A           END_INIT
 0000005A          welcome_note1:
 0000005A           BEGIN_INIT
 0000005A            DB          'Reaction  Controller',0x00
 0000006F            SPACE       4
 00000073           END_INIT
 00000073          welcome_note2:
 00000073           BEGIN_INIT
 00000073            DB          'NCL-Pune',0x00
 0000007C            SPACE       11
ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 4   

 00000087           END_INIT
 00000087          lcd_data_sys_chk:
 00000087           BEGIN_INIT
 00000087            DB          'Initializing',0x00
 00000094            SPACE       7
 0000009B           END_INIT
 0000009B          Uc_data:
 0000009B           BEGIN_INIT
 0000009B  00        DB          0x0
 0000009C           END_INIT
 0000009C          Uc_user_mode_flag:
 0000009C           BEGIN_INIT
 0000009C  04        DB          0x4
 0000009D           END_INIT
 0000009D          Uc_labview_stop:
 0000009D           BEGIN_INIT
 0000009D  01        DB          0x1
 0000009E           END_INIT
 0000009E          Uc_labview_hdsk:
 0000009E           BEGIN_INIT
 0000009E  00        DB          0x0
 0000009F           END_INIT



*** CODE SEGMENT '?PR?main?main':
   23: void main()
 00000000  B500      PUSH        {LR}
   25:   PINSEL0 |= 0X00050005;     // selecting UART0 and UART1
 00000002  4800      LDR         R2,=0x50005
 00000004  4800      LDR         R0,=0xE002C000
 00000006  6801      LDR         R1,[R0,#0x0]
 00000008  4311      ORR         R1,R2
 0000000A  6001      STR         R1,[R0,#0x0]
   26:   PINSEL1 |= 0X00080000;
 0000000C  4800      LDR         R2,=0x80000
 0000000E  4800      LDR         R0,=0xE002C004
 00000010  6801      LDR         R1,[R0,#0x0]
 00000012  4311      ORR         R1,R2
 00000014  6001      STR         R1,[R0,#0x0]
   27:   IO1DIR  |= 0X0FFF0000;     //pins 1.16 to 1.23 output pins
 00000016  4800      LDR         R2,=0xFFF0000
 00000018  4800      LDR         R0,=0xE0028018
 0000001A  6801      LDR         R1,[R0,#0x0]
 0000001C  4311      ORR         R1,R2
 0000001E  6001      STR         R1,[R0,#0x0]
   28:   IO0DIR  |= 0X003E0C00;     //port 0 rs and en as output
 00000020  4800      LDR         R2,=0x3E0C00
 00000022  4800      LDR         R0,=0xE0028008
 00000024  6801      LDR         R1,[R0,#0x0]
 00000026  4311      ORR         R1,R2
 00000028  6001      STR         R1,[R0,#0x0]
   29:   IO0CLR   = 0X00FF0000;    
 0000002A  4800      LDR         R1,=0xFF0000
 0000002C  4800      LDR         R0,=0xE002800C
 0000002E  6001      STR         R1,[R0,#0x0]
   31:   IO0SET   = 0X0FF00400;
 00000030  4800      LDR         R1,=0xFF00400
 00000032  4800      LDR         R0,=0xE0028004
 00000034  6001      STR         R1,[R0,#0x0]
   32:   IO0CLR   = BUZZER;
 00000036  4800      LDR         R1,=0x400000
 00000038  4800      LDR         R0,=0xE002800C
 0000003A  6001      STR         R1,[R0,#0x0]
   34:   PCONP   |= 0x00000218;
 0000003C  4A86      LDR         R2,=0x218
 0000003E  4800      LDR         R0,=0xE01FC0C4
 00000040  6801      LDR         R1,[R0,#0x0]
ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 5   

 00000042  4311      ORR         R1,R2
 00000044  6001      STR         R1,[R0,#0x0]
   35:   INTWAKE |= 0x8000; 
 00000046  4800      LDRH        R2,=0x8000
 00000048  4800      LDR         R0,=0xE01FC144
 0000004A  8801      LDRH        R1,[R0,#0x0]
 0000004C  4311      ORR         R1,R2
 0000004E  8001      STRH        R1,[R0,#0x0]
   39:   lcd_init();
 00000050  F7FF      BL          lcd_init?T  ; T=0x0001  (1)
 00000052  FFD6      BL          lcd_init?T  ; T=0x0001  (2)
   40:   irq_init();
 00000054  F7FF      BL          irq_init?T  ; T=0x0001  (1)
 00000056  FFD4      BL          irq_init?T  ; T=0x0001  (2)
   41:   uart_init();
 00000058  F7FF      BL          uart_init?T  ; T=0x0001  (1)
 0000005A  FFD2      BL          uart_init?T  ; T=0x0001  (2)
   42:   adc_init();
 0000005C  F7FF      BL          adc_init?T  ; T=0x0001  (1)
 0000005E  FFD0      BL          adc_init?T  ; T=0x0001  (2)
   44:   pwm5_init();
 00000060  F7FF      BL          pwm5_init?T  ; T=0x0001  (1)
 00000062  FFCE      BL          pwm5_init?T  ; T=0x0001  (2)
   45:   timer1_init_interrupt();
 00000064  F7FF      BL          timer1_init_interrupt?T  ; T=0x0001  (1)
 00000066  FFCC      BL          timer1_init_interrupt?T  ; T=0x0001  (2)
   46:   rtc_init_interrupt();
 00000068  F7FF      BL          rtc_init_interrupt?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          rtc_init_interrupt?T  ; T=0x0001  (2)
   51:   lcd_line1_disp("Power-Down Testing",0);
 0000006C  4800      LDR         R0,=??S_6 ; ??S_6
 0000006E  2100      MOV         R1,#0x0
 00000070  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000072  FFC6      BL          lcd_line1_disp?T  ; T=0x0001  (2)
   52:   ms_delay(50000);
 00000074  4800      LDR         R0,=0xC350
 00000076  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000078  FFC3      BL          ms_delay?T  ; T=0x0001  (2)
   58:   U0IER = 0;
 0000007A  2100      MOV         R1,#0x0
 0000007C  4800      LDR         R0,=0xE000C004
 0000007E  6001      STR         R1,[R0,#0x0]
   62:   wdt_init();
 00000080  F7FF      BL          wdt_init?T  ; T=0x0001  (1)
 00000082  FFBE      BL          wdt_init?T  ; T=0x0001  (2)
   63:   while(1)
 00000084          L_3:
   66:     wdt_feed(0x03ffffff);
 00000084  4800      LDR         R0,=0x3FFFFFF
 00000086  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000088  FFBB      BL          wdt_feed?T  ; T=0x0001  (2)
   67:     if(wdt_timeout == 1)
 0000008A  4800      LDR         R0,=wdt_timeout ; wdt_timeout
 0000008C  7800      LDRB        R0,[R0,#0x0] ; wdt_timeout
 0000008E  2801      CMP         R0,#0x1
 00000090  D106      BNE         L_5  ; T=0x000000A0
   69:         wdt_timeout = 0;
 00000092  2100      MOV         R1,#0x0
 00000094  4800      LDR         R0,=wdt_timeout ; wdt_timeout
 00000096  7001      STRB        R1,[R0,#0x0] ; wdt_timeout
   70:         lcd_line3_disp("WDEnable",12);
 00000098  4800      LDR         R0,=??S_7 ; ??S_7
 0000009A  210C      MOV         R1,#0xC
 0000009C  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          lcd_line3_disp?T  ; T=0x0001  (2)
   71:     }
ARM COMPILER V2.50a,  main                                                                 10/09/12  13:03:35  PAGE 6   

 000000A0          L_5:
   73:     rtc_get_time();
 000000A0  F7FF      BL          rtc_get_time?T  ; T=0x0001  (1)
 000000A2  FFAE      BL          rtc_get_time?T  ; T=0x0001  (2)
   74:     lcd_line2_disp(Uc_real_time,8);
 000000A4  4800      LDR         R0,=Uc_real_time ; Uc_real_time
 000000A6  2108      MOV         R1,#0x8
 000000A8  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 000000AA  FFAA      BL          lcd_line2_disp?T  ; T=0x0001  (2)
   80:     if(Uc_alrm == 1)
 000000AC  4800      LDR         R0,=Uc_alrm ; Uc_alrm
 000000AE  7800      LDRB        R0,[R0,#0x0] ; Uc_alrm
 000000B0  2801      CMP         R0,#0x1
 000000B2  D106      BNE         L_6  ; T=0x000000C2
   82:         Uc_alrm = 2;
 000000B4  2102      MOV         R1,#0x2
 000000B6  4800      LDR         R0,=Uc_alrm ; Uc_alrm
 000000B8  7001      STRB        R1,[R0,#0x0] ; Uc_alrm
   83:         lcd_line3_disp("Alarm",9);
 000000BA  4800      LDR         R0,=??S_8 ; ??S_8
 000000BC  2109      MOV         R1,#0x9
 000000BE  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 000000C0  FF9F      BL          lcd_line3_disp?T  ; T=0x0001  (2)
   84:     }
 000000C2          L_6:
   89:     Uc_key_temp = get_key(0);
 000000C2  2000      MOV         R0,#0x0
 000000C4  F7FF      BL          get_key?T  ; T=0x0001  (1)
 000000C6  FF9C      BL          get_key?T  ; T=0x0001  (2)
 000000C8  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 000000CA  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
   90:     if(Uc_key_temp == '1')
 000000CC  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000CE  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000D0  2831      CMP         R0,#0x31
 000000D2  D1D7      BNE         L_3  ; T=0x00000084
   92:         Uc_key_temp = 0;
 000000D4  2100      MOV         R1,#0x0
 000000D6  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000D8  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
   93:         get_user_time();
 000000DA  F7FF      BL          get_user_time?T  ; T=0x0001  (1)
 000000DC  FF91      BL          get_user_time?T  ; T=0x0001  (2)
   94:         PCON = 0x02;                                 // forcing ARM in power-down mode
 000000DE  2102      MOV         R1,#0x2
 000000E0  4800      LDR         R0,=0xE01FC0C0
 000000E2  7001      STRB        R1,[R0,#0x0]
   97:   }
 000000E4  E7CE      B           L_3  ; T=0x00000084
   98: }
 000000E6  BC08      POP         {R3}
 000000E8  4718      BX          R3
 000000EA          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =       159
  const size           =        34
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
