ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE app
OBJECT MODULE PLACED IN app.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe app.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          #define NO_RECV_BYTE     22
    3          #define NO_OF_SAMPLE     05
    4          #define COOLER_ON        1<<19
    5          #define HEATER_ON        1<<20
    6          #define SSR_ON           1<<21
    7          #define BUZZER           1<<22
    8          //**********************************************//
    9          void irq_init(void);
   10          void uart0_ISR(void)__irq;
   11          void uart1_ISR(void)__irq;
   12          void default_page(void);
   13          void get_user_time(void);
   14          void temp_ctrl(void);
   15          void adc_val_conv(U32, U32, U32, U32, U32, U8);
   16          
   17          void user_time_conv(void);
   18          void user_temp_conv(void);
   19          
   20          
   21          //**********************************************//
   22          U8  space[400]             = {"                                                                          
             -                                                                                                                        
             -                   "};
   23          U8  Uc_cr_lf[3]            = {"\n\r"};
   24          U8  Uc_temp_low_lcd[5]    = {"Low "};
   25          U8  Uc_temp_high_lcd[5]   = {"High"};
   26          
   27          U8  Uc_dec_arr[11]         = {"00000"};
   28          U8  Uc_set_user_time[10]   = {"00:00:00"};
   29          U8  Uc_set_temp[7]         = {"000"};
   30          
   31          U8  ascii_arr[100];
   32          U8  node_addr_arr[2];
   33          U8  node_ascii_arr[5];
   34          U8  Uc_recv_data[100];
   35          
   36          U8  Uc_byte_count = 0;
   37          U8  frame_chk_cnt = 0;
   38          U8  Uc_temp_high  = 0; 
   39          U8  Uc_adc_time_out_flag = 0;
   40          U32 Ui_temp_set_val = 0;
   41          U8  Uc_user_dwn_hr  = 0;
   42          U8  Uc_user_dwn_min = 0;
   43          U8  Uc_user_dwn_sec = 0;
   44          
   45          
   46          struct frame_data
   47          {
   48           unsigned char  api_identifier;
   49           unsigned char  node_addr[5];
   50           unsigned char  rssi_val;
   51           unsigned short no_of_samples;
   52           unsigned char  ch_indicator;
   53           unsigned int   ch0_s1; 
   54           unsigned int   ch0_s2;
   55           unsigned int   ch0_s3;
   56           unsigned int   ch0_s4;
   57           unsigned int   ch0_s5;
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 2   

   58           unsigned int   ch1_s1;
   59          }node_01;
   60                                 
   61          //***************************************************
   62          //Initialisation of ISR
   63          //***************************************************
   64          
   65          void irq_init(void)
   66          {
   67   1        
   68   1        VICVectAddr0 = (U32)&uart0_ISR;
   69   1        VICVectCntl0 = 0x20 | 6;
   70   1        VICIntEnable = 1 << 6;    
   71   1        U0IER=0x1; 
   72   1      
   73   1        VICVectAddr1 = (U32)&uart1_ISR;
   74   1        VICVectCntl1 = 0x20 | 7;
   75   1        VICIntEnable = 1 << 7;    
   76   1        U1IER=0x1;
   77   1      
   78   1      }
   79          //***************************************************
   80          // ISR for UART0
   81          //***************************************************
   82          void uart0_ISR(void)__irq
   83          {
   84   1          
   85   1         VICVectAddr   = 0x00;
   86   1      }  
   87          //***************************************************
   88          // ISR for UART1
   89          //***************************************************
   90          
   91          void uart1_ISR(void)__irq
   92          {
   93   1         Uc_recv_data[Uc_byte_count] = U1RBR;
   94   1         Uc_byte_count++;
   95   1         if(Uc_byte_count >= 10)
   96   1         {
   97   2          Uc_byte_count = 0;
   98   2         }
   99   1         Uc_recv_data[Uc_byte_count] = '\0';
  100   1      
  101   1         VICVectAddr = 0x00;
  102   1      }
  103          //***************************************************
  104          // default page to be displayed in SYSTEM mode
  105          //***************************************************
  106          void default_page(void)
  107          {
  108   1        clrscr();
  109   1      }
  110          //***************************************************
  111          // function to get time duration from user
  112          //***************************************************
  113          void get_user_time(void)
  114          {
  115   1        U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
  116   1        
  117   1        U8 sc_set_time_count = 0;
  118   1        
  119   1      
  120   1        clrscr();
  121   1        lcd_line1_disp(&uc_lcd_data_user_time[0],0);
  122   1        lcd_line1_disp(&Uc_set_user_time[0],12);
  123   1       
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 3   

  124   1        while(sc_set_time_count < 8)                   //uc_set_time_count < 9
  125   1        {
  126   2          wdt_feed(0x03ffffff);
  127   2          Uc_key_temp = get_key(1);
  128   2          pwm5_pulse_width(5000, 100);
  129   2          //pwm_enable();
  130   2      
  131   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  132   2          {
  133   3              if(sc_set_time_count == 0)
  134   3              {
  135   4                  
  136   4                  if(Uc_key_temp < '3')
  137   4                  {
  138   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  139   5                      sc_set_time_count += 1;
  140   5                  }
  141   4              }
  142   3              else if(sc_set_time_count == 1)
  143   3              {
  144   4                 if((Uc_set_user_time[0] - 0x30) == 2)
  145   4                 {
  146   5                  if(Uc_key_temp < '4')
  147   5                  {
  148   6                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  149   6                      sc_set_time_count += 2;
  150   6                  }
  151   5                 }
  152   4                 else
  153   4                 {
  154   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  155   5                      sc_set_time_count += 2;
  156   5                 }
  157   4              }
  158   3              else if(sc_set_time_count == 3)
  159   3              {
  160   4                  
  161   4                  if(Uc_key_temp < '6')
  162   4                  {
  163   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  164   5                      sc_set_time_count += 1;
  165   5                  }
  166   4              }
  167   3              else if(sc_set_time_count == 4)
  168   3              {
  169   4                  
  170   4                  Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  171   4                  sc_set_time_count += 2;
  172   4                  
  173   4              }
  174   3              else if(sc_set_time_count == 6)
  175   3              {
  176   4                  
  177   4                  if(Uc_key_temp < '6')
  178   4                  {
  179   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  180   5                      sc_set_time_count += 1;
  181   5                  }
  182   4              }
  183   3              else if(sc_set_time_count == 7)
  184   3              {
  185   4                  
  186   4                  if(Uc_key_temp < 'A')
  187   4                  {
  188   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  189   5                      sc_set_time_count += 1;
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 4   

  190   5                  }
  191   4              }
  192   3      
  193   3          }
  194   2      
  195   2          if(Uc_key_temp == 'A')
  196   2          {       
  197   3                lcd_line2_disp("Enter Temp: ",0);
  198   3                lcd_line2_disp(&Uc_set_temp[0],12);
  199   3                sc_set_time_count = 8;
  200   3               
  201   3          }
  202   2          //*********************************************//
  203   2        
  204   2          if(sc_set_time_count == 0)
  205   2          {
  206   3              lcd_line4_disp("Range 0-2",11);
  207   3          }
  208   2          if(sc_set_time_count == 1)
  209   2          {
  210   3              lcd_line4_disp("Range 0-3",11);
  211   3          }
  212   2          if(sc_set_time_count == 3)
  213   2          {
  214   3              lcd_line4_disp("Range 0-5",11);
  215   3          }
  216   2          if(sc_set_time_count == 4)
  217   2          {
  218   3              lcd_line4_disp("Range 0-9",11);
  219   3          }
  220   2          if(sc_set_time_count == 6)
  221   2          {
  222   3              lcd_line4_disp("Range 0-5",11);
  223   3          }
  224   2          if(sc_set_time_count == 7)
  225   2          {
  226   3              lcd_line4_disp("Range 0-9",11);
  227   3          }
  228   2          //*********************************************//
  229   2          lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
  230   2          //Uc_set_user_time[sc_set_time_count + 1] = '\0';
  231   2          key_delay(250);     // do not remove it
  232   2          lcd_line1_disp(&Uc_set_user_time[0],12);
  233   2          pwm_disable();
  234   2        }
  235   1        lcd_line4_disp("Press Start",9);                                                           
  236   1        while((Uc_key_temp = get_key(1)) != 'D');
  237   1        Uc_alrm = 3;
  238   1        user_time_conv();   // to convert the time entered by USER
  239   1       
  240   1        clrscr();
  241   1        default_page();    // Displaying default PAGE while leaving from USER MODE.
  242   1      }
  243          //---------------------------------------------------------------------------------
  244          //------------------------------get temp from User---------------------------------
  245          //---------------------------------------------------------------------------------
  246          void get_usr_temp()
  247          { 
  248   1        U8 uc_set_temp_count = 0;
  249   1      
  250   1        lcd_line2_disp("Enter Temp: ",0);
  251   1      
  252   1        while(uc_set_temp_count < 3)
  253   1        {
  254   2          wdt_feed(0x03ffffff);
  255   2          Uc_key_temp = get_key(1);
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 5   

  256   2          
  257   2          pwm5_pulse_width(5000, 100);
  258   2      
  259   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  260   2          {
  261   3               if(uc_set_temp_count == 0)
  262   3               {
  263   4                  if(Uc_key_temp <= '3')
  264   4                  {
  265   5                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  266   5                      uc_set_temp_count++; 
  267   5      
  268   5                  }
  269   4               }
  270   3               else 
  271   3               {
  272   4                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  273   4                      uc_set_temp_count++; 
  274   4      
  275   4               }
  276   3      
  277   3          }
  278   2          if(Uc_key_temp == 'A')
  279   2          {
  280   3               uc_set_temp_count = 3;
  281   3          }
  282   2          lcd_line2_disp(&Uc_set_temp[0],12);
  283   2          key_delay(250);     // do not remove it
  284   2          //*************range of no*****************//
  285   2          if(uc_set_temp_count == 0)
  286   2          {
  287   3              lcd_line4_disp("Range 0-3",11);
  288   3          }
  289   2          if(uc_set_temp_count == 1)
  290   2          {
  291   3              lcd_line4_disp("Range 0-9",11);
  292   3          }
  293   2          if(uc_set_temp_count == 2)
  294   2          {
  295   3              lcd_line4_disp("Range 0-9",11);
  296   3          }
  297   2          //****************************************//
  298   2          pwm_disable();
  299   2        }
  300   1        user_temp_conv();   // to convert the temp entered by USER
  301   1      }
  302          
  303          //***************************************************
  304          // function to convert user time in to hex
  305          //***************************************************
  306          
  307          void user_time_conv(void)
  308          {   
  309   1          U8 uc_user_hr  = 0;
  310   1          U8 uc_user_min = 0;
  311   1          U8 uc_user_sec = 0;
  312   1      
  313   1          uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
  314   1          uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
  315   1          uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
  316   1          uc_user_min += (Uc_set_user_time[4] - 0x30);
  317   1          uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
  318   1          uc_user_sec += (Uc_set_user_time[7] - 0x30);
  319   1      
  320   1          Uc_user_dwn_hr  = uc_user_hr;
  321   1          Uc_user_dwn_min = uc_user_min;
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 6   

  322   1          Uc_user_dwn_sec = uc_user_sec;
  323   1          
  324   1          set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
  325   1      }
  326          //**********************************************************************************//
  327          // Function Name: function to convert User Temp in to hex                           //
  328          // Arguments    : NONE                                                              //
  329          // Return Types : NONE                                                              //
  330          // Description  : Converts Ui_temp_set_val to HEX and the conversion is placed into //
  331          //                Uc_set_temp[] array                                               //
  332          //**********************************************************************************//
  333          void user_temp_conv(void)
  334          {   
  335   1          Ui_temp_set_val   =  0;
  336   1          Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
  337   1          Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
  338   1          Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
  339   1          
  340   1      }
  341          //**********************************************************************************//
  342          // Function Name: function to control SSR and SOLENOID                              //
  343          // Arguments    : NONE                                                              //
  344          // Return Types : NONE                                                              //
  345          // Description  : Depending on Uc_temp_high  HEATER and COOLER are controlled       //
  346          //**********************************************************************************//
  347          void temp_ctrl(void)
  348          {
  349   1          if(Uc_temp_high == 1)
  350   1           {
  351   2              IO0SET = COOLER_ON; 
  352   2              IO0SET = HEATER_ON;
  353   2              IO0CLR = SSR_ON;
  354   2           }
  355   1          else
  356   1           {
  357   2              IO0CLR = HEATER_ON; 
  358   2              IO0CLR = COOLER_ON;
  359   2              IO0SET = SSR_ON;
  360   2           }
  361   1      }
  362          //**********************************************************************************//
  363          // Description : function to convert ADC hex value into DEC                         //
  364          // Argument    : U32 (5 samples)                                                    //
  365          // Return Type : NONE                                                               //
  366          //**********************************************************************************//
  367          void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
  368          {
  369   1       U8 a = 0;
  370   1       U32 adc_temp;
  371   1       U32 adc_val;
  372   1      //*****************************************
  373   1      // Taking AVG of 3 samples
  374   1      //*****************************************
  375   1       adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
  376   1       if(condition == 1)
  377   1       {
  378   2          if(adc_val < 4)
  379   2          {
  380   3              lcd_line3_disp("Sensor Open", 9);
  381   3           }
  382   2          else
  383   2          {
  384   3              lcd_line3_disp("           ", 9);
  385   3          }
  386   2       }
  387   1      //*****************************************
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 7   

  388   1      // calibrating ADC hex data
  389   1      //*****************************************
  390   1       adc_val *= 3300;   
  391   1       adc_val >>= 10;
  392   1      
  393   1      
  394   1       if(condition == 0)
  395   1       {
  396   2          adc_val *= 2;
  397   2      //  adc_val /= 700;
  398   2       }
  399   1      
  400   1       if(condition == 1)
  401   1       {
  402   2          if(adc_val > 10)
  403   2          {
  404   3              adc_val -= 10;
  405   3          }
  406   2       }
  407   1       
  408   1       adc_temp = adc_val;
  409   1      //*****************************************
  410   1      // Temp Control
  411   1      //*****************************************
  412   1      if(condition == 1)
  413   1      {
  414   2       if( adc_val  > Ui_temp_set_val)
  415   2         {
  416   3              Uc_temp_high = 1;
  417   3         }
  418   2       else
  419   2         {
  420   3              Uc_temp_high = 0;
  421   3         }
  422   2      
  423   2      }
  424   1      //*****************************************
  425   1      // HEX to DEC conversion 
  426   1      //*****************************************
  427   1       Uc_dec_arr[a]  = adc_temp/10000;   
  428   1       Uc_dec_arr[a] += 0x30;
  429   1       adc_temp       = adc_temp%10000;
  430   1       a++;
  431   1      //--------------------------------------
  432   1       Uc_dec_arr[a]  = adc_temp/1000;    
  433   1       Uc_dec_arr[a] += 0x30;
  434   1       adc_temp       = adc_temp%1000;
  435   1       a++;
  436   1      //--------------------------------------
  437   1       Uc_dec_arr[a]  = adc_temp/100;
  438   1       Uc_dec_arr[a] += 0x30;
  439   1       adc_temp       = adc_temp%100;
  440   1       a++;
  441   1      //--------------------------------------
  442   1       Uc_dec_arr[a]  = adc_temp/10;
  443   1       Uc_dec_arr[a] += 0x30;
  444   1       adc_temp       = adc_temp%10;
  445   1       a++;
  446   1       Uc_dec_arr[a]  = adc_temp + 0x30;
  447   1      
  448   1      }
  449           
  450            
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (lcd_line1_ch_disp?T)
 EXTERN DATA (Uc_alrm)
 EXTERN CODE16 (set_alarm?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (pwm5_pulse_width?T)
 EXTERN CODE16 (pwm_disable?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         uart0_ISR?A
 PUBLIC         uart1_ISR?A
 PUBLIC         irq_init?T
 PUBLIC         default_page?T
 PUBLIC         get_user_time?T
 PUBLIC         user_temp_conv?T
 PUBLIC         temp_ctrl?T
 PUBLIC         adc_val_conv?T
 PUBLIC         user_time_conv?T
 PUBLIC         get_usr_temp?T
 PUBLIC         Uc_dec_arr
 PUBLIC         Uc_set_user_time
 PUBLIC         space
 PUBLIC         Uc_user_dwn_hr
 PUBLIC         Uc_user_dwn_min
 PUBLIC         Uc_user_dwn_sec
 PUBLIC         Uc_byte_count
 PUBLIC         Uc_recv_data
 PUBLIC         Uc_adc_time_out_flag
 PUBLIC         Uc_cr_lf
 PUBLIC         Uc_temp_low_lcd
 PUBLIC         Uc_temp_high_lcd
 PUBLIC         Uc_set_temp
 PUBLIC         ascii_arr
 PUBLIC         node_addr_arr
 PUBLIC         node_ascii_arr
 PUBLIC         frame_chk_cnt
 PUBLIC         Uc_temp_high
 PUBLIC         Ui_temp_set_val
 PUBLIC         node_01



*** DATA SEGMENT '?CON?app':
 00000000          ??S_16:
 00000000            DB          '           ',0x00
 0000000C          ??S_15:
 0000000C            DB          'Sensor Open',0x00
 00000018          ??S_14:
 00000018            DB          'Press Start',0x00
 00000024          ??S_13:
 00000024            DB          'Range 0-9',0x00
 0000002E          ??S_12:
 0000002E            DB          'Range 0-5',0x00
 00000038          ??S_11:
 00000038            DB          'Range 0-3',0x00
 00000042          ??S_10:
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 9   

 00000042            DB          'Range 0-2',0x00
 0000004C          ??S_9:
 0000004C            DB          'Enter Temp: ',0x00
 00000059            ALIGN       4
 0000005C          ?tpl?0001:
 0000005C           BEGIN_INIT
 0000005C            DB          'Enter Time: ',0x00
 00000069            SPACE       17
 0000007A           END_INIT

*** DATA SEGMENT '?DT0?app':
 00000000          Ui_temp_set_val:
 00000000           BEGIN_INIT
 00000000  00000000  DD          0x0
 00000004           END_INIT
 00000004          node_01:
 00000004            DS          36
 00000028          Uc_dec_arr:
 00000028           BEGIN_INIT
 00000028            DB          '00000',0x00
 0000002E            SPACE       5
 00000033           END_INIT
 00000033          Uc_set_user_time:
 00000033           BEGIN_INIT
 00000033            DB          '00:00:00',0x00
 0000003C            SPACE       1
 0000003D           END_INIT
 0000003D          space:
 0000003D           BEGIN_INIT
 0000003D            DB          '                                      '
 00000063            DB          '                                      '
 00000089            DB          '                                      '
 000000AF            DB          '                                      '
 000000D5            DB          '                                      '
 000000FB            DB          '                       ',0x00
 00000113            SPACE       186
 000001CD           END_INIT
 000001CD          Uc_user_dwn_hr:
 000001CD           BEGIN_INIT
 000001CD  00        DB          0x0
 000001CE           END_INIT
 000001CE          Uc_user_dwn_min:
 000001CE           BEGIN_INIT
 000001CE  00        DB          0x0
 000001CF           END_INIT
 000001CF          Uc_user_dwn_sec:
 000001CF           BEGIN_INIT
 000001CF  00        DB          0x0
 000001D0           END_INIT
 000001D0          Uc_byte_count:
 000001D0           BEGIN_INIT
 000001D0  00        DB          0x0
 000001D1           END_INIT
 000001D1          Uc_recv_data:
 000001D1            DS          100
 00000235          Uc_adc_time_out_flag:
 00000235           BEGIN_INIT
 00000235  00        DB          0x0
 00000236           END_INIT
 00000236          Uc_cr_lf:
 00000236           BEGIN_INIT
 00000236            DB          0x0A,0x0D,0x00
 00000239           END_INIT
 00000239          Uc_temp_low_lcd:
 00000239           BEGIN_INIT
 00000239            DB          'Low ',0x00
 0000023E           END_INIT
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 10  

 0000023E          Uc_temp_high_lcd:
 0000023E           BEGIN_INIT
 0000023E            DB          'High',0x00
 00000243           END_INIT
 00000243          Uc_set_temp:
 00000243           BEGIN_INIT
 00000243            DB          '000',0x00
 00000247            SPACE       3
 0000024A           END_INIT
 0000024A          ascii_arr:
 0000024A            DS          100
 000002AE          node_addr_arr:
 000002AE            DS          2
 000002B0          node_ascii_arr:
 000002B0            DS          5
 000002B5          frame_chk_cnt:
 000002B5           BEGIN_INIT
 000002B5  00        DB          0x0
 000002B6           END_INIT
 000002B6          Uc_temp_high:
 000002B6           BEGIN_INIT
 000002B6  00        DB          0x0
 000002B7           END_INIT



*** CODE SEGMENT '?PR?irq_init?T?app':
   68:   VICVectAddr0 = (U32)&uart0_ISR;
 00000000  4900      LDR         R1,=uart0_ISR?A ; uart0_ISR?A
 00000002  4800      LDR         R0,=0xFFFFF100
 00000004  6001      STR         R1,[R0,#0x0]
   69:   VICVectCntl0 = 0x20 | 6;
 00000006  2126      MOV         R1,#0x26
 00000008  4800      LDR         R0,=0xFFFFF200
 0000000A  6001      STR         R1,[R0,#0x0]
   70:   VICIntEnable = 1 << 6;    
 0000000C  2140      MOV         R1,#0x40
 0000000E  4800      LDR         R0,=0xFFFFF010
 00000010  6001      STR         R1,[R0,#0x0]
   71:   U0IER=0x1; 
 00000012  2101      MOV         R1,#0x1
 00000014  4800      LDR         R0,=0xE000C004
 00000016  6001      STR         R1,[R0,#0x0]
   73:   VICVectAddr1 = (U32)&uart1_ISR;
 00000018  4A00      LDR         R2,=uart1_ISR?A ; uart1_ISR?A
 0000001A  4800      LDR         R0,=0xFFFFF104
 0000001C  6002      STR         R2,[R0,#0x0]
   74:   VICVectCntl1 = 0x20 | 7;
 0000001E  2227      MOV         R2,#0x27
 00000020  4800      LDR         R0,=0xFFFFF204
 00000022  6002      STR         R2,[R0,#0x0]
   75:   VICIntEnable = 1 << 7;    
 00000024  2280      MOV         R2,#0x80
 00000026  4800      LDR         R0,=0xFFFFF010
 00000028  6002      STR         R2,[R0,#0x0]
   76:   U1IER=0x1;
 0000002A  4800      LDR         R0,=0xE0010004
 0000002C  6001      STR         R1,[R0,#0x0]
   78: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'irq_init?T'


*** CODE SEGMENT '?PR?uart0_ISR?A?app':
   82: void uart0_ISR(void)__irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   85:    VICVectAddr   = 0x00;
 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xFFFFF030
 0000000C  E5801000  STR         R1,[R0,#0x0]
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 11  

   86: }  
 00000010  E8BD0003  LDMIA       R13!,{R0-R1}
 00000014  E25EF004  SUBS        R15,R14,#0x0004
 00000018          ENDP ; 'uart0_ISR?A'


*** CODE SEGMENT '?PR?uart1_ISR?A?app':
   91: void uart1_ISR(void)__irq
 00000000  E92D000F  STMDB       R13!,{R0-R3}
   93:    Uc_recv_data[Uc_byte_count] = U1RBR;
 00000004  E5100000  LDR         R0,=0xE0010000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E5101000  LDR         R1,=Uc_byte_count ; Uc_byte_count
 00000010  E5D11000  LDRB        R1,[R1,#0x0] ; Uc_byte_count
 00000014  E1A03001  MOV         R3,R1
 00000018  E5102000  LDR         R2,=Uc_recv_data ; Uc_recv_data
 0000001C  E7C20003  STRB        R0,[R2,+R3]
   94:    Uc_byte_count++;
 00000020  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000024  E2811001  ADD         R1,R1,#0x0001
 00000028  E5C01000  STRB        R1,[R0,#0x0] ; Uc_byte_count
   95:    if(Uc_byte_count >= 10)
 0000002C  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000030  E5D00000  LDRB        R0,[R0,#0x0] ; Uc_byte_count
 00000034  E350000A  CMP         R0,#0x000A
 00000038  BA000002  BLT         L_1  ; Targ=0x48
   97:     Uc_byte_count = 0;
 0000003C  E3A01000  MOV         R1,#0x0
 00000040  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000044  E5C01000  STRB        R1,[R0,#0x0] ; Uc_byte_count
   98:    }
 00000048          L_1:
   99:    Uc_recv_data[Uc_byte_count] = '\0';
 00000048  E3A00000  MOV         R0,#0x0
 0000004C  E5101000  LDR         R1,=Uc_byte_count ; Uc_byte_count
 00000050  E5D11000  LDRB        R1,[R1,#0x0] ; Uc_byte_count
 00000054  E1A02001  MOV         R2,R1
 00000058  E5101000  LDR         R1,=Uc_recv_data ; Uc_recv_data
 0000005C  E7C10002  STRB        R0,[R1,+R2]
  101:    VICVectAddr = 0x00;
 00000060  E3A01000  MOV         R1,#0x0
 00000064  E5100000  LDR         R0,=0xFFFFF030
 00000068  E5801000  STR         R1,[R0,#0x0]
  102: }
 0000006C  E8BD000F  LDMIA       R13!,{R0-R3}
 00000070  E25EF004  SUBS        R15,R14,#0x0004
 00000074          ENDP ; 'uart1_ISR?A'


*** CODE SEGMENT '?PR?default_page?T?app':
  106: void default_page(void)
 00000000  B500      PUSH        {LR}
  108:   clrscr();
 00000002  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000004  FFFD      BL          clrscr?T  ; T=0x0001  (2)
  109: }
 00000006  BC08      POP         {R3}
 00000008  4718      BX          R3
 0000000A          ENDP ; 'default_page?T'


*** CODE SEGMENT '?PR?get_user_time?T?app':
  113: void get_user_time(void)
 00000000  B510      PUSH        {R4,LR}
 00000002  B088      SUB         R13,#0x20
  114: {
 00000004            ; SCOPE-START
  115:   U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
 00000004  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000006  A800      ADD         R0,R13,#0x0
 00000008  221E      MOV         R2,#0x1E
 0000000A          L_68:
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 12  

 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_68  ; T=0x0000000A
  117:   U8 sc_set_time_count = 0;
 00000016  2400      MOV         R4,#0x0
 00000018  ---- Variable 'sc_set_time_count' assigned to Register 'R4' ----
  120:   clrscr();
 00000018  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          clrscr?T  ; T=0x0001  (2)
  121:   lcd_line1_disp(&uc_lcd_data_user_time[0],0);
 0000001C  A800      ADD         R0,R13,#0x0
 0000001E  2100      MOV         R1,#0x0
 00000020  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000022  FFEE      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  122:   lcd_line1_disp(&Uc_set_user_time[0],12);
 00000024  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 00000026  210C      MOV         R1,#0xC
 00000028  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  124:   while(sc_set_time_count < 8)                   //uc_set_time_count < 9
 0000002C  E0D9      B           L_2  ; T=0x000001E2
 0000002E          L_4:
  126:       wdt_feed(0x03ffffff);
 0000002E  4800      LDR         R0,=0x3FFFFFF
 00000030  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000032  FFE6      BL          wdt_feed?T  ; T=0x0001  (2)
  127:     Uc_key_temp = get_key(1);
 00000034  2001      MOV         R0,#0x1
 00000036  F7FF      BL          get_key?T  ; T=0x0001  (1)
 00000038  FFE3      BL          get_key?T  ; T=0x0001  (2)
 0000003A  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000003C  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  128:     pwm5_pulse_width(5000, 100);
 0000003E  4800      LDR         R0,=0x1388
 00000040  2164      MOV         R1,#0x64
 00000042  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000044  FFDD      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  131:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 00000046  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000048  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000004A  1C01      MOV         R1,R0
 0000004C  2930      CMP         R1,#0x30
 0000004E  DB01      BLT         L_7  ; T=0x00000054
 00000050  2301      MOV         R3,#0x1
 00000052  E000      B           L_8  ; T=0x00000056
 00000054          L_7:
 00000054  2300      MOV         R3,#0x0
 00000056          L_8:
 00000056  2939      CMP         R1,#0x39
 00000058  DC01      BGT         L_9  ; T=0x0000005E
 0000005A  2201      MOV         R2,#0x1
 0000005C  E000      B           L_10  ; T=0x00000060
 0000005E          L_9:
 0000005E  2200      MOV         R2,#0x0
 00000060          L_10:
 00000060  401A      AND         R2,R3
 00000062  2A00      CMP         R2,#0x0
 00000064  D06A      BEQ         L_6  ; T=0x0000013C
  133:         if(sc_set_time_count == 0)
 00000066  1C22      MOV         R2,R4 ; sc_set_time_count
 00000068  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000006A  0E12      LSR         R2,R2,#0x18
 0000006C  2A00      CMP         R2,#0x0
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 13  

 0000006E  D10A      BNE         L_11  ; T=0x00000086
  136:             if(Uc_key_temp < '3')
 00000070  2933      CMP         R1,#0x33
 00000072  DA63      BGE         L_6  ; T=0x0000013C
  138:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000074  1C22      MOV         R2,R4 ; sc_set_time_count
 00000076  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000078  0E1B      LSR         R3,R3,#0x18
 0000007A  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 0000007C  54D0      STRB        R0,[R2,R3]
  139:                 sc_set_time_count += 1;
 0000007E  3401      ADD         R4,#0x1
 00000080  0624      LSL         R4,R4,#0x18
 00000082  0E24      LSR         R4,R4,#0x18
  141:         }
 00000084  E05A      B           L_6  ; T=0x0000013C
 00000086          L_11:
  142:         else if(sc_set_time_count == 1)
 00000086  1C22      MOV         R2,R4 ; sc_set_time_count
 00000088  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000008A  0E12      LSR         R2,R2,#0x18
 0000008C  2A01      CMP         R2,#0x1
 0000008E  D118      BNE         L_14  ; T=0x000000C2
  144:            if((Uc_set_user_time[0] - 0x30) == 2)
 00000090  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000092  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time
 00000094  3A30      SUB         R2,#0x30
 00000096  2A02      CMP         R2,#0x2
 00000098  D10A      BNE         L_15  ; T=0x000000B0
  146:             if(Uc_key_temp < '4')
 0000009A  2934      CMP         R1,#0x34
 0000009C  DA4E      BGE         L_6  ; T=0x0000013C
  148:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 0000009E  1C22      MOV         R2,R4 ; sc_set_time_count
 000000A0  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000A2  0E1B      LSR         R3,R3,#0x18
 000000A4  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000A6  54D0      STRB        R0,[R2,R3]
  149:                 sc_set_time_count += 2;
 000000A8  3402      ADD         R4,#0x2
 000000AA  0624      LSL         R4,R4,#0x18
 000000AC  0E24      LSR         R4,R4,#0x18
  151:            }
 000000AE  E045      B           L_6  ; T=0x0000013C
 000000B0          L_15:
  154:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000B0  1C22      MOV         R2,R4 ; sc_set_time_count
 000000B2  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000B4  0E1B      LSR         R3,R3,#0x18
 000000B6  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000B8  54D0      STRB        R0,[R2,R3]
  155:                 sc_set_time_count += 2;
 000000BA  3402      ADD         R4,#0x2
 000000BC  0624      LSL         R4,R4,#0x18
 000000BE  0E24      LSR         R4,R4,#0x18
  157:         }
 000000C0  E03C      B           L_6  ; T=0x0000013C
 000000C2          L_14:
  158:         else if(sc_set_time_count == 3)
 000000C2  1C22      MOV         R2,R4 ; sc_set_time_count
 000000C4  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000C6  0E12      LSR         R2,R2,#0x18
 000000C8  2A03      CMP         R2,#0x3
 000000CA  D10A      BNE         L_19  ; T=0x000000E2
  161:             if(Uc_key_temp < '6')
 000000CC  2936      CMP         R1,#0x36
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 14  

 000000CE  DA35      BGE         L_6  ; T=0x0000013C
  163:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000D0  1C22      MOV         R2,R4 ; sc_set_time_count
 000000D2  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000D4  0E1B      LSR         R3,R3,#0x18
 000000D6  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000D8  54D0      STRB        R0,[R2,R3]
  164:                 sc_set_time_count += 1;
 000000DA  3401      ADD         R4,#0x1
 000000DC  0624      LSL         R4,R4,#0x18
 000000DE  0E24      LSR         R4,R4,#0x18
  166:         }
 000000E0  E02C      B           L_6  ; T=0x0000013C
 000000E2          L_19:
  167:         else if(sc_set_time_count == 4)
 000000E2  1C22      MOV         R2,R4 ; sc_set_time_count
 000000E4  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000E6  0E12      LSR         R2,R2,#0x18
 000000E8  2A04      CMP         R2,#0x4
 000000EA  D108      BNE         L_22  ; T=0x000000FE
  170:             Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000EC  1C22      MOV         R2,R4 ; sc_set_time_count
 000000EE  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000F0  0E1B      LSR         R3,R3,#0x18
 000000F2  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000F4  54D0      STRB        R0,[R2,R3]
  171:             sc_set_time_count += 2;
 000000F6  3402      ADD         R4,#0x2
 000000F8  0624      LSL         R4,R4,#0x18
 000000FA  0E24      LSR         R4,R4,#0x18
  173:         }
 000000FC  E01E      B           L_6  ; T=0x0000013C
 000000FE          L_22:
  174:         else if(sc_set_time_count == 6)
 000000FE  1C22      MOV         R2,R4 ; sc_set_time_count
 00000100  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000102  0E12      LSR         R2,R2,#0x18
 00000104  2A06      CMP         R2,#0x6
 00000106  D10A      BNE         L_24  ; T=0x0000011E
  177:             if(Uc_key_temp < '6')
 00000108  2936      CMP         R1,#0x36
 0000010A  DA17      BGE         L_6  ; T=0x0000013C
  179:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 0000010C  1C22      MOV         R2,R4 ; sc_set_time_count
 0000010E  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000110  0E1B      LSR         R3,R3,#0x18
 00000112  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000114  54D0      STRB        R0,[R2,R3]
  180:                 sc_set_time_count += 1;
 00000116  3401      ADD         R4,#0x1
 00000118  0624      LSL         R4,R4,#0x18
 0000011A  0E24      LSR         R4,R4,#0x18
  182:         }
 0000011C  E00E      B           L_6  ; T=0x0000013C
 0000011E          L_24:
  183:         else if(sc_set_time_count == 7)
 0000011E  1C22      MOV         R2,R4 ; sc_set_time_count
 00000120  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000122  0E12      LSR         R2,R2,#0x18
 00000124  2A07      CMP         R2,#0x7
 00000126  D109      BNE         L_6  ; T=0x0000013C
  186:             if(Uc_key_temp < 'A')
 00000128  2941      CMP         R1,#0x41
 0000012A  DA07      BGE         L_6  ; T=0x0000013C
  188:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 0000012C  1C21      MOV         R1,R4 ; sc_set_time_count
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 15  

 0000012E  060A      LSL         R2,R1,#0x18 ; sc_set_time_count
 00000130  0E12      LSR         R2,R2,#0x18
 00000132  4800      LDR         R1,=Uc_set_user_time ; Uc_set_user_time
 00000134  5488      STRB        R0,[R1,R2]
  189:                 sc_set_time_count += 1;
 00000136  3401      ADD         R4,#0x1
 00000138  0624      LSL         R4,R4,#0x18
 0000013A  0E24      LSR         R4,R4,#0x18
  193:     }
 0000013C          L_6:
  195:     if(Uc_key_temp == 'A')
 0000013C  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000013E  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000140  2841      CMP         R0,#0x41
 00000142  D108      BNE         L_29  ; T=0x00000156
  197:           lcd_line2_disp("Enter Temp: ",0);
 00000144  4800      LDR         R0,=??S_9 ; ??S_9
 00000146  2100      MOV         R1,#0x0
 00000148  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000014A  FF5A      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  198:           lcd_line2_disp(&Uc_set_temp[0],12);
 0000014C  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 0000014E  210C      MOV         R1,#0xC
 00000150  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000152  FF56      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  199:           sc_set_time_count = 8;
 00000154  2408      MOV         R4,#0x8
  201:     }
 00000156          L_29:
  204:       if(sc_set_time_count == 0)
 00000156  1C20      MOV         R0,R4 ; sc_set_time_count
 00000158  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 0000015A  0E00      LSR         R0,R0,#0x18
 0000015C  2800      CMP         R0,#0x0
 0000015E  D103      BNE         L_30  ; T=0x00000168
  206:         lcd_line4_disp("Range 0-2",11);
 00000160  4800      LDR         R0,=??S_10 ; ??S_10
 00000162  210B      MOV         R1,#0xB
 00000164  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000166  FF4C      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  207:     }
 00000168          L_30:
  208:     if(sc_set_time_count == 1)
 00000168  1C20      MOV         R0,R4 ; sc_set_time_count
 0000016A  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 0000016C  0E00      LSR         R0,R0,#0x18
 0000016E  2801      CMP         R0,#0x1
 00000170  D103      BNE         L_31  ; T=0x0000017A
  210:         lcd_line4_disp("Range 0-3",11);
 00000172  4800      LDR         R0,=??S_11 ; ??S_11
 00000174  210B      MOV         R1,#0xB
 00000176  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000178  FF43      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  211:     }
 0000017A          L_31:
  212:     if(sc_set_time_count == 3)
 0000017A  1C20      MOV         R0,R4 ; sc_set_time_count
 0000017C  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 0000017E  0E00      LSR         R0,R0,#0x18
 00000180  2803      CMP         R0,#0x3
 00000182  D103      BNE         L_32  ; T=0x0000018C
  214:         lcd_line4_disp("Range 0-5",11);
 00000184  4800      LDR         R0,=??S_12 ; ??S_12
 00000186  210B      MOV         R1,#0xB
 00000188  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000018A  FF3A      BL          lcd_line4_disp?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 16  

  215:     }
 0000018C          L_32:
  216:     if(sc_set_time_count == 4)
 0000018C  1C20      MOV         R0,R4 ; sc_set_time_count
 0000018E  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000190  0E00      LSR         R0,R0,#0x18
 00000192  2804      CMP         R0,#0x4
 00000194  D103      BNE         L_33  ; T=0x0000019E
  218:         lcd_line4_disp("Range 0-9",11);
 00000196  4800      LDR         R0,=??S_13 ; ??S_13
 00000198  210B      MOV         R1,#0xB
 0000019A  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000019C  FF31      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  219:     }
 0000019E          L_33:
  220:     if(sc_set_time_count == 6)
 0000019E  1C20      MOV         R0,R4 ; sc_set_time_count
 000001A0  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001A2  0E00      LSR         R0,R0,#0x18
 000001A4  2806      CMP         R0,#0x6
 000001A6  D103      BNE         L_34  ; T=0x000001B0
  222:         lcd_line4_disp("Range 0-5",11);
 000001A8  4800      LDR         R0,=??S_12 ; ??S_12
 000001AA  210B      MOV         R1,#0xB
 000001AC  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001AE  FF28      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  223:     }
 000001B0          L_34:
  224:     if(sc_set_time_count == 7)
 000001B0  1C20      MOV         R0,R4 ; sc_set_time_count
 000001B2  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001B4  0E00      LSR         R0,R0,#0x18
 000001B6  2807      CMP         R0,#0x7
 000001B8  D103      BNE         L_35  ; T=0x000001C2
  226:         lcd_line4_disp("Range 0-9",11);
 000001BA  4800      LDR         R0,=??S_13 ; ??S_13
 000001BC  210B      MOV         R1,#0xB
 000001BE  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001C0  FF1F      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  227:     }
 000001C2          L_35:
  229:     lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
 000001C2  1C20      MOV         R0,R4 ; sc_set_time_count
 000001C4  0601      LSL         R1,R0,#0x18 ; sc_set_time_count
 000001C6  0E09      LSR         R1,R1,#0x18
 000001C8  310B      ADD         R1,#0xB
 000001CA  2020      MOV         R0,#0x20
 000001CC  F7FF      BL          lcd_line1_ch_disp?T  ; T=0x0001  (1)
 000001CE  FF18      BL          lcd_line1_ch_disp?T  ; T=0x0001  (2)
  231:     key_delay(250);     // do not remove it
 000001D0  20FA      MOV         R0,#0xFA
 000001D2  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000001D4  FF15      BL          key_delay?T  ; T=0x0001  (2)
  232:     lcd_line1_disp(&Uc_set_user_time[0],12);
 000001D6  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 000001D8  210C      MOV         R1,#0xC
 000001DA  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 000001DC  FF11      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  233:     pwm_disable();
 000001DE  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000001E0  FF0F      BL          pwm_disable?T  ; T=0x0001  (2)
  234:   }
 000001E2          L_2:
 000001E2  1C20      MOV         R0,R4 ; sc_set_time_count
 000001E4  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001E6  0E00      LSR         R0,R0,#0x18
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 17  

 000001E8  2808      CMP         R0,#0x8
 000001EA  DA00      BLT         $+4
 000001EC  E71F      B           L_4  ; T=0x0000002E
  235:   lcd_line4_disp("Press Start",9);                                                           
 000001F0  4800      LDR         R0,=??S_14 ; ??S_14
 000001F2  2109      MOV         R1,#0x9
 000001F4  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001F6  FF04      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  236:   while((Uc_key_temp = get_key(1)) != 'D');
 000001F8          L_36:
 000001F8  2001      MOV         R0,#0x1
 000001FA  F7FF      BL          get_key?T  ; T=0x0001  (1)
 000001FC  FF01      BL          get_key?T  ; T=0x0001  (2)
 000001FE  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000200  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 00000202  0600      LSL         R0,R0,#0x18 ; get_key?T
 00000204  0E00      LSR         R0,R0,#0x18
 00000206  2844      CMP         R0,#0x44
 00000208  D1F6      BNE         L_36  ; T=0x000001F8
  237:   Uc_alrm = 3;
 0000020A  2103      MOV         R1,#0x3
 0000020C  4800      LDR         R0,=Uc_alrm ; Uc_alrm
 0000020E  7001      STRB        R1,[R0,#0x0] ; Uc_alrm
  238:   user_time_conv();   // to convert the time entered by USER
 00000210  F7FF      BL          user_time_conv?T  ; T=0x0001  (1)
 00000212  FEF6      BL          user_time_conv?T  ; T=0x0001  (2)
  240:   clrscr();
 00000214  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000216  FEF4      BL          clrscr?T  ; T=0x0001  (2)
  241:   default_page();    // Displaying default PAGE while leaving from USER MODE.
 00000218  F7FF      BL          default_page?T  ; T=0x0001  (1)
 0000021A  FEF2      BL          default_page?T  ; T=0x0001  (2)
 0000021C            ; SCOPE-END
  242: }
 0000021C  B008      ADD         R13,#0x20
 0000021E  BC10      POP         {R4}
 00000220  BC08      POP         {R3}
 00000222  4718      BX          R3
 00000224          ENDP ; 'get_user_time?T'


*** CODE SEGMENT '?PR?get_usr_temp?T?app':
  246: void get_usr_temp()
 00000000  B510      PUSH        {R4,LR}
  247: { 
 00000002            ; SCOPE-START
  248:   U8 uc_set_temp_count = 0;
 00000002  2400      MOV         R4,#0x0
 00000004  ---- Variable 'uc_set_temp_count' assigned to Register 'R4' ----
  250:   lcd_line2_disp("Enter Temp: ",0);
 00000004  4800      LDR         R0,=??S_9 ; ??S_9
 00000006  2100      MOV         R1,#0x0
 00000008  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  252:   while(uc_set_temp_count < 3)
 0000000C  E05C      B           L_40  ; T=0x000000C8
 0000000E          L_42:
  254:       wdt_feed(0x03ffffff);
 0000000E  4800      LDR         R0,=0x3FFFFFF
 00000010  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000012  FFF6      BL          wdt_feed?T  ; T=0x0001  (2)
  255:     Uc_key_temp = get_key(1);
 00000014  2001      MOV         R0,#0x1
 00000016  F7FF      BL          get_key?T  ; T=0x0001  (1)
 00000018  FFF3      BL          get_key?T  ; T=0x0001  (2)
 0000001A  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000001C  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  257:     pwm5_pulse_width(5000, 100);
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 18  

 0000001E  4800      LDR         R0,=0x1388
 00000020  2164      MOV         R1,#0x64
 00000022  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000024  FFED      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  259:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 00000026  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000028  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000002A  1C01      MOV         R1,R0
 0000002C  2930      CMP         R1,#0x30
 0000002E  DB01      BLT         L_45  ; T=0x00000034
 00000030  2301      MOV         R3,#0x1
 00000032  E000      B           L_46  ; T=0x00000036
 00000034          L_45:
 00000034  2300      MOV         R3,#0x0
 00000036          L_46:
 00000036  2939      CMP         R1,#0x39
 00000038  DC01      BGT         L_47  ; T=0x0000003E
 0000003A  2201      MOV         R2,#0x1
 0000003C  E000      B           L_48  ; T=0x00000040
 0000003E          L_47:
 0000003E  2200      MOV         R2,#0x0
 00000040          L_48:
 00000040  401A      AND         R2,R3
 00000042  2A00      CMP         R2,#0x0
 00000044  D017      BEQ         L_44  ; T=0x00000076
  261:          if(uc_set_temp_count == 0)
 00000046  1C22      MOV         R2,R4 ; uc_set_temp_count
 00000048  0612      LSL         R2,R2,#0x18 ; uc_set_temp_count
 0000004A  0E12      LSR         R2,R2,#0x18
 0000004C  2A00      CMP         R2,#0x0
 0000004E  D10A      BNE         L_49  ; T=0x00000066
  263:             if(Uc_key_temp <= '3')
 00000050  2933      CMP         R1,#0x33
 00000052  DC10      BGT         L_44  ; T=0x00000076
  265:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000054  1C21      MOV         R1,R4 ; uc_set_temp_count
 00000056  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 00000058  0E12      LSR         R2,R2,#0x18
 0000005A  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 0000005C  5488      STRB        R0,[R1,R2]
  266:                 uc_set_temp_count++; 
 0000005E  3401      ADD         R4,#0x1
 00000060  0624      LSL         R4,R4,#0x18
 00000062  0E24      LSR         R4,R4,#0x18
  269:          }
 00000064  E007      B           L_44  ; T=0x00000076
 00000066          L_49:
  272:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000066  1C21      MOV         R1,R4 ; uc_set_temp_count
 00000068  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 0000006A  0E12      LSR         R2,R2,#0x18
 0000006C  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 0000006E  5488      STRB        R0,[R1,R2]
  273:                 uc_set_temp_count++; 
 00000070  3401      ADD         R4,#0x1
 00000072  0624      LSL         R4,R4,#0x18
 00000074  0E24      LSR         R4,R4,#0x18
  277:     }
 00000076          L_44:
  278:     if(Uc_key_temp == 'A')
 00000076  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000078  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000007A  2841      CMP         R0,#0x41
 0000007C  D100      BNE         L_52  ; T=0x00000080
  280:          uc_set_temp_count = 3;
 0000007E  2403      MOV         R4,#0x3
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 19  

  281:     }
 00000080          L_52:
  282:     lcd_line2_disp(&Uc_set_temp[0],12);
 00000080  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000082  210C      MOV         R1,#0xC
 00000084  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000086  FFBC      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  283:     key_delay(250);     // do not remove it
 00000088  20FA      MOV         R0,#0xFA
 0000008A  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 0000008C  FFB9      BL          key_delay?T  ; T=0x0001  (2)
  285:     if(uc_set_temp_count == 0)
 0000008E  1C20      MOV         R0,R4 ; uc_set_temp_count
 00000090  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 00000092  0E00      LSR         R0,R0,#0x18
 00000094  2800      CMP         R0,#0x0
 00000096  D103      BNE         L_53  ; T=0x000000A0
  287:         lcd_line4_disp("Range 0-3",11);
 00000098  4800      LDR         R0,=??S_11 ; ??S_11
 0000009A  210B      MOV         R1,#0xB
 0000009C  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  288:     }
 000000A0          L_53:
  289:     if(uc_set_temp_count == 1)
 000000A0  1C20      MOV         R0,R4 ; uc_set_temp_count
 000000A2  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000000A4  0E00      LSR         R0,R0,#0x18
 000000A6  2801      CMP         R0,#0x1
 000000A8  D103      BNE         L_54  ; T=0x000000B2
  291:         lcd_line4_disp("Range 0-9",11);
 000000AA  4800      LDR         R0,=??S_13 ; ??S_13
 000000AC  210B      MOV         R1,#0xB
 000000AE  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000000B0  FFA7      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  292:     }
 000000B2          L_54:
  293:     if(uc_set_temp_count == 2)
 000000B2  1C20      MOV         R0,R4 ; uc_set_temp_count
 000000B4  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000000B6  0E00      LSR         R0,R0,#0x18
 000000B8  2802      CMP         R0,#0x2
 000000BA  D103      BNE         L_55  ; T=0x000000C4
  295:         lcd_line4_disp("Range 0-9",11);
 000000BC  4800      LDR         R0,=??S_13 ; ??S_13
 000000BE  210B      MOV         R1,#0xB
 000000C0  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000000C2  FF9E      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  296:     }
 000000C4          L_55:
  298:     pwm_disable();
 000000C4  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000000C6  FF9C      BL          pwm_disable?T  ; T=0x0001  (2)
  299:   }
 000000C8          L_40:
 000000C8  1C20      MOV         R0,R4 ; uc_set_temp_count
 000000CA  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000000CC  0E00      LSR         R0,R0,#0x18
 000000CE  2803      CMP         R0,#0x3
 000000D0  DB9D      BLT         L_42  ; T=0x0000000E
  300:   user_temp_conv();   // to convert the temp entered by USER
 000000D2  F7FF      BL          user_temp_conv?T  ; T=0x0001  (1)
 000000D4  FF95      BL          user_temp_conv?T  ; T=0x0001  (2)
 000000D6            ; SCOPE-END
  301: }
 000000D6  BC10      POP         {R4}
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 20  

 000000D8  BC08      POP         {R3}
 000000DA  4718      BX          R3
 000000DC          ENDP ; 'get_usr_temp?T'


*** CODE SEGMENT '?PR?user_time_conv?T?app':
  307: void user_time_conv(void)
 00000000  B510      PUSH        {R4,LR}
  308: {    
 00000002            ; SCOPE-START
  309:     U8 uc_user_hr  = 0;
 00000002  2300      MOV         R3,#0x0
 00000004  1C19      MOV         R1,R3 ; uc_user_hr
 00000006  ---- Variable 'uc_user_hr' assigned to Register 'R1' ----
  310:     U8 uc_user_min = 0;
 00000006  1C1A      MOV         R2,R3 ; uc_user_min
 00000008  ---- Variable 'uc_user_min' assigned to Register 'R2' ----
  311:     U8 uc_user_sec = 0;
 00000008  ---- Variable 'uc_user_sec' assigned to Register 'R3' ----
  313:     uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
 00000008  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 0000000A  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time
 0000000C  1C01      MOV         R1,R0
 0000000E  3930      SUB         R1,#0x30
 00000010  200A      MOV         R0,#0xA
 00000012  4341      MUL         R1,R0
 00000014  0609      LSL         R1,R1,#0x18
 00000016  0E09      LSR         R1,R1,#0x18
  314:     uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
 00000018  4800      LDR         R2,=Uc_set_user_time + 0x1 ; Uc_set_user_time+1
 0000001A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+1
 0000001C  3A30      SUB         R2,#0x30
 0000001E  0612      LSL         R2,R2,#0x18
 00000020  0E12      LSR         R2,R2,#0x18
 00000022  1889      ADD         R1,R2 ; uc_user_hr
 00000024  0609      LSL         R1,R1,#0x18
 00000026  0E09      LSR         R1,R1,#0x18
  315:     uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
 00000028  4800      LDR         R2,=Uc_set_user_time + 0x3 ; Uc_set_user_time+3
 0000002A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+3
 0000002C  3A30      SUB         R2,#0x30
 0000002E  4342      MUL         R2,R0
 00000030  0612      LSL         R2,R2,#0x18
 00000032  0E12      LSR         R2,R2,#0x18
  316:     uc_user_min += (Uc_set_user_time[4] - 0x30);
 00000034  4800      LDR         R3,=Uc_set_user_time + 0x4 ; Uc_set_user_time+4
 00000036  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+4
 00000038  3B30      SUB         R3,#0x30
 0000003A  061B      LSL         R3,R3,#0x18
 0000003C  0E1B      LSR         R3,R3,#0x18
 0000003E  18D2      ADD         R2,R3 ; uc_user_min
 00000040  0612      LSL         R2,R2,#0x18
 00000042  0E12      LSR         R2,R2,#0x18
  317:     uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
 00000044  4800      LDR         R3,=Uc_set_user_time + 0x6 ; Uc_set_user_time+6
 00000046  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+6
 00000048  3B30      SUB         R3,#0x30
 0000004A  4343      MUL         R3,R0
 0000004C  061B      LSL         R3,R3,#0x18
 0000004E  0E1B      LSR         R3,R3,#0x18
  318:     uc_user_sec += (Uc_set_user_time[7] - 0x30);
 00000050  4800      LDR         R0,=Uc_set_user_time + 0x7 ; Uc_set_user_time+7
 00000052  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time+7
 00000054  3830      SUB         R0,#0x30
 00000056  0600      LSL         R0,R0,#0x18
 00000058  0E00      LSR         R0,R0,#0x18
 0000005A  181B      ADD         R3,R0 ; uc_user_sec
 0000005C  061B      LSL         R3,R3,#0x18
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 21  

 0000005E  0E1B      LSR         R3,R3,#0x18
  320:     Uc_user_dwn_hr  = uc_user_hr;
 00000060  1C0C      MOV         R4,R1 ; uc_user_hr
 00000062  4800      LDR         R0,=Uc_user_dwn_hr ; Uc_user_dwn_hr
 00000064  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_hr
  321:     Uc_user_dwn_min = uc_user_min;
 00000066  1C14      MOV         R4,R2 ; uc_user_min
 00000068  4800      LDR         R0,=Uc_user_dwn_min ; Uc_user_dwn_min
 0000006A  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_min
  322:     Uc_user_dwn_sec = uc_user_sec;
 0000006C  1C1C      MOV         R4,R3 ; uc_user_sec
 0000006E  4800      LDR         R0,=Uc_user_dwn_sec ; Uc_user_dwn_sec
 00000070  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_sec
  324:     set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
 00000072  1C08      MOV         R0,R1 ; uc_user_hr
 00000074  0600      LSL         R0,R0,#0x18 ; uc_user_hr
 00000076  0E00      LSR         R0,R0,#0x18
 00000078  1C11      MOV         R1,R2 ; uc_user_min
 0000007A  0609      LSL         R1,R1,#0x18 ; uc_user_min
 0000007C  0E09      LSR         R1,R1,#0x18
 0000007E  1C1A      MOV         R2,R3 ; uc_user_sec
 00000080  0612      LSL         R2,R2,#0x18 ; uc_user_sec
 00000082  0E12      LSR         R2,R2,#0x18
 00000084  F7FF      BL          set_alarm?T  ; T=0x0001  (1)
 00000086  FFBC      BL          set_alarm?T  ; T=0x0001  (2)
 00000088            ; SCOPE-END
  325: }
 00000088  BC10      POP         {R4}
 0000008A  BC08      POP         {R3}
 0000008C  4718      BX          R3
 0000008E          ENDP ; 'user_time_conv?T'


*** CODE SEGMENT '?PR?user_temp_conv?T?app':
  335:     Ui_temp_set_val   =  0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000004  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  336:     Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
 00000006  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000008  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp
 0000000A  1C01      MOV         R1,R0
 0000000C  3930      SUB         R1,#0x30
 0000000E  48FA      LDR         R0,=0x3E8
 00000010  4341      MUL         R1,R0
 00000012  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000014  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  337:     Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
 00000016  4800      LDR         R0,=Uc_set_temp + 0x1 ; Uc_set_temp+1
 00000018  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+1
 0000001A  1C02      MOV         R2,R0
 0000001C  3A30      SUB         R2,#0x30
 0000001E  2064      MOV         R0,#0x64
 00000020  4342      MUL         R2,R0
 00000022  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000024  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 00000026  1889      ADD         R1,R2
 00000028  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  338:     Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
 0000002A  4800      LDR         R0,=Uc_set_temp + 0x2 ; Uc_set_temp+2
 0000002C  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+2
 0000002E  1C02      MOV         R2,R0
 00000030  3A30      SUB         R2,#0x30
 00000032  200A      MOV         R0,#0xA
 00000034  4342      MUL         R2,R0
 00000036  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000038  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000003A  1889      ADD         R1,R2
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 22  

 0000003C  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  340: }
 0000003E  4770      BX          R14
 00000040          ENDP ; 'user_temp_conv?T'


*** CODE SEGMENT '?PR?temp_ctrl?T?app':
  349:     if(Uc_temp_high == 1)
 00000000  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000002  7800      LDRB        R0,[R0,#0x0] ; Uc_temp_high
 00000004  2801      CMP         R0,#0x1
 00000006  D109      BNE         L_56  ; T=0x0000001C
  351:         IO0SET = COOLER_ON; 
 00000008  4800      LDR         R1,=0x80000
 0000000A  4800      LDR         R0,=0xE0028004
 0000000C  6001      STR         R1,[R0,#0x0]
  352:         IO0SET = HEATER_ON;
 0000000E  4800      LDR         R1,=0x100000
 00000010  4800      LDR         R0,=0xE0028004
 00000012  6001      STR         R1,[R0,#0x0]
  353:         IO0CLR = SSR_ON;
 00000014  4800      LDR         R1,=0x200000
 00000016  4800      LDR         R0,=0xE002800C
 00000018  6001      STR         R1,[R0,#0x0]
  354:      }
 0000001A  E008      B           L_57  ; T=0x0000002E
 0000001C          L_56:
  357:         IO0CLR = HEATER_ON; 
 0000001C  4800      LDR         R1,=0x100000
 0000001E  4800      LDR         R0,=0xE002800C
 00000020  6001      STR         R1,[R0,#0x0]
  358:         IO0CLR = COOLER_ON;
 00000022  4800      LDR         R1,=0x80000
 00000024  4800      LDR         R0,=0xE002800C
 00000026  6001      STR         R1,[R0,#0x0]
  359:         IO0SET = SSR_ON;
 00000028  4800      LDR         R1,=0x200000
 0000002A  4800      LDR         R0,=0xE0028004
 0000002C  6001      STR         R1,[R0,#0x0]
  360:      }
 0000002E          L_57:
  361: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'temp_ctrl?T'


*** CODE SEGMENT '?PR?adc_val_conv?T?app':
  367: void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  ---- Variable 'sample4' assigned to Register 'R3' ----
 00000002  ---- Variable 'sample3' assigned to Register 'R2' ----
 00000002  1C0E      MOV         R6,R1 ; sample2
 00000004  ---- Variable 'sample2' assigned to Register 'R6' ----
 00000004  1C05      MOV         R5,R0 ; sample1
 00000006  ---- Variable 'sample1' assigned to Register 'R5' ----
  368: {
 00000006            ; SCOPE-START
  369:  U8 a = 0;
 00000006  2400      MOV         R4,#0x0
 00000008  ---- Variable 'a' assigned to Register 'R4' ----
  375:  adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
 00000008  1C31      MOV         R1,R6 ; sample2
 0000000A  1C28      MOV         R0,R5 ; sample1
 0000000C  1840      ADD         R0,R1 ; sample1
 0000000E  1C11      MOV         R1,R2 ; sample3
 00000010  1840      ADD         R0,R1 ; sample3
 00000012  1C19      MOV         R1,R3 ; sample4
 00000014  1840      ADD         R0,R1 ; sample4
 00000016  9900      LDR         R1,[R13,#0x0] ; sample5
 00000018  1840      ADD         R0,R1
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 23  

 0000001A  2105      MOV         R1,#0x5
 0000001C  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000001E  FFF0      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000020  1C08      MOV         R0,R1
 00000022  1C05      MOV         R5,R0 ; adc_val
 00000024  ---- Variable 'adc_val' assigned to Register 'R5' ----
  376:  if(condition == 1)
 00000024  A801      ADD         R0,R13,#0x4
 00000026  7800      LDRB        R0,[R0,#0x0] ; condition
 00000028  2801      CMP         R0,#0x1
 0000002A  D10B      BNE         L_58  ; T=0x00000044
  378:      if(adc_val < 4)
 0000002C  1C28      MOV         R0,R5 ; adc_val
 0000002E  2804      CMP         R0,#0x4 ; adc_val
 00000030  D204      BCS         L_59  ; T=0x0000003C
  380:          lcd_line3_disp("Sensor Open", 9);
 00000032  4800      LDR         R0,=??S_15 ; ??S_15
 00000034  2109      MOV         R1,#0x9
 00000036  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000038  FFE3      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  381:      }
 0000003A  E003      B           L_58  ; T=0x00000044
 0000003C          L_59:
  384:          lcd_line3_disp("           ", 9);
 0000003C  4800      LDR         R0,=??S_16 ; ??S_16
 0000003E  2109      MOV         R1,#0x9
 00000040  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000042  FFDE      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  386:  }
 00000044          L_58:
  390:  adc_val *= 3300;   
 00000044  4800      LDR         R0,=0xCE4
 00000046  4345      MUL         R5,R0
  391:  adc_val >>= 10;
 00000048  0AAD      LSR         R5,R5,#0xA ; adc_val
  394:  if(condition == 0)
 0000004A  A801      ADD         R0,R13,#0x4
 0000004C  7800      LDRB        R0,[R0,#0x0] ; condition
 0000004E  2800      CMP         R0,#0x0
 00000050  D101      BNE         L_61  ; T=0x00000056
  396:       adc_val *= 2;
 00000052  2102      MOV         R1,#0x2
 00000054  434D      MUL         R5,R1
  398:  }
 00000056          L_61:
  400:  if(condition == 1)
 00000056  2801      CMP         R0,#0x1
 00000058  D103      BNE         L_62  ; T=0x00000062
  402:      if(adc_val > 10)
 0000005A  1C29      MOV         R1,R5 ; adc_val
 0000005C  290A      CMP         R1,#0xA ; adc_val
 0000005E  D900      BLS         L_62  ; T=0x00000062
  404:          adc_val -= 10;
 00000060  3D0A      SUB         R5,#0xA
  406:  }
 00000062          L_62:
  408:  adc_temp = adc_val;
 00000062  1C2A      MOV         R2,R5 ; adc_val
 00000064  ---- Variable 'adc_temp' assigned to Register 'R2' ----
  412: if(condition == 1)
 00000064  2801      CMP         R0,#0x1
 00000066  D10B      BNE         L_64  ; T=0x00000080
  414:  if( adc_val  > Ui_temp_set_val)
 00000068  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 0000006A  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000006C  1C28      MOV         R0,R5 ; adc_val
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 24  

 0000006E  4288      CMP         R0,R1 ; adc_val
 00000070  D903      BLS         L_65  ; T=0x0000007A
  416:            Uc_temp_high = 1;
 00000072  2101      MOV         R1,#0x1
 00000074  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000076  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  417:    }
 00000078  E002      B           L_64  ; T=0x00000080
 0000007A          L_65:
  420:            Uc_temp_high = 0;
 0000007A  2100      MOV         R1,#0x0
 0000007C  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 0000007E  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  423: }
 00000080          L_64:
  427:  Uc_dec_arr[a]  = adc_temp/10000;   
 00000080  1C10      MOV         R0,R2 ; adc_temp
 00000082  4800      LDR         R3,=0x2710
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000088  FFBB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000008A  1C08      MOV         R0,R1
 0000008C  0600      LSL         R0,R0,#0x18
 0000008E  0E00      LSR         R0,R0,#0x18
 00000090  1C21      MOV         R1,R4 ; a
 00000092  060D      LSL         R5,R1,#0x18 ; a
 00000094  0E2D      LSR         R5,R5,#0x18
 00000096  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000098  5548      STRB        R0,[R1,R5]
  428:  Uc_dec_arr[a] += 0x30;
 0000009A  1C20      MOV         R0,R4 ; a
 0000009C  0601      LSL         R1,R0,#0x18 ; a
 0000009E  0E09      LSR         R1,R1,#0x18
 000000A0  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000A2  1840      ADD         R0,R1 ; Uc_dec_arr
 000000A4  7801      LDRB        R1,[R0,#0x0]
 000000A6  3130      ADD         R1,#0x30
 000000A8  7001      STRB        R1,[R0,#0x0]
  429:  adc_temp       = adc_temp%10000;
 000000AA  1C10      MOV         R0,R2 ; adc_temp
 000000AC  1C19      MOV         R1,R3
 000000AE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000B0  FFA7      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000B2  1C01      MOV         R1,R0
 000000B4  1C0A      MOV         R2,R1 ; adc_temp
  430:  a++;
 000000B6  3401      ADD         R4,#0x1
 000000B8  0624      LSL         R4,R4,#0x18
 000000BA  0E24      LSR         R4,R4,#0x18
  432:  Uc_dec_arr[a]  = adc_temp/1000;    
 000000BC  1C10      MOV         R0,R2 ; adc_temp
 000000BE  4BFA      LDR         R3,=0x3E8
 000000C0  1C19      MOV         R1,R3
 000000C2  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000C4  FF9D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000C6  1C08      MOV         R0,R1
 000000C8  0600      LSL         R0,R0,#0x18
 000000CA  0E00      LSR         R0,R0,#0x18
 000000CC  1C21      MOV         R1,R4 ; a
 000000CE  060D      LSL         R5,R1,#0x18 ; a
 000000D0  0E2D      LSR         R5,R5,#0x18
 000000D2  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 000000D4  5548      STRB        R0,[R1,R5]
  433:  Uc_dec_arr[a] += 0x30;
 000000D6  1C20      MOV         R0,R4 ; a
 000000D8  0601      LSL         R1,R0,#0x18 ; a
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 25  

 000000DA  0E09      LSR         R1,R1,#0x18
 000000DC  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000DE  1840      ADD         R0,R1 ; Uc_dec_arr
 000000E0  7801      LDRB        R1,[R0,#0x0]
 000000E2  3130      ADD         R1,#0x30
 000000E4  7001      STRB        R1,[R0,#0x0]
  434:  adc_temp       = adc_temp%1000;
 000000E6  1C10      MOV         R0,R2 ; adc_temp
 000000E8  1C19      MOV         R1,R3
 000000EA  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000EC  FF89      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000EE  1C01      MOV         R1,R0
 000000F0  1C0A      MOV         R2,R1 ; adc_temp
  435:  a++;
 000000F2  3401      ADD         R4,#0x1
 000000F4  0624      LSL         R4,R4,#0x18
 000000F6  0E24      LSR         R4,R4,#0x18
  437:  Uc_dec_arr[a]  = adc_temp/100;
 000000F8  1C10      MOV         R0,R2 ; adc_temp
 000000FA  2364      MOV         R3,#0x64
 000000FC  1C19      MOV         R1,R3
 000000FE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000100  FF7F      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000102  1C08      MOV         R0,R1
 00000104  0600      LSL         R0,R0,#0x18
 00000106  0E00      LSR         R0,R0,#0x18
 00000108  1C21      MOV         R1,R4 ; a
 0000010A  060D      LSL         R5,R1,#0x18 ; a
 0000010C  0E2D      LSR         R5,R5,#0x18
 0000010E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000110  5548      STRB        R0,[R1,R5]
  438:  Uc_dec_arr[a] += 0x30;
 00000112  1C20      MOV         R0,R4 ; a
 00000114  0601      LSL         R1,R0,#0x18 ; a
 00000116  0E09      LSR         R1,R1,#0x18
 00000118  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 0000011A  1840      ADD         R0,R1 ; Uc_dec_arr
 0000011C  7801      LDRB        R1,[R0,#0x0]
 0000011E  3130      ADD         R1,#0x30
 00000120  7001      STRB        R1,[R0,#0x0]
  439:  adc_temp       = adc_temp%100;
 00000122  1C10      MOV         R0,R2 ; adc_temp
 00000124  1C19      MOV         R1,R3
 00000126  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000128  FF6B      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000012A  1C01      MOV         R1,R0
 0000012C  1C0A      MOV         R2,R1 ; adc_temp
  440:  a++;
 0000012E  3401      ADD         R4,#0x1
 00000130  0624      LSL         R4,R4,#0x18
 00000132  0E24      LSR         R4,R4,#0x18
  442:  Uc_dec_arr[a]  = adc_temp/10;
 00000134  1C10      MOV         R0,R2 ; adc_temp
 00000136  230A      MOV         R3,#0xA
 00000138  1C19      MOV         R1,R3
 0000013A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000013C  FF61      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000013E  1C08      MOV         R0,R1
 00000140  0600      LSL         R0,R0,#0x18
 00000142  0E00      LSR         R0,R0,#0x18
 00000144  1C21      MOV         R1,R4 ; a
 00000146  060D      LSL         R5,R1,#0x18 ; a
 00000148  0E2D      LSR         R5,R5,#0x18
 0000014A  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 0000014C  5548      STRB        R0,[R1,R5]
  443:  Uc_dec_arr[a] += 0x30;
ARM COMPILER V2.50a,  app                                                                  10/09/12  13:03:34  PAGE 26  

 0000014E  1C20      MOV         R0,R4 ; a
 00000150  0601      LSL         R1,R0,#0x18 ; a
 00000152  0E09      LSR         R1,R1,#0x18
 00000154  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000156  1840      ADD         R0,R1 ; Uc_dec_arr
 00000158  7801      LDRB        R1,[R0,#0x0]
 0000015A  3130      ADD         R1,#0x30
 0000015C  7001      STRB        R1,[R0,#0x0]
  444:  adc_temp       = adc_temp%10;
 0000015E  1C10      MOV         R0,R2 ; adc_temp
 00000160  1C19      MOV         R1,R3
 00000162  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000164  FF4D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000166  1C01      MOV         R1,R0
 00000168  1C0A      MOV         R2,R1 ; adc_temp
  445:  a++;
 0000016A  3401      ADD         R4,#0x1
 0000016C  0624      LSL         R4,R4,#0x18
 0000016E  0E24      LSR         R4,R4,#0x18
  446:  Uc_dec_arr[a]  = adc_temp + 0x30;
 00000170  1C10      MOV         R0,R2 ; adc_temp
 00000172  3030      ADD         R0,#0x30
 00000174  0600      LSL         R0,R0,#0x18
 00000176  0E00      LSR         R0,R0,#0x18
 00000178  1C21      MOV         R1,R4 ; a
 0000017A  060A      LSL         R2,R1,#0x18 ; a
 0000017C  0E12      LSR         R2,R2,#0x18
 0000017E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000180  5488      STRB        R0,[R1,R2]
 00000182            ; SCOPE-END
  448: }
 00000182  BC70      POP         {R4-R6}
 00000184  BC08      POP         {R3}
 00000186  4718      BX          R3
 00000188          ENDP ; 'adc_val_conv?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =       695
  const size           =       122
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
