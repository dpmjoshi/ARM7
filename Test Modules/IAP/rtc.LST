ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE rtc
OBJECT MODULE PLACED IN rtc.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe rtc.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include"includes.h"
    2          
    3          void rtc_init();
    4          void rtc_init_interrupt();
    5          void rtc_ISR()__irq;
    6          void rtc_get_time();
    7          
    8          
    9          U8  Uc_real_time[9]  = {"00:00:00"};
   10          U8  Uc_date[11]      = {"00/00/0000"};
   11          U16 Uc_time_sec;
   12          U8  Uc_alrm = 0;
   13          
   14          void rtc_init()
   15          {
   16   1          SEC     = 0;
   17   1          MIN     = 02;
   18   1          HOUR    = 11;
   19   1      
   20   1          DOM     = 28;
   21   1          MONTH   = 02;
   22   1          YEAR    = 2012;
   23   1      
   24   1          CCR     = 0x11;
   25   1      }
   26          
   27          
   28          void rtc_init_interrupt()
   29          {
   30   1          VICVectAddr0 = (U32)&rtc_ISR;
   31   1          VICVectCntl0 = 0x20 | 13;
   32   1          VICIntEnable = 1 << 13;
   33   1      
   34   1      /*  
   35   1          SEC     = 0;
   36   1          MIN     = 53;
   37   1          HOUR    = 15;
   38   1      
   39   1          DOM     = 2;
   40   1          MONTH   = 03;
   41   1          YEAR    = 2012;
   42   1      */  
   43   1          AMR     = 0xF8;
   44   1          CIIR    = 0x01;
   45   1          CCR     = 0x11;
   46   1      }
   47          
   48          //*******************************************************//
   49          //*******************************************************//
   50          
   51          void rtc_ISR()__irq
   52          {
   53   1          if(ILR & 0x01)
   54   1           {
   55   2              //Uc_time_sec++;
   56   2              Uc_fre = 1;
   57   2              //T0TC   = 0;
   58   2              ILR = 1;
   59   2          
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 2   

   60   2           }
   61   1          if(ILR & 0x02)
   62   1           {
   63   2              Uc_alrm = 1;
   64   2              ILR = 2;
   65   2          
   66   2           }
   67   1      
   68   1          VICVectAddr   = 0x00;
   69   1      }
   70          //*******************************************************//
   71          //*******************************************************//
   72          void set_alarm(U8 alarm_hr, U8 alarm_min, U8 alarm_sec)
   73          {
   74   1          alarm_sec = alarm_sec + SEC;
   75   1          if(alarm_sec > 59)
   76   1          {
   77   2              ALSEC      = alarm_sec - 59;
   78   2              alarm_min += 1;
   79   2          }
   80   1          else
   81   1          {
   82   2              ALSEC = alarm_sec;
   83   2          }
   84   1      
   85   1          alarm_min = alarm_min + MIN;
   86   1          if(alarm_min > 59)
   87   1          {
   88   2              ALMIN      = alarm_min - 59;
   89   2              alarm_hr  += 1;
   90   2          }
   91   1          else
   92   1          {
   93   2              ALMIN      = alarm_min;
   94   2          }
   95   1      
   96   1          alarm_hr = alarm_hr + HOUR;
   97   1          if(alarm_hr > 23)
   98   1          {
   99   2              ALHOUR      = alarm_hr - 23;
  100   2          }
  101   1          else
  102   1          {
  103   2              ALHOUR      = alarm_hr;
  104   2          }
  105   1      }
  106          
  107          
  108          //**********************************************************//
  109          
  110          void rtc_get_time()
  111          {
  112   1          U16 us_temp_y, us_temp_yr;
  113   1          U8 uc_temp;
  114   1      
  115   1          us_temp_y  = YEAR;
  116   1          us_temp_y  = us_temp_y / 1000;
  117   1          Uc_date[6] = us_temp_y + 0x30;
  118   1          us_temp_y  = YEAR;
  119   1          
  120   1          us_temp_y  = us_temp_y % 1000;
  121   1          us_temp_yr = us_temp_y;
  122   1      
  123   1          us_temp_y  = us_temp_y / 100;
  124   1          Uc_date[7] = us_temp_y + 0x30;
  125   1      
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 3   

  126   1          us_temp_y  = us_temp_yr;
  127   1          us_temp_y  = us_temp_y % 100;
  128   1          us_temp_yr = us_temp_y;
  129   1                  
  130   1          us_temp_y  = us_temp_y / 10;
  131   1          Uc_date[8] = us_temp_y + 0x30;
  132   1      
  133   1          us_temp_y  = us_temp_yr;
  134   1          us_temp_y  = us_temp_y % 10;
  135   1          Uc_date[9] = us_temp_y + 0x30;
  136   1      
  137   1      
  138   1          uc_temp    = MONTH;
  139   1          uc_temp    = uc_temp / 10;
  140   1          Uc_date[3] = uc_temp + 0x30;
  141   1      
  142   1          uc_temp    = MONTH;
  143   1          uc_temp    = uc_temp % 10;      
  144   1          Uc_date[4] = uc_temp + 0x30;
  145   1      
  146   1      
  147   1          uc_temp    = DOM;
  148   1          uc_temp    = uc_temp / 10;
  149   1          Uc_date[0] = uc_temp + 0x30;
  150   1      
  151   1          uc_temp    = DOM;
  152   1          uc_temp    = uc_temp % 10;      
  153   1          Uc_date[1] = uc_temp + 0x30;
  154   1      //********************************************************************************************
  155   1          
  156   1          uc_temp    = SEC;
  157   1          uc_temp    = uc_temp / 10;
  158   1          Uc_real_time[6] = uc_temp + 0x30;
  159   1      
  160   1          uc_temp    = SEC;
  161   1          uc_temp    = uc_temp % 10;      
  162   1          Uc_real_time[7] = uc_temp + 0x30;
  163   1      
  164   1      
  165   1          uc_temp    = MIN;
  166   1          uc_temp    = uc_temp / 10;
  167   1          Uc_real_time[3] = uc_temp + 0x30;
  168   1      
  169   1          uc_temp    = MIN;
  170   1          uc_temp    = uc_temp % 10;      
  171   1          Uc_real_time[4] = uc_temp +0x30;
  172   1      
  173   1      
  174   1          uc_temp    = HOUR;
  175   1          uc_temp    = uc_temp / 10;
  176   1          Uc_real_time[0] = uc_temp +0x30;
  177   1      
  178   1          uc_temp    = HOUR;
  179   1          uc_temp    = uc_temp % 10;      
  180   1          Uc_real_time[1] = uc_temp +0x30;
  181   1      
  182   1      
  183   1      }
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN DATA (Uc_fre)
 EXTERN CODE16 (?C?SDIV?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         rtc_init?T
 PUBLIC         rtc_init_interrupt?T
 PUBLIC         rtc_get_time?T
 PUBLIC         set_alarm?T
 PUBLIC         rtc_ISR?A
 PUBLIC         Uc_real_time
 PUBLIC         Uc_date
 PUBLIC         Uc_time_sec
 PUBLIC         Uc_alrm



*** DATA SEGMENT '?DT0?rtc':
 00000000          Uc_time_sec:
 00000000            DS          2
 00000002          Uc_real_time:
 00000002           BEGIN_INIT
 00000002            DB          '00:00:00',0x00
 0000000B           END_INIT
 0000000B          Uc_date:
 0000000B           BEGIN_INIT
 0000000B            DB          '00/00/0000',0x00
 00000016           END_INIT
 00000016          Uc_alrm:
 00000016           BEGIN_INIT
 00000016  00        DB          0x0
 00000017           END_INIT



*** CODE SEGMENT '?PR?rtc_init?T?rtc':
   16:     SEC     = 0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=0xE0024020
 00000004  7001      STRB        R1,[R0,#0x0]
   17:     MIN     = 02;
 00000006  2102      MOV         R1,#0x2
 00000008  4800      LDR         R0,=0xE0024024
 0000000A  7001      STRB        R1,[R0,#0x0]
   18:     HOUR    = 11;
 0000000C  220B      MOV         R2,#0xB
 0000000E  4800      LDR         R0,=0xE0024028
 00000010  7002      STRB        R2,[R0,#0x0]
   20:     DOM        = 28;
 00000012  221C      MOV         R2,#0x1C
 00000014  4800      LDR         R0,=0xE002402C
 00000016  7002      STRB        R2,[R0,#0x0]
   21:     MONTH   = 02;
 00000018  4800      LDR         R0,=0xE0024038
 0000001A  7001      STRB        R1,[R0,#0x0]
   22:     YEAR    = 2012;
 0000001C  4800      LDRH        R1,=0x7DC
 0000001E  4800      LDR         R0,=0xE002403C
 00000020  8001      STRH        R1,[R0,#0x0]
   24:     CCR     = 0x11;
 00000022  2111      MOV         R1,#0x11
 00000024  4800      LDR         R0,=0xE0024008
 00000026  7001      STRB        R1,[R0,#0x0]
   25: }
 00000028  4770      BX          R14
 0000002A          ENDP ; 'rtc_init?T'

ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 5   


*** CODE SEGMENT '?PR?rtc_init_interrupt?T?rtc':
   30:        VICVectAddr0 = (U32)&rtc_ISR;
 00000000  4900      LDR         R1,=rtc_ISR?A ; rtc_ISR?A
 00000002  4800      LDR         R0,=0xFFFFF100
 00000004  6001      STR         R1,[R0,#0x0]
   31:       VICVectCntl0 = 0x20 | 13;
 00000006  212D      MOV         R1,#0x2D
 00000008  4800      LDR         R0,=0xFFFFF200
 0000000A  6001      STR         R1,[R0,#0x0]
   32:       VICIntEnable = 1 << 13;
 0000000C  4800      LDR         R1,=0x2000
 0000000E  4800      LDR         R0,=0xFFFFF010
 00000010  6001      STR         R1,[R0,#0x0]
   43:     AMR        = 0xF8;
 00000012  21F8      MOV         R1,#0xF8
 00000014  4800      LDR         R0,=0xE0024010
 00000016  7001      STRB        R1,[R0,#0x0]
   44:     CIIR    = 0x01;
 00000018  2101      MOV         R1,#0x1
 0000001A  4800      LDR         R0,=0xE002400C
 0000001C  7001      STRB        R1,[R0,#0x0]
   45:     CCR     = 0x11;
 0000001E  2111      MOV         R1,#0x11
 00000020  4800      LDR         R0,=0xE0024008
 00000022  7001      STRB        R1,[R0,#0x0]
   46: }
 00000024  4770      BX          R14
 00000026          ENDP ; 'rtc_init_interrupt?T'


*** CODE SEGMENT '?PR?rtc_ISR?A?rtc':
   51: void rtc_ISR()__irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   53:     if(ILR & 0x01)
 00000004  E5100000  LDR         R0,=0xE0024000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100001  TST         R0,#0x0001
 00000010  0A000004  BEQ         L_1  ; Targ=0x28
   56:         Uc_fre = 1;
 00000014  E3A01001  MOV         R1,#0x1
 00000018  E5100000  LDR         R0,=Uc_fre ; Uc_fre
 0000001C  E5C01000  STRB        R1,[R0,#0x0] ; Uc_fre
   58:         ILR = 1;
 00000020  E5100000  LDR         R0,=0xE0024000
 00000024  E5C01000  STRB        R1,[R0,#0x0]
   60:      }
 00000028          L_1:
   61:     if(ILR & 0x02)
 00000028  E5100000  LDR         R0,=0xE0024000
 0000002C  E5D00000  LDRB        R0,[R0,#0x0]
 00000030  E3100002  TST         R0,#0x0002
 00000034  0A000005  BEQ         L_2  ; Targ=0x50
   63:          Uc_alrm = 1;
 00000038  E3A01001  MOV         R1,#0x1
 0000003C  E5100000  LDR         R0,=Uc_alrm ; Uc_alrm
 00000040  E5C01000  STRB        R1,[R0,#0x0] ; Uc_alrm
   64:         ILR = 2;
 00000044  E3A01002  MOV         R1,#0x2
 00000048  E5100000  LDR         R0,=0xE0024000
 0000004C  E5C01000  STRB        R1,[R0,#0x0]
   66:      }
 00000050          L_2:
   68:     VICVectAddr   = 0x00;
 00000050  E3A01000  MOV         R1,#0x0
 00000054  E5100000  LDR         R0,=0xFFFFF030
 00000058  E5801000  STR         R1,[R0,#0x0]
   69: }
 0000005C  E8BD0003  LDMIA       R13!,{R0-R1}
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 6   

 00000060  E25EF004  SUBS        R15,R14,#0x0004
 00000064          ENDP ; 'rtc_ISR?A'


*** CODE SEGMENT '?PR?set_alarm?T?rtc':
   72: void set_alarm(U8 alarm_hr, U8 alarm_min, U8 alarm_sec)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'alarm_sec' assigned to Register 'R2' ----
 00000002  1C0C      MOV         R4,R1 ; alarm_min
 00000004  ---- Variable 'alarm_min' assigned to Register 'R4' ----
 00000004  1C03      MOV         R3,R0 ; alarm_hr
 00000006  ---- Variable 'alarm_hr' assigned to Register 'R3' ----
   74:     alarm_sec = alarm_sec + SEC;
 00000006  4800      LDR         R0,=0xE0024020
 00000008  7800      LDRB        R0,[R0,#0x0]
 0000000A  1C11      MOV         R1,R2 ; alarm_sec
 0000000C  060A      LSL         R2,R1,#0x18 ; alarm_sec
 0000000E  0E12      LSR         R2,R2,#0x18
 00000010  1812      ADD         R2,R0
 00000012  0612      LSL         R2,R2,#0x18
 00000014  0E12      LSR         R2,R2,#0x18
   75:     if(alarm_sec > 59)
 00000016  1C10      MOV         R0,R2 ; alarm_sec
 00000018  0600      LSL         R0,R0,#0x18 ; alarm_sec
 0000001A  0E00      LSR         R0,R0,#0x18
 0000001C  283B      CMP         R0,#0x3B
 0000001E  DD0B      BLE         L_3  ; T=0x00000038
   77:         ALSEC      = alarm_sec - 59;
 00000020  1C10      MOV         R0,R2 ; alarm_sec
 00000022  0601      LSL         R1,R0,#0x18 ; alarm_sec
 00000024  0E09      LSR         R1,R1,#0x18
 00000026  393B      SUB         R1,#0x3B
 00000028  0609      LSL         R1,R1,#0x18
 0000002A  0E09      LSR         R1,R1,#0x18
 0000002C  4800      LDR         R0,=0xE0024060
 0000002E  7001      STRB        R1,[R0,#0x0]
   78:         alarm_min += 1;
 00000030  3401      ADD         R4,#0x1
 00000032  0624      LSL         R4,R4,#0x18
 00000034  0E24      LSR         R4,R4,#0x18
   79:     }
 00000036  E002      B           L_4  ; T=0x0000003E
 00000038          L_3:
   82:         ALSEC = alarm_sec;
 00000038  1C11      MOV         R1,R2 ; alarm_sec
 0000003A  4800      LDR         R0,=0xE0024060
 0000003C  7001      STRB        R1,[R0,#0x0]
   83:     }
 0000003E          L_4:
   85:     alarm_min = alarm_min + MIN;
 0000003E  4800      LDR         R0,=0xE0024024
 00000040  7800      LDRB        R0,[R0,#0x0]
 00000042  1C21      MOV         R1,R4 ; alarm_min
 00000044  060C      LSL         R4,R1,#0x18 ; alarm_min
 00000046  0E24      LSR         R4,R4,#0x18
 00000048  1824      ADD         R4,R0
 0000004A  0624      LSL         R4,R4,#0x18
 0000004C  0E24      LSR         R4,R4,#0x18
   86:     if(alarm_min > 59)
 0000004E  1C20      MOV         R0,R4 ; alarm_min
 00000050  0600      LSL         R0,R0,#0x18 ; alarm_min
 00000052  0E00      LSR         R0,R0,#0x18
 00000054  283B      CMP         R0,#0x3B
 00000056  DD0B      BLE         L_5  ; T=0x00000070
   88:         ALMIN      = alarm_min - 59;
 00000058  1C20      MOV         R0,R4 ; alarm_min
 0000005A  0601      LSL         R1,R0,#0x18 ; alarm_min
 0000005C  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 7   

 0000005E  393B      SUB         R1,#0x3B
 00000060  0609      LSL         R1,R1,#0x18
 00000062  0E09      LSR         R1,R1,#0x18
 00000064  4800      LDR         R0,=0xE0024064
 00000066  7001      STRB        R1,[R0,#0x0]
   89:         alarm_hr  += 1;
 00000068  3301      ADD         R3,#0x1
 0000006A  061B      LSL         R3,R3,#0x18
 0000006C  0E1B      LSR         R3,R3,#0x18
   90:     }
 0000006E  E002      B           L_6  ; T=0x00000076
 00000070          L_5:
   93:         ALMIN      = alarm_min;
 00000070  1C21      MOV         R1,R4 ; alarm_min
 00000072  4800      LDR         R0,=0xE0024064
 00000074  7001      STRB        R1,[R0,#0x0]
   94:     }
 00000076          L_6:
   96:     alarm_hr = alarm_hr + HOUR;
 00000076  4800      LDR         R0,=0xE0024028
 00000078  7800      LDRB        R0,[R0,#0x0]
 0000007A  1C01      MOV         R1,R0
 0000007C  1C18      MOV         R0,R3 ; alarm_hr
 0000007E  0603      LSL         R3,R0,#0x18 ; alarm_hr
 00000080  0E1B      LSR         R3,R3,#0x18
 00000082  185B      ADD         R3,R1
 00000084  061B      LSL         R3,R3,#0x18
 00000086  0E1B      LSR         R3,R3,#0x18
   97:     if(alarm_hr > 23)
 00000088  1C18      MOV         R0,R3 ; alarm_hr
 0000008A  0600      LSL         R0,R0,#0x18 ; alarm_hr
 0000008C  0E00      LSR         R0,R0,#0x18
 0000008E  2817      CMP         R0,#0x17
 00000090  DD08      BLE         L_7  ; T=0x000000A4
   99:         ALHOUR      = alarm_hr - 23;
 00000092  1C18      MOV         R0,R3 ; alarm_hr
 00000094  0601      LSL         R1,R0,#0x18 ; alarm_hr
 00000096  0E09      LSR         R1,R1,#0x18
 00000098  3917      SUB         R1,#0x17
 0000009A  0609      LSL         R1,R1,#0x18
 0000009C  0E09      LSR         R1,R1,#0x18
 0000009E  4800      LDR         R0,=0xE0024068
 000000A0  7001      STRB        R1,[R0,#0x0]
  100:     }
 000000A2  E002      B           L_8  ; T=0x000000AA
 000000A4          L_7:
  103:         ALHOUR      = alarm_hr;
 000000A4  1C19      MOV         R1,R3 ; alarm_hr
 000000A6  4800      LDR         R0,=0xE0024068
 000000A8  7001      STRB        R1,[R0,#0x0]
  104:     }
 000000AA          L_8:
  105: }
 000000AA  BC10      POP         {R4}
 000000AC  4770      BX          R14
 000000AE          ENDP ; 'set_alarm?T'


*** CODE SEGMENT '?PR?rtc_get_time?T?rtc':
  110: void rtc_get_time()
 00000000  B510      PUSH        {R4,LR}
  111: {
 00000002            ; SCOPE-START
  115:       us_temp_y  = YEAR;
 00000002  4800      LDR         R0,=0xE002403C
 00000004  8802      LDRH        R2,[R0,#0x0]
 00000006  ---- Variable 'us_temp_y' assigned to Register 'R2' ----
  116:     us_temp_y  = us_temp_y / 1000;
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 8   

 00000006  1C10      MOV         R0,R2 ; us_temp_y
 00000008  0400      LSL         R0,R0,#0x10 ; us_temp_y
 0000000A  0C00      LSR         R0,R0,#0x10
 0000000C  4BFA      LDR         R3,=0x3E8
 0000000E  1C19      MOV         R1,R3
 00000010  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000012  FFF6      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000014  1C08      MOV         R0,R1
 00000016  0402      LSL         R2,R0,#0x10
 00000018  0C12      LSR         R2,R2,#0x10
  117:     Uc_date[6] = us_temp_y + 0x30;
 0000001A  1C10      MOV         R0,R2 ; us_temp_y
 0000001C  0401      LSL         R1,R0,#0x10 ; us_temp_y
 0000001E  0C09      LSR         R1,R1,#0x10
 00000020  3130      ADD         R1,#0x30
 00000022  0609      LSL         R1,R1,#0x18
 00000024  0E09      LSR         R1,R1,#0x18
 00000026  4800      LDR         R0,=Uc_date + 0x6 ; Uc_date+6
 00000028  7001      STRB        R1,[R0,#0x0] ; Uc_date+6
  118:     us_temp_y  = YEAR;
 0000002A  4800      LDR         R0,=0xE002403C
 0000002C  8802      LDRH        R2,[R0,#0x0]
  120:     us_temp_y  = us_temp_y % 1000;
 0000002E  1C10      MOV         R0,R2 ; us_temp_y
 00000030  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000032  0C00      LSR         R0,R0,#0x10
 00000034  1C19      MOV         R1,R3
 00000036  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000038  FFE3      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000003A  1C01      MOV         R1,R0
 0000003C  040A      LSL         R2,R1,#0x10
 0000003E  0C12      LSR         R2,R2,#0x10
  121:     us_temp_yr = us_temp_y;
 00000040  1C14      MOV         R4,R2 ; us_temp_y
 00000042  ---- Variable 'us_temp_yr' assigned to Register 'R4' ----
  123:     us_temp_y  = us_temp_y / 100;
 00000042  1C10      MOV         R0,R2 ; us_temp_y
 00000044  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000046  0C00      LSR         R0,R0,#0x10
 00000048  2364      MOV         R3,#0x64
 0000004A  1C19      MOV         R1,R3
 0000004C  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000004E  FFD8      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000050  1C08      MOV         R0,R1
 00000052  0402      LSL         R2,R0,#0x10
 00000054  0C12      LSR         R2,R2,#0x10
  124:     Uc_date[7] = us_temp_y + 0x30;
 00000056  1C10      MOV         R0,R2 ; us_temp_y
 00000058  0401      LSL         R1,R0,#0x10 ; us_temp_y
 0000005A  0C09      LSR         R1,R1,#0x10
 0000005C  3130      ADD         R1,#0x30
 0000005E  0609      LSL         R1,R1,#0x18
 00000060  0E09      LSR         R1,R1,#0x18
 00000062  4800      LDR         R0,=Uc_date + 0x7 ; Uc_date+7
 00000064  7001      STRB        R1,[R0,#0x0] ; Uc_date+7
  126:     us_temp_y  = us_temp_yr;
 00000066  1C22      MOV         R2,R4 ; us_temp_yr
  127:     us_temp_y  = us_temp_y % 100;
 00000068  1C10      MOV         R0,R2 ; us_temp_y
 0000006A  0400      LSL         R0,R0,#0x10 ; us_temp_y
 0000006C  0C00      LSR         R0,R0,#0x10
 0000006E  1C19      MOV         R1,R3
 00000070  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000072  FFC6      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000074  1C01      MOV         R1,R0
 00000076  040A      LSL         R2,R1,#0x10
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 9   

 00000078  0C12      LSR         R2,R2,#0x10
  128:     us_temp_yr = us_temp_y;
 0000007A  1C14      MOV         R4,R2 ; us_temp_y
  130:     us_temp_y  = us_temp_y / 10;
 0000007C  1C10      MOV         R0,R2 ; us_temp_y
 0000007E  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000080  0C00      LSR         R0,R0,#0x10
 00000082  230A      MOV         R3,#0xA
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000088  FFBB      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000008A  1C08      MOV         R0,R1
 0000008C  0402      LSL         R2,R0,#0x10
 0000008E  0C12      LSR         R2,R2,#0x10
  131:     Uc_date[8] = us_temp_y + 0x30;
 00000090  1C10      MOV         R0,R2 ; us_temp_y
 00000092  0401      LSL         R1,R0,#0x10 ; us_temp_y
 00000094  0C09      LSR         R1,R1,#0x10
 00000096  3130      ADD         R1,#0x30
 00000098  0609      LSL         R1,R1,#0x18
 0000009A  0E09      LSR         R1,R1,#0x18
 0000009C  4800      LDR         R0,=Uc_date + 0x8 ; Uc_date+8
 0000009E  7001      STRB        R1,[R0,#0x0] ; Uc_date+8
  133:     us_temp_y  = us_temp_yr;
 000000A0  1C22      MOV         R2,R4 ; us_temp_yr
  134:     us_temp_y  = us_temp_y % 10;
 000000A2  1C10      MOV         R0,R2 ; us_temp_y
 000000A4  0400      LSL         R0,R0,#0x10 ; us_temp_y
 000000A6  0C00      LSR         R0,R0,#0x10
 000000A8  1C19      MOV         R1,R3
 000000AA  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000AC  FFA9      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000AE  1C01      MOV         R1,R0
 000000B0  040A      LSL         R2,R1,#0x10
 000000B2  0C12      LSR         R2,R2,#0x10
  135:     Uc_date[9] = us_temp_y + 0x30;
 000000B4  1C10      MOV         R0,R2 ; us_temp_y
 000000B6  0401      LSL         R1,R0,#0x10 ; us_temp_y
 000000B8  0C09      LSR         R1,R1,#0x10
 000000BA  3130      ADD         R1,#0x30
 000000BC  0609      LSL         R1,R1,#0x18
 000000BE  0E09      LSR         R1,R1,#0x18
 000000C0  4800      LDR         R0,=Uc_date + 0x9 ; Uc_date+9
 000000C2  7001      STRB        R1,[R0,#0x0] ; Uc_date+9
  138:       uc_temp    = MONTH;
 000000C4  4800      LDR         R0,=0xE0024038
 000000C6  7802      LDRB        R2,[R0,#0x0]
 000000C8  ---- Variable 'uc_temp' assigned to Register 'R2' ----
  139:     uc_temp    = uc_temp / 10;
 000000C8  1C10      MOV         R0,R2 ; uc_temp
 000000CA  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000CC  0E00      LSR         R0,R0,#0x18
 000000CE  240A      MOV         R4,#0xA
 000000D0  1C21      MOV         R1,R4
 000000D2  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000D4  FF95      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000D6  1C08      MOV         R0,R1
 000000D8  0602      LSL         R2,R0,#0x18
 000000DA  0E12      LSR         R2,R2,#0x18
  140:     Uc_date[3] = uc_temp + 0x30;
 000000DC  1C10      MOV         R0,R2 ; uc_temp
 000000DE  0601      LSL         R1,R0,#0x18 ; uc_temp
 000000E0  0E09      LSR         R1,R1,#0x18
 000000E2  3130      ADD         R1,#0x30
 000000E4  0609      LSL         R1,R1,#0x18
 000000E6  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 10  

 000000E8  4800      LDR         R0,=Uc_date + 0x3 ; Uc_date+3
 000000EA  7001      STRB        R1,[R0,#0x0] ; Uc_date+3
  142:     uc_temp    = MONTH;
 000000EC  4800      LDR         R0,=0xE0024038
 000000EE  7802      LDRB        R2,[R0,#0x0]
  143:     uc_temp    = uc_temp % 10;      
 000000F0  1C10      MOV         R0,R2 ; uc_temp
 000000F2  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000F4  0E00      LSR         R0,R0,#0x18
 000000F6  1C19      MOV         R1,R3
 000000F8  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000FA  FF82      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000FC  1C01      MOV         R1,R0
 000000FE  060A      LSL         R2,R1,#0x18
 00000100  0E12      LSR         R2,R2,#0x18
  144:     Uc_date[4] = uc_temp + 0x30;
 00000102  1C10      MOV         R0,R2 ; uc_temp
 00000104  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000106  0E09      LSR         R1,R1,#0x18
 00000108  3130      ADD         R1,#0x30
 0000010A  0609      LSL         R1,R1,#0x18
 0000010C  0E09      LSR         R1,R1,#0x18
 0000010E  4800      LDR         R0,=Uc_date + 0x4 ; Uc_date+4
 00000110  7001      STRB        R1,[R0,#0x0] ; Uc_date+4
  147:      uc_temp    = DOM;
 00000112  4800      LDR         R0,=0xE002402C
 00000114  7802      LDRB        R2,[R0,#0x0]
  148:     uc_temp    = uc_temp / 10;
 00000116  1C10      MOV         R0,R2 ; uc_temp
 00000118  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000011A  0E00      LSR         R0,R0,#0x18
 0000011C  1C21      MOV         R1,R4
 0000011E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000120  FF6F      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000122  1C08      MOV         R0,R1
 00000124  0602      LSL         R2,R0,#0x18
 00000126  0E12      LSR         R2,R2,#0x18
  149:     Uc_date[0] = uc_temp + 0x30;
 00000128  1C10      MOV         R0,R2 ; uc_temp
 0000012A  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000012C  0E09      LSR         R1,R1,#0x18
 0000012E  3130      ADD         R1,#0x30
 00000130  0609      LSL         R1,R1,#0x18
 00000132  0E09      LSR         R1,R1,#0x18
 00000134  4800      LDR         R0,=Uc_date ; Uc_date
 00000136  7001      STRB        R1,[R0,#0x0] ; Uc_date
  151:     uc_temp    = DOM;
 00000138  4800      LDR         R0,=0xE002402C
 0000013A  7802      LDRB        R2,[R0,#0x0]
  152:     uc_temp    = uc_temp % 10;      
 0000013C  1C10      MOV         R0,R2 ; uc_temp
 0000013E  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000140  0E00      LSR         R0,R0,#0x18
 00000142  1C19      MOV         R1,R3
 00000144  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000146  FF5C      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000148  1C01      MOV         R1,R0
 0000014A  060A      LSL         R2,R1,#0x18
 0000014C  0E12      LSR         R2,R2,#0x18
  153:     Uc_date[1] = uc_temp + 0x30;
 0000014E  1C10      MOV         R0,R2 ; uc_temp
 00000150  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000152  0E09      LSR         R1,R1,#0x18
 00000154  3130      ADD         R1,#0x30
 00000156  0609      LSL         R1,R1,#0x18
 00000158  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 11  

 0000015A  4800      LDR         R0,=Uc_date + 0x1 ; Uc_date+1
 0000015C  7001      STRB        R1,[R0,#0x0] ; Uc_date+1
  156:     uc_temp    = SEC;
 0000015E  4800      LDR         R0,=0xE0024020
 00000160  7802      LDRB        R2,[R0,#0x0]
  157:     uc_temp    = uc_temp / 10;
 00000162  1C10      MOV         R0,R2 ; uc_temp
 00000164  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000166  0E00      LSR         R0,R0,#0x18
 00000168  1C21      MOV         R1,R4
 0000016A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000016C  FF49      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000016E  1C08      MOV         R0,R1
 00000170  0602      LSL         R2,R0,#0x18
 00000172  0E12      LSR         R2,R2,#0x18
  158:     Uc_real_time[6] = uc_temp + 0x30;
 00000174  1C10      MOV         R0,R2 ; uc_temp
 00000176  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000178  0E09      LSR         R1,R1,#0x18
 0000017A  3130      ADD         R1,#0x30
 0000017C  0609      LSL         R1,R1,#0x18
 0000017E  0E09      LSR         R1,R1,#0x18
 00000180  4800      LDR         R0,=Uc_real_time + 0x6 ; Uc_real_time+6
 00000182  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+6
  160:     uc_temp    = SEC;
 00000184  4800      LDR         R0,=0xE0024020
 00000186  7802      LDRB        R2,[R0,#0x0]
  161:     uc_temp    = uc_temp % 10;      
 00000188  1C10      MOV         R0,R2 ; uc_temp
 0000018A  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000018C  0E00      LSR         R0,R0,#0x18
 0000018E  1C19      MOV         R1,R3
 00000190  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000192  FF36      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000194  1C01      MOV         R1,R0
 00000196  060A      LSL         R2,R1,#0x18
 00000198  0E12      LSR         R2,R2,#0x18
  162:     Uc_real_time[7] = uc_temp + 0x30;
 0000019A  1C10      MOV         R0,R2 ; uc_temp
 0000019C  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000019E  0E09      LSR         R1,R1,#0x18
 000001A0  3130      ADD         R1,#0x30
 000001A2  0609      LSL         R1,R1,#0x18
 000001A4  0E09      LSR         R1,R1,#0x18
 000001A6  4800      LDR         R0,=Uc_real_time + 0x7 ; Uc_real_time+7
 000001A8  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+7
  165:     uc_temp    = MIN;
 000001AA  4800      LDR         R0,=0xE0024024
 000001AC  7802      LDRB        R2,[R0,#0x0]
  166:     uc_temp    = uc_temp / 10;
 000001AE  1C10      MOV         R0,R2 ; uc_temp
 000001B0  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001B2  0E00      LSR         R0,R0,#0x18
 000001B4  1C21      MOV         R1,R4
 000001B6  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000001B8  FF23      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000001BA  1C08      MOV         R0,R1
 000001BC  0602      LSL         R2,R0,#0x18
 000001BE  0E12      LSR         R2,R2,#0x18
  167:     Uc_real_time[3] = uc_temp + 0x30;
 000001C0  1C10      MOV         R0,R2 ; uc_temp
 000001C2  0601      LSL         R1,R0,#0x18 ; uc_temp
 000001C4  0E09      LSR         R1,R1,#0x18
 000001C6  3130      ADD         R1,#0x30
 000001C8  0609      LSL         R1,R1,#0x18
 000001CA  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 12  

 000001CC  4800      LDR         R0,=Uc_real_time + 0x3 ; Uc_real_time+3
 000001CE  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+3
  169:     uc_temp    = MIN;
 000001D0  4800      LDR         R0,=0xE0024024
 000001D2  7802      LDRB        R2,[R0,#0x0]
  170:     uc_temp    = uc_temp % 10;      
 000001D4  1C10      MOV         R0,R2 ; uc_temp
 000001D6  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001D8  0E00      LSR         R0,R0,#0x18
 000001DA  1C19      MOV         R1,R3
 000001DC  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000001DE  FF10      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000001E0  1C01      MOV         R1,R0
 000001E2  060A      LSL         R2,R1,#0x18
 000001E4  0E12      LSR         R2,R2,#0x18
  171:     Uc_real_time[4] = uc_temp +0x30;
 000001E6  1C10      MOV         R0,R2 ; uc_temp
 000001E8  0601      LSL         R1,R0,#0x18 ; uc_temp
 000001EA  0E09      LSR         R1,R1,#0x18
 000001EC  3130      ADD         R1,#0x30
 000001EE  0609      LSL         R1,R1,#0x18
 000001F0  0E09      LSR         R1,R1,#0x18
 000001F2  4800      LDR         R0,=Uc_real_time + 0x4 ; Uc_real_time+4
 000001F4  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+4
  174:     uc_temp    = HOUR;
 000001F6  4800      LDR         R0,=0xE0024028
 000001F8  7802      LDRB        R2,[R0,#0x0]
  175:     uc_temp    = uc_temp / 10;
 000001FA  1C10      MOV         R0,R2 ; uc_temp
 000001FC  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001FE  0E00      LSR         R0,R0,#0x18
 00000200  1C21      MOV         R1,R4
 00000202  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000204  FEFD      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000206  1C08      MOV         R0,R1
 00000208  0602      LSL         R2,R0,#0x18
 0000020A  0E12      LSR         R2,R2,#0x18
  176:     Uc_real_time[0] = uc_temp +0x30;
 0000020C  1C10      MOV         R0,R2 ; uc_temp
 0000020E  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000210  0E09      LSR         R1,R1,#0x18
 00000212  3130      ADD         R1,#0x30
 00000214  0609      LSL         R1,R1,#0x18
 00000216  0E09      LSR         R1,R1,#0x18
 00000218  4800      LDR         R0,=Uc_real_time ; Uc_real_time
 0000021A  7001      STRB        R1,[R0,#0x0] ; Uc_real_time
  178:     uc_temp    = HOUR;
 0000021C  4800      LDR         R0,=0xE0024028
 0000021E  7802      LDRB        R2,[R0,#0x0]
  179:     uc_temp    = uc_temp % 10;      
 00000220  1C10      MOV         R0,R2 ; uc_temp
 00000222  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000224  0E00      LSR         R0,R0,#0x18
 00000226  1C19      MOV         R1,R3
 00000228  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000022A  FEEA      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000022C  1C01      MOV         R1,R0
 0000022E  060A      LSL         R2,R1,#0x18
 00000230  0E12      LSR         R2,R2,#0x18
  180:     Uc_real_time[1] = uc_temp +0x30;
 00000232  1C10      MOV         R0,R2 ; uc_temp
 00000234  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000236  0E09      LSR         R1,R1,#0x18
 00000238  3130      ADD         R1,#0x30
 0000023A  0609      LSL         R1,R1,#0x18
 0000023C  0E09      LSR         R1,R1,#0x18
ARM COMPILER V2.50a,  rtc                                                                  05/11/12  14:28:51  PAGE 13  

 0000023E  4800      LDR         R0,=Uc_real_time + 0x1 ; Uc_real_time+1
 00000240  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+1
 00000242            ; SCOPE-END
  183: }
 00000242  BC10      POP         {R4}
 00000244  BC08      POP         {R3}
 00000246  4718      BX          R3
 00000248          ENDP ; 'rtc_get_time?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        23
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
