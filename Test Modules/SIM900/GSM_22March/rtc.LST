ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE rtc
OBJECT MODULE PLACED IN rtc.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe rtc.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          /*
    2           *File name: <rtc.c>
    3           *Description:
    4           *It contains a function for RTC initialization.
    5           *This RTC value is used as a time stamp in the system.
    6           */
    7          #include "includes.h"
    8          
    9          #define     CLK_EN                      0x11
   10          
   11          void rtc_init(void);
   12          void rtc_isr(void) __irq;
   13          void set_alarm(U8 , U8 , U8 );
   14          void disp_time(void);
   15          
   16          U8 Uc_time_sec = 0;
   17          U8 Uc_alarm = 0;
   18          U8 time[10] = "00:00:00";
   19          U8 date[12];
   20          
   21          /*
   22           *Function name:RTC_init
   23           *Description: 
   24           *This function is used to initialize the RTC module. 
   25           *The PREINT and PREFRAC registers are fed with the calculated value of the prescaler, that depends on th
             -e pclk (15 Mhz in our case).
   26           *The CCR  register is used to enable the clock. HOUR, MIN and SEC are the timer registers which a re all
             - initialized to zero.                           
   27           */
   28          void rtc_init(void)
   29          {
   30   1          YEAR  = 2013;
   31   1          DOM   = 25;
   32   1          MONTH = 4;      
   33   1      }
   34          
   35          
   36          void rtc_isr(void) __irq
   37          {
   38   1          if(ILR & 0x01)
   39   1          {
   40   2              Uc_time_sec = 1;
   41   2              ILR = 1;
   42   2          
   43   2          }
   44   1          if(ILR & 0x02)
   45   1          {
   46   2              Uc_alarm = 1;
   47   2              ILR = 2;
   48   2          
   49   2          }
   50   1          VICVectAddr   = 0x00;
   51   1      }
   52          
   53          
   54          /**********************************************************************************/
   55          /* Function Name: rtc_get_date()                                                  */
   56          /* Arguments    : U8 *date_arr                                                    */
   57          /*                                                                                */
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 2   

   58          /* Return Types : NONE                                                            */
   59          /* Description  :                                                                 */
   60          /**********************************************************************************/                          
   61          void rtc_get_date(U8 *date_arr)
   62          { 
   63   1          U8 uc_year[6];
   64   1          U8 uc_day[4];
   65   1          U8 uc_month[4];
   66   1          U8 seprator[2] = "/";
   67   1          U8 uc_temp;
   68   1          
   69   1          uc_temp = LIB_hex_dec(uc_day, DOM);         // this fuction copies the day, month and year into the date_arr
   70   1          LIB_str_copy(uc_day, date_arr, uc_temp);    // if month & date are single digits then only those digits wil
             -l be copied 
   71   1          date_arr += uc_temp;                        // there will be no trailling Zeros. like if date is 4th Nov then date will be
             - displayed as:
   72   1                                                      // 4/11/2013. for 23rd may : 23/5/2013  
   73   1          LIB_str_copy(seprator, date_arr, 1);        // adding date seperator 
   74   1          date_arr++;
   75   1      
   76   1      
   77   1          uc_temp = LIB_hex_dec(uc_month, MONTH);
   78   1          LIB_str_copy(uc_month, date_arr, uc_temp);
   79   1          date_arr += uc_temp;
   80   1      
   81   1          LIB_str_copy(seprator, date_arr, 1);    
   82   1          date_arr++;
   83   1      
   84   1          
   85   1          uc_temp = LIB_hex_dec(uc_year, YEAR);
   86   1          LIB_str_copy(uc_year, date_arr, uc_temp);
   87   1          date_arr += (uc_temp + 1);
   88   1      
   89   1          *date_arr = '\0';
   90   1      }
   91          
   92          /**********************************************************************************/
   93          /* Function Name: rtc_get_time()                                                  */
   94          /* Arguments    : U8 *date_arr                                                    */
   95          /*                                                                                */
   96          /* Return Types : NONE                                                            */
   97          /* Description  :                                                                 */
   98          /**********************************************************************************/                          
   99          
  100          
  101          void rtc_get_time(U8 *time_arr)
  102          {
  103   1          U8 uc_temp = 0;
  104   1          /*
  105   1          U8 seperator[2] = ":";
  106   1           
  107   1          uc_temp = LIB_hex_dec(time_arr, HOUR);
  108   1          time_arr += uc_temp;
  109   1          
  110   1          LIB_str_copy(seperator, time_arr, 1);
  111   1          time_arr++;
  112   1      
  113   1          uc_temp = LIB_hex_dec(time_arr, MIN);
  114   1          time_arr += uc_temp;
  115   1          
  116   1          LIB_str_copy(seperator, time_arr, 1);
  117   1          time_arr++;
  118   1      
  119   1          uc_temp = LIB_hex_dec(time_arr, SEC);
  120   1          time_arr += uc_temp;
  121   1          
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 3   

  122   1          *time_arr = '\0'; 
  123   1           */
  124   1          
  125   1          uc_temp    = SEC;
  126   1          uc_temp    = uc_temp / 10;
  127   1          time[6] = uc_temp + 0x30;
  128   1      
  129   1          uc_temp    = SEC;
  130   1          uc_temp    = uc_temp % 10;      
  131   1          time[7] = uc_temp + 0x30;
  132   1      
  133   1      
  134   1          uc_temp    = MIN;
  135   1          uc_temp    = uc_temp / 10;
  136   1          time[3] = uc_temp + 0x30;
  137   1      
  138   1          uc_temp    = MIN;
  139   1          uc_temp    = uc_temp % 10;      
  140   1          time[4] = uc_temp +0x30;
  141   1      
  142   1      
  143   1          uc_temp    = HOUR;
  144   1          uc_temp    = uc_temp / 10;
  145   1          time[0] = uc_temp +0x30;
  146   1      
  147   1          uc_temp    = HOUR;
  148   1          uc_temp    = uc_temp % 10;      
  149   1          time[1] = uc_temp +0x30;
  150   1      
  151   1      }
*** WARNING C47 IN LINE 101 OF RTC.C: 'time_arr': unreferenced parameter
  152          
  153          
  154          void set_alarm(U8 al_hr, U8 al_min, U8 al_sec)
  155          {
  156   1          U8 temp;
  157   1          AMR = 0XF8;
  158   1          temp = SEC + al_sec;
  159   1          if(temp <60)
  160   1          {
  161   2              ALSEC = temp;
  162   2              temp = 0;
  163   2          }
  164   1          else
  165   1          {
  166   2              ALSEC = temp - 60;
  167   2              temp = 1;
  168   2          }
  169   1          
  170   1          temp = temp + MIN + al_min;
  171   1          if(temp <60)
  172   1          {
  173   2              ALMIN = temp;
  174   2              temp = 0;
  175   2          }
  176   1          else
  177   1          {
  178   2              ALMIN = temp - 60;
  179   2              temp = 1;
  180   2          }
  181   1          
  182   1          temp = temp + HOUR + al_hr;
  183   1          if(temp <24)
  184   1          {
  185   2              ALHOUR = temp;
  186   2          }
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 4   

  187   1          else
  188   1          {
  189   2              ALHOUR = temp - 24;
  190   2          }
  191   1      }
  192          
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (LIB_hex_dec?T)
 EXTERN CODE16 (LIB_str_copy?T)
 EXTERN CODE16 (?C?UDIV?T)
 EXTERN CODE16 (?C?SDIV?T)



*** PUBLICS:
 PUBLIC         rtc_init?T
 PUBLIC         set_alarm?T
 PUBLIC         rtc_get_time?T
 PUBLIC         rtc_get_date?T
 PUBLIC         rtc_isr?A
 PUBLIC         Uc_time_sec
 PUBLIC         Uc_alarm
 PUBLIC         time
 PUBLIC         date



*** DATA SEGMENT '?DT0?rtc':
 00000000          Uc_time_sec:
 00000000           BEGIN_INIT
 00000000  00        DB          0x0
 00000001           END_INIT
 00000001          Uc_alarm:
 00000001           BEGIN_INIT
 00000001  00        DB          0x0
 00000002           END_INIT
 00000002          time:
 00000002           BEGIN_INIT
 00000002            DB          '00:00:00',0x00
 0000000B            SPACE       1
 0000000C           END_INIT
 0000000C          date:
 0000000C            DS          12

*** DATA SEGMENT '?CON?rtc':
 00000000          ?tpl?0001:
 00000000           BEGIN_INIT
 00000000            DB          '/',0x00
 00000002           END_INIT



*** CODE SEGMENT '?PR?rtc_init?T?rtc':
   30:     YEAR  = 2013;
 00000000  4800      LDRH        R1,=0x7DD
 00000002  4800      LDR         R0,=0xE002403C
 00000004  8001      STRH        R1,[R0,#0x0]
   31:     DOM   = 25;
 00000006  2119      MOV         R1,#0x19
 00000008  4800      LDR         R0,=0xE002402C
 0000000A  7001      STRB        R1,[R0,#0x0]
   32:     MONTH = 4;      
 0000000C  2104      MOV         R1,#0x4
 0000000E  4800      LDR         R0,=0xE0024038
 00000010  7001      STRB        R1,[R0,#0x0]
   33: }
 00000012  4770      BX          R14
 00000014          ENDP ; 'rtc_init?T'


*** CODE SEGMENT '?PR?rtc_isr?A?rtc':
   36: void rtc_isr(void) __irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   38:     if(ILR & 0x01)
 00000004  E5100000  LDR         R0,=0xE0024000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100001  TST         R0,#0x0001
 00000010  0A000004  BEQ         L_1  ; Targ=0x28
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 6   

   40:         Uc_time_sec = 1;
 00000014  E3A01001  MOV         R1,#0x1
 00000018  E5100000  LDR         R0,=Uc_time_sec ; Uc_time_sec
 0000001C  E5C01000  STRB        R1,[R0,#0x0] ; Uc_time_sec
   41:         ILR = 1;
 00000020  E5100000  LDR         R0,=0xE0024000
 00000024  E5C01000  STRB        R1,[R0,#0x0]
   43:     }
 00000028          L_1:
   44:     if(ILR & 0x02)
 00000028  E5100000  LDR         R0,=0xE0024000
 0000002C  E5D00000  LDRB        R0,[R0,#0x0]
 00000030  E3100002  TST         R0,#0x0002
 00000034  0A000005  BEQ         L_2  ; Targ=0x50
   46:          Uc_alarm = 1;
 00000038  E3A01001  MOV         R1,#0x1
 0000003C  E5100000  LDR         R0,=Uc_alarm ; Uc_alarm
 00000040  E5C01000  STRB        R1,[R0,#0x0] ; Uc_alarm
   47:         ILR = 2;
 00000044  E3A01002  MOV         R1,#0x2
 00000048  E5100000  LDR         R0,=0xE0024000
 0000004C  E5C01000  STRB        R1,[R0,#0x0]
   49:     }
 00000050          L_2:
   50:     VICVectAddr   = 0x00;
 00000050  E3A01000  MOV         R1,#0x0
 00000054  E5100000  LDR         R0,=0xFFFFF030
 00000058  E5801000  STR         R1,[R0,#0x0]
   51: }
 0000005C  E8BD0003  LDMIA       R13!,{R0-R1}
 00000060  E25EF004  SUBS        R15,R14,#0x0004
 00000064          ENDP ; 'rtc_isr?A'


*** CODE SEGMENT '?PR?rtc_get_date?T?rtc':
   61: void rtc_get_date(U8 *date_arr)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C04      MOV         R4,R0 ; date_arr
 00000004  ---- Variable 'date_arr' assigned to Register 'R4' ----
 00000004  B085      SUB         R13,#0x14
   62: { 
 00000006            ; SCOPE-START
   66:     U8 seprator[2] = "/";
 00000006  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000008  A804      ADD         R0,R13,#0x10
 0000000A  2202      MOV         R2,#0x2
 0000000C          L_10:
 0000000C  780B      LDRB        R3,[R1,#0x0]
 0000000E  7003      STRB        R3,[R0,#0x0]
 00000010  1C49      ADD         R1,R1,#0x1
 00000012  1C40      ADD         R0,R0,#0x1
 00000014  1E52      SUB         R2,R2,#0x1
 00000016  D1F9      BNE         L_10  ; T=0x0000000C
   69:     uc_temp = LIB_hex_dec(uc_day, DOM);         // this fuction copies the day, month and year into the date_arr
 00000018  4800      LDR         R0,=0xE002402C
 0000001A  7800      LDRB        R0,[R0,#0x0]
 0000001C  1C01      MOV         R1,R0
 0000001E  A802      ADD         R0,R13,#0x8
 00000020  F7FF      BL          LIB_hex_dec?T  ; T=0x0001  (1)
 00000022  FFEE      BL          LIB_hex_dec?T  ; T=0x0001  (2)
 00000024  0605      LSL         R5,R0,#0x18 ; LIB_hex_dec?T
 00000026  0E2D      LSR         R5,R5,#0x18
 00000028  ---- Variable 'uc_temp' assigned to Register 'R5' ----
   70:     LIB_str_copy(uc_day, date_arr, uc_temp);    // if month & date are single digits then only those digits will be cop
             -ied 
 00000028  1C28      MOV         R0,R5 ; uc_temp
 0000002A  0602      LSL         R2,R0,#0x18 ; uc_temp
 0000002C  0E12      LSR         R2,R2,#0x18
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 7   

 0000002E  A802      ADD         R0,R13,#0x8
 00000030  1C21      MOV         R1,R4 ; date_arr
 00000032  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000034  FFE5      BL          LIB_str_copy?T  ; T=0x0001  (2)
   71:     date_arr += uc_temp;                        // there will be no trailling Zeros. like if date is 4th Nov then date will be display
             -ed as:
 00000036  1C28      MOV         R0,R5 ; uc_temp
 00000038  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000003A  0E09      LSR         R1,R1,#0x18
 0000003C  1864      ADD         R4,R1 ; date_arr
   73:     LIB_str_copy(seprator, date_arr, 1);        // adding date seperator 
 0000003E  A804      ADD         R0,R13,#0x10
 00000040  1C21      MOV         R1,R4 ; date_arr
 00000042  2201      MOV         R2,#0x1
 00000044  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000046  FFDC      BL          LIB_str_copy?T  ; T=0x0001  (2)
   74:     date_arr++;
 00000048  3401      ADD         R4,#0x1
   77:     uc_temp = LIB_hex_dec(uc_month, MONTH);
 0000004A  4800      LDR         R0,=0xE0024038
 0000004C  7800      LDRB        R0,[R0,#0x0]
 0000004E  1C01      MOV         R1,R0
 00000050  A803      ADD         R0,R13,#0xC
 00000052  F7FF      BL          LIB_hex_dec?T  ; T=0x0001  (1)
 00000054  FFD5      BL          LIB_hex_dec?T  ; T=0x0001  (2)
 00000056  0605      LSL         R5,R0,#0x18 ; LIB_hex_dec?T
 00000058  0E2D      LSR         R5,R5,#0x18
   78:     LIB_str_copy(uc_month, date_arr, uc_temp);
 0000005A  1C28      MOV         R0,R5 ; uc_temp
 0000005C  0602      LSL         R2,R0,#0x18 ; uc_temp
 0000005E  0E12      LSR         R2,R2,#0x18
 00000060  A803      ADD         R0,R13,#0xC
 00000062  1C21      MOV         R1,R4 ; date_arr
 00000064  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000066  FFCC      BL          LIB_str_copy?T  ; T=0x0001  (2)
   79:     date_arr += uc_temp;
 00000068  1C28      MOV         R0,R5 ; uc_temp
 0000006A  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000006C  0E09      LSR         R1,R1,#0x18
 0000006E  1864      ADD         R4,R1 ; date_arr
   81:     LIB_str_copy(seprator, date_arr, 1);    
 00000070  A804      ADD         R0,R13,#0x10
 00000072  1C21      MOV         R1,R4 ; date_arr
 00000074  2201      MOV         R2,#0x1
 00000076  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000078  FFC3      BL          LIB_str_copy?T  ; T=0x0001  (2)
   82:     date_arr++;
 0000007A  3401      ADD         R4,#0x1
   85:     uc_temp = LIB_hex_dec(uc_year, YEAR);
 0000007C  4800      LDR         R0,=0xE002403C
 0000007E  8800      LDRH        R0,[R0,#0x0]
 00000080  1C01      MOV         R1,R0
 00000082  A800      ADD         R0,R13,#0x0
 00000084  F7FF      BL          LIB_hex_dec?T  ; T=0x0001  (1)
 00000086  FFBC      BL          LIB_hex_dec?T  ; T=0x0001  (2)
 00000088  0605      LSL         R5,R0,#0x18 ; LIB_hex_dec?T
 0000008A  0E2D      LSR         R5,R5,#0x18
   86:     LIB_str_copy(uc_year, date_arr, uc_temp);
 0000008C  1C28      MOV         R0,R5 ; uc_temp
 0000008E  0602      LSL         R2,R0,#0x18 ; uc_temp
 00000090  0E12      LSR         R2,R2,#0x18
 00000092  A800      ADD         R0,R13,#0x0
 00000094  1C21      MOV         R1,R4 ; date_arr
 00000096  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000098  FFB3      BL          LIB_str_copy?T  ; T=0x0001  (2)
   87:     date_arr += (uc_temp + 1);
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 8   

 0000009A  1C28      MOV         R0,R5 ; uc_temp
 0000009C  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000009E  0E09      LSR         R1,R1,#0x18
 000000A0  3101      ADD         R1,#0x1
 000000A2  1864      ADD         R4,R1 ; date_arr
   89:     *date_arr = '\0';
 000000A4  2100      MOV         R1,#0x0
 000000A6  1C20      MOV         R0,R4 ; date_arr
 000000A8  7001      STRB        R1,[R0,#0x0] ; date_arr
 000000AA            ; SCOPE-END
   90: }
 000000AA  B005      ADD         R13,#0x14
 000000AC  BC30      POP         {R4-R5}
 000000AE  BC08      POP         {R3}
 000000B0  4718      BX          R3
 000000B2          ENDP ; 'rtc_get_date?T'


*** CODE SEGMENT '?PR?rtc_get_time?T?rtc':
  101: void rtc_get_time(U8 *time_arr)
 00000000  B510      PUSH        {R4,LR}
  102: {
 00000002            ; SCOPE-START
  103:     U8 uc_temp = 0;
 00000002  2200      MOV         R2,#0x0
 00000004  ---- Variable 'uc_temp' assigned to Register 'R2' ----
  125:     uc_temp    = SEC;
 00000004  4800      LDR         R0,=0xE0024020
 00000006  7802      LDRB        R2,[R0,#0x0]
  126:     uc_temp    = uc_temp / 10;
 00000008  1C10      MOV         R0,R2 ; uc_temp
 0000000A  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000000C  0E00      LSR         R0,R0,#0x18
 0000000E  240A      MOV         R4,#0xA
 00000010  1C21      MOV         R1,R4
 00000012  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000014  FFF5      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000016  1C08      MOV         R0,R1
 00000018  0602      LSL         R2,R0,#0x18
 0000001A  0E12      LSR         R2,R2,#0x18
  127:     time[6] = uc_temp + 0x30;
 0000001C  1C10      MOV         R0,R2 ; uc_temp
 0000001E  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000020  0E09      LSR         R1,R1,#0x18
 00000022  3130      ADD         R1,#0x30
 00000024  0609      LSL         R1,R1,#0x18
 00000026  0E09      LSR         R1,R1,#0x18
 00000028  4800      LDR         R0,=time + 0x6 ; time+6
 0000002A  7001      STRB        R1,[R0,#0x0] ; time+6
  129:     uc_temp    = SEC;
 0000002C  4800      LDR         R0,=0xE0024020
 0000002E  7802      LDRB        R2,[R0,#0x0]
  130:     uc_temp    = uc_temp % 10;      
 00000030  1C10      MOV         R0,R2 ; uc_temp
 00000032  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000034  0E00      LSR         R0,R0,#0x18
 00000036  230A      MOV         R3,#0xA
 00000038  1C19      MOV         R1,R3
 0000003A  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000003C  FFE1      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000003E  1C01      MOV         R1,R0
 00000040  060A      LSL         R2,R1,#0x18
 00000042  0E12      LSR         R2,R2,#0x18
  131:     time[7] = uc_temp + 0x30;
 00000044  1C10      MOV         R0,R2 ; uc_temp
 00000046  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000048  0E09      LSR         R1,R1,#0x18
 0000004A  3130      ADD         R1,#0x30
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 9   

 0000004C  0609      LSL         R1,R1,#0x18
 0000004E  0E09      LSR         R1,R1,#0x18
 00000050  4800      LDR         R0,=time + 0x7 ; time+7
 00000052  7001      STRB        R1,[R0,#0x0] ; time+7
  134:     uc_temp    = MIN;
 00000054  4800      LDR         R0,=0xE0024024
 00000056  7802      LDRB        R2,[R0,#0x0]
  135:     uc_temp    = uc_temp / 10;
 00000058  1C10      MOV         R0,R2 ; uc_temp
 0000005A  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000005C  0E00      LSR         R0,R0,#0x18
 0000005E  1C21      MOV         R1,R4
 00000060  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000062  FFCE      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000064  1C08      MOV         R0,R1
 00000066  0602      LSL         R2,R0,#0x18
 00000068  0E12      LSR         R2,R2,#0x18
  136:     time[3] = uc_temp + 0x30;
 0000006A  1C10      MOV         R0,R2 ; uc_temp
 0000006C  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000006E  0E09      LSR         R1,R1,#0x18
 00000070  3130      ADD         R1,#0x30
 00000072  0609      LSL         R1,R1,#0x18
 00000074  0E09      LSR         R1,R1,#0x18
 00000076  4800      LDR         R0,=time + 0x3 ; time+3
 00000078  7001      STRB        R1,[R0,#0x0] ; time+3
  138:     uc_temp    = MIN;
 0000007A  4800      LDR         R0,=0xE0024024
 0000007C  7802      LDRB        R2,[R0,#0x0]
  139:     uc_temp    = uc_temp % 10;      
 0000007E  1C10      MOV         R0,R2 ; uc_temp
 00000080  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000082  0E00      LSR         R0,R0,#0x18
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000088  FFBB      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000008A  1C01      MOV         R1,R0
 0000008C  060A      LSL         R2,R1,#0x18
 0000008E  0E12      LSR         R2,R2,#0x18
  140:     time[4] = uc_temp +0x30;
 00000090  1C10      MOV         R0,R2 ; uc_temp
 00000092  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000094  0E09      LSR         R1,R1,#0x18
 00000096  3130      ADD         R1,#0x30
 00000098  0609      LSL         R1,R1,#0x18
 0000009A  0E09      LSR         R1,R1,#0x18
 0000009C  4800      LDR         R0,=time + 0x4 ; time+4
 0000009E  7001      STRB        R1,[R0,#0x0] ; time+4
  143:     uc_temp    = HOUR;
 000000A0  4800      LDR         R0,=0xE0024028
 000000A2  7802      LDRB        R2,[R0,#0x0]
  144:     uc_temp    = uc_temp / 10;
 000000A4  1C10      MOV         R0,R2 ; uc_temp
 000000A6  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000A8  0E00      LSR         R0,R0,#0x18
 000000AA  1C21      MOV         R1,R4
 000000AC  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000AE  FFA8      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000B0  1C08      MOV         R0,R1
 000000B2  0602      LSL         R2,R0,#0x18
 000000B4  0E12      LSR         R2,R2,#0x18
  145:     time[0] = uc_temp +0x30;
 000000B6  1C10      MOV         R0,R2 ; uc_temp
 000000B8  0601      LSL         R1,R0,#0x18 ; uc_temp
 000000BA  0E09      LSR         R1,R1,#0x18
 000000BC  3130      ADD         R1,#0x30
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 10  

 000000BE  0609      LSL         R1,R1,#0x18
 000000C0  0E09      LSR         R1,R1,#0x18
 000000C2  4800      LDR         R0,=time ; time
 000000C4  7001      STRB        R1,[R0,#0x0] ; time
  147:     uc_temp    = HOUR;
 000000C6  4800      LDR         R0,=0xE0024028
 000000C8  7802      LDRB        R2,[R0,#0x0]
  148:     uc_temp    = uc_temp % 10;      
 000000CA  1C10      MOV         R0,R2 ; uc_temp
 000000CC  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000CE  0E00      LSR         R0,R0,#0x18
 000000D0  1C19      MOV         R1,R3
 000000D2  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000D4  FF95      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000D6  1C01      MOV         R1,R0
 000000D8  060A      LSL         R2,R1,#0x18
 000000DA  0E12      LSR         R2,R2,#0x18
  149:     time[1] = uc_temp +0x30;
 000000DC  1C10      MOV         R0,R2 ; uc_temp
 000000DE  0601      LSL         R1,R0,#0x18 ; uc_temp
 000000E0  0E09      LSR         R1,R1,#0x18
 000000E2  3130      ADD         R1,#0x30
 000000E4  0609      LSL         R1,R1,#0x18
 000000E6  0E09      LSR         R1,R1,#0x18
 000000E8  4800      LDR         R0,=time + 0x1 ; time+1
 000000EA  7001      STRB        R1,[R0,#0x0] ; time+1
 000000EC            ; SCOPE-END
  151: }
 000000EC  BC10      POP         {R4}
 000000EE  BC08      POP         {R3}
 000000F0  4718      BX          R3
 000000F2          ENDP ; 'rtc_get_time?T'


*** CODE SEGMENT '?PR?set_alarm?T?rtc':
  154: void set_alarm(U8 al_hr, U8 al_min, U8 al_sec)
 00000000  B410      PUSH        {R4}
 00000002  1C14      MOV         R4,R2 ; al_sec
 00000004  ---- Variable 'al_sec' assigned to Register 'R4' ----
 00000004  ---- Variable 'al_min' assigned to Register 'R1' ----
 00000004  1C03      MOV         R3,R0 ; al_hr
 00000006  ---- Variable 'al_hr' assigned to Register 'R3' ----
  155: {
 00000006            ; SCOPE-START
  157:     AMR = 0XF8;
 00000006  22F8      MOV         R2,#0xF8
 00000008  4800      LDR         R0,=0xE0024010
 0000000A  7002      STRB        R2,[R0,#0x0]
  158:     temp = SEC + al_sec;
 0000000C  4800      LDR         R0,=0xE0024020
 0000000E  7800      LDRB        R0,[R0,#0x0]
 00000010  1C02      MOV         R2,R0
 00000012  1C20      MOV         R0,R4 ; al_sec
 00000014  0600      LSL         R0,R0,#0x18 ; al_sec
 00000016  0E00      LSR         R0,R0,#0x18
 00000018  1812      ADD         R2,R0
 0000001A  0612      LSL         R2,R2,#0x18
 0000001C  0E12      LSR         R2,R2,#0x18
 0000001E  ---- Variable 'temp' assigned to Register 'R2' ----
  159:     if(temp <60)
 0000001E  1C10      MOV         R0,R2 ; temp
 00000020  0600      LSL         R0,R0,#0x18 ; temp
 00000022  0E00      LSR         R0,R0,#0x18
 00000024  283C      CMP         R0,#0x3C
 00000026  DA03      BGE         L_3  ; T=0x00000030
  161:         ALSEC = temp;
 00000028  4800      LDR         R0,=0xE0024060
 0000002A  7002      STRB        R2,[R0,#0x0]
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 11  

  162:         temp = 0;
 0000002C  2200      MOV         R2,#0x0
  163:     }
 0000002E  E008      B           L_4  ; T=0x00000042
 00000030          L_3:
  166:         ALSEC = temp - 60;
 00000030  1C10      MOV         R0,R2 ; temp
 00000032  0602      LSL         R2,R0,#0x18 ; temp
 00000034  0E12      LSR         R2,R2,#0x18
 00000036  3A3C      SUB         R2,#0x3C
 00000038  0612      LSL         R2,R2,#0x18
 0000003A  0E12      LSR         R2,R2,#0x18
 0000003C  4800      LDR         R0,=0xE0024060
 0000003E  7002      STRB        R2,[R0,#0x0]
  167:         temp = 1;
 00000040  2201      MOV         R2,#0x1
  168:     }
 00000042          L_4:
  170:     temp = temp + MIN + al_min;
 00000042  4800      LDR         R0,=0xE0024024
 00000044  7800      LDRB        R0,[R0,#0x0]
 00000046  0612      LSL         R2,R2,#0x18 ; temp
 00000048  0E12      LSR         R2,R2,#0x18
 0000004A  1812      ADD         R2,R0
 0000004C  1C08      MOV         R0,R1 ; al_min
 0000004E  0600      LSL         R0,R0,#0x18 ; al_min
 00000050  0E00      LSR         R0,R0,#0x18
 00000052  1812      ADD         R2,R0
 00000054  0612      LSL         R2,R2,#0x18
 00000056  0E12      LSR         R2,R2,#0x18
  171:     if(temp <60)
 00000058  1C10      MOV         R0,R2 ; temp
 0000005A  0600      LSL         R0,R0,#0x18 ; temp
 0000005C  0E00      LSR         R0,R0,#0x18
 0000005E  283C      CMP         R0,#0x3C
 00000060  DA04      BGE         L_5  ; T=0x0000006C
  173:         ALMIN = temp;
 00000062  1C11      MOV         R1,R2 ; temp
 00000064  4800      LDR         R0,=0xE0024064
 00000066  7001      STRB        R1,[R0,#0x0]
  174:         temp = 0;
 00000068  2200      MOV         R2,#0x0
  175:     }
 0000006A  E008      B           L_6  ; T=0x0000007E
 0000006C          L_5:
  178:         ALMIN = temp - 60;
 0000006C  1C10      MOV         R0,R2 ; temp
 0000006E  0601      LSL         R1,R0,#0x18 ; temp
 00000070  0E09      LSR         R1,R1,#0x18
 00000072  393C      SUB         R1,#0x3C
 00000074  0609      LSL         R1,R1,#0x18
 00000076  0E09      LSR         R1,R1,#0x18
 00000078  4800      LDR         R0,=0xE0024064
 0000007A  7001      STRB        R1,[R0,#0x0]
  179:         temp = 1;
 0000007C  2201      MOV         R2,#0x1
  180:     }
 0000007E          L_6:
  182:     temp = temp + HOUR + al_hr;
 0000007E  4800      LDR         R0,=0xE0024028
 00000080  7800      LDRB        R0,[R0,#0x0]
 00000082  1C11      MOV         R1,R2 ; temp
 00000084  060A      LSL         R2,R1,#0x18 ; temp
 00000086  0E12      LSR         R2,R2,#0x18
 00000088  1812      ADD         R2,R0
 0000008A  1C18      MOV         R0,R3 ; al_hr
ARM COMPILER V2.50a,  rtc                                                                  03/04/13  17:09:36  PAGE 12  

 0000008C  0600      LSL         R0,R0,#0x18 ; al_hr
 0000008E  0E00      LSR         R0,R0,#0x18
 00000090  1812      ADD         R2,R0
 00000092  0612      LSL         R2,R2,#0x18
 00000094  0E12      LSR         R2,R2,#0x18
  183:     if(temp <24)
 00000096  1C10      MOV         R0,R2 ; temp
 00000098  0600      LSL         R0,R0,#0x18 ; temp
 0000009A  0E00      LSR         R0,R0,#0x18
 0000009C  2818      CMP         R0,#0x18
 0000009E  DA03      BGE         L_7  ; T=0x000000A8
  185:         ALHOUR = temp;
 000000A0  1C11      MOV         R1,R2 ; temp
 000000A2  4800      LDR         R0,=0xE0024068
 000000A4  7001      STRB        R1,[R0,#0x0]
  186:     }
 000000A6  E007      B           L_8  ; T=0x000000B8
 000000A8          L_7:
  189:         ALHOUR = temp - 24;
 000000A8  1C10      MOV         R0,R2 ; temp
 000000AA  0601      LSL         R1,R0,#0x18 ; temp
 000000AC  0E09      LSR         R1,R1,#0x18
 000000AE  3918      SUB         R1,#0x18
 000000B0  0609      LSL         R1,R1,#0x18
 000000B2  0E09      LSR         R1,R1,#0x18
 000000B4  4800      LDR         R0,=0xE0024068
 000000B6  7001      STRB        R1,[R0,#0x0]
  190:     }
 000000B8          L_8:
 000000B8            ; SCOPE-END
  191: }
 000000B8  BC10      POP         {R4}
 000000BA  4770      BX          R14
 000000BC          ENDP ; 'set_alarm?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        24
  const size           =         2
End of Module Information.


ARM COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
