ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE gsm_app
OBJECT MODULE PLACED IN gsm_app.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe gsm_app.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          
    3          DIAL diallist[20];
    4          DIAL *diallist_head;
    5          DIAL *diallist_tail;
    6          
    7          
    8          void GSM_APP_call(U8 *phone_no)
    9          {
   10   1          U8 Uc_dial_stat = 0;
   11   1          
   12   1          Uc_dial_stat = APP_phone_dial(phone_no);   // The phone_dial function deals with the dialling facility
   13   1          
   14   1          if(Uc_dial_stat == 1)                          // it also handles the end of call and cancelled call 
   15   1          {                                              // it returns a dial_stat for diff actions               
             -                              
   16   2              clrscr();                                  // dial_stat = 0 => Cancel a call
   17   2              ms_delay(10000);                           // dial_stat = 1 => make a call
   18   2              lcd_line_disp("Calling...", 0, 3);         // dial_stat = 2 => End a call
   19   2              lcd_line_disp("End Call", 12, 4);
   20   2              lcd_line_disp(phone_no, 0, 2);
   21   2              gsm_voice_call(phone_no);
   22   2              rtc_get_time(time);
   23   2              rtc_get_date(&date[0]);
   24   2              GSM_APP_diallist_update(phone_no, time);
   25   2          }
   26   1          else if(Uc_dial_stat == 0)
   27   1          {
   28   2              clrscr();
   29   2              ms_delay(5000);
   30   2              lcd_line2_disp("Call Cancelled !",0);
   31   2              ms_delay(20000);
   32   2              APP_default_page();
   33   2          }
   34   1          else if(Uc_dial_stat == 2)
   35   1          {
   36   2              clrscr();
   37   2              ms_delay(20000);
   38   2              APP_default_page();
   39   2          }   
   40   1      }
   41          
   42          /**********************************************************************************/
   43          /* Function Name: GSM_APP_diallist_init                                           */
   44          /* Arguments    : U8 diallist_size - Configurable size of diallist, limited to 20 */
   45          /* Return Types :                                                                 */
   46          /* Description  :                                                                 */
   47          /**********************************************************************************/
   48          
   49          void GSM_APP_diallist_init(U8 diallist_size)
   50          {
   51   1          DIAL *caller1;
   52   1          DIAL *caller2;
   53   1       
   54   1          caller1 = &diallist[0];
   55   1          caller2 = &diallist[1];
   56   1      
   57   1          while(diallist_size)                  // Preparing a doubly link list 
   58   1          {                                     
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 2   

   59   2              caller2->prev = caller1;          
*** WARNING C91 IN LINE 59 OF GSM_APP.C: '=': pointer to different objects
   60   2              caller1->next = caller2;    
*** WARNING C91 IN LINE 60 OF GSM_APP.C: '=': pointer to different objects
   61   2              caller1->cnt  = FREE;
   62   2              caller1++;
   63   2              caller2++;
   64   2              diallist_size--; 
   65   2          }
   66   1      
   67   1          diallist_head  = &diallist[0];         // Assigning Head of the list
   68   1          diallist_tail  = diallist_head;        // At initialization Head & Tail are same.
   69   1          caller1->next  = &diallist[0];         // making list circular. Caller1 is incremented in while and hence it
             - will be the last no.
*** WARNING C91 IN LINE 69 OF GSM_APP.C: '=': pointer to different objects
   70   1          diallist_head->prev = caller1;         // providing a back link to the Head of list
*** WARNING C91 IN LINE 70 OF GSM_APP.C: '=': pointer to different objects
   71   1      }
   72          
   73          /**********************************************************************************/
   74          /* Function Name: GSM_APP_diallist_show                                           */
   75          /* Arguments    : *phone_no                                                       */
   76          /* Return Types :                                                                 */
   77          /* Description  :                                                                 */
   78          /**********************************************************************************/
   79          
   80          U8 GSM_APP_diallist_show()
   81          {
   82   1          U8 uc_cnt = 0;
   83   1          U8 key_temp = 0;
   84   1          U8 opt = 0;
   85   1          U8 *diallist_opt[10] = {"Call", "Delete", "Clear List", "Exit", " "};
   86   1          
   87   1          DIAL *diallist_temp;
   88   1          DIAL *diallist_first;
   89   1          DIAL *temp;
   90   1        
   91   1          clrscr();
   92   1      
   93   1          lcd_line_disp("Delete", 0, 4);
   94   1          lcd_line_disp("Exit", 16, 4);
   95   1          diallist_temp = diallist_head->prev;  // diallist_head 's prev node is allocated to diallist_temp    
*** WARNING C91 IN LINE 95 OF GSM_APP.C: '=': pointer to different objects
   96   1          diallist_first = diallist_head->prev; // diallist_head 's prev node is allocated to diallist_first   
*** WARNING C91 IN LINE 96 OF GSM_APP.C: '=': pointer to different objects
   97   1          while(1)
   98   1          {       
   99   2              for(uc_cnt = 1; uc_cnt < 4; uc_cnt++)   //   
  100   2              {
  101   3                  if(diallist_temp->cnt == NOT_FREE)
  102   3                  {
  103   4                      lcd_line_disp(diallist_temp->no, 0, uc_cnt);
  104   4                      lcd_line_disp(diallist_temp->time, 12, uc_cnt);
  105   4                      diallist_temp = diallist_temp->prev;    
*** WARNING C91 IN LINE 105 OF GSM_APP.C: '=': pointer to different objects
  106   4                  }
  107   3              }
  108   2              lcd_line_disp("Options", 0, 4);
  109   2              lcd_line_disp("Exit", 16, 4);
  110   2              key_temp = get_key(1);
  111   2              ms_delay(100);
  112   2      
  113   2              if(key_temp == 'D')
  114   2              {
  115   3                  APP_default_page();
  116   3                  return 0;
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 3   

  117   3              }
  118   2      
  119   2              else if(key_temp == 'E')
  120   2              {
  121   3                  opt =  GSM_APP_options(diallist_opt, 4);
  122   3                  
  123   3                  if(opt == 1)
  124   3                  {
  125   4                      
  126   4                  }
  127   3                  else if(opt == 2)
  128   3                  {
  129   4                      diallist_temp = diallist_first->prev;
*** WARNING C91 IN LINE 129 OF GSM_APP.C: '=': pointer to different objects
  130   4                      GSM_APP_diallist_delete(diallist_first);
  131   4                      diallist_first = diallist_temp;
  132   4                      clrscr();       
  133   4      
  134   4                      uart0_tx_string("\r\n\ndiallist First: ");
  135   4                      uart0_tx_string(diallist_first->no);
  136   4                  
  137   4                      temp  = diallist_head->prev;
*** WARNING C91 IN LINE 137 OF GSM_APP.C: '=': pointer to different objects
  138   4                      uart0_tx_string("\r\ndiallist Head: ");
  139   4                      uart0_tx_string(temp->no);
  140   4      
  141   4                      uart0_tx_string("\r\ndiallist Tail: ");
  142   4                      uart0_tx_string(diallist_tail->no);
  143   4                  }
  144   3                  else if(opt == 3)
  145   3                  {
  146   4                      // clear_list function which must be generic, so that we can use it in any other 
  147   4                      // mobile services. it is like delete all option. 
  148   4                       GSM_APP_deleteall(diallist_tail);
  149   4                       clrscr();
  150   4                  }
  151   3      
  152   3              }
  153   2              else if(key_temp == 'C')   // Scroll DOWN                                                
  154   2              {
  155   3                  diallist_temp  = diallist_first->prev;
*** WARNING C91 IN LINE 155 OF GSM_APP.C: '=': pointer to different objects
  156   3                  if(diallist_temp->cnt == NOT_FREE)
  157   3                  {
  158   4                      clrscr();
  159   4                      diallist_first = diallist_first->prev;
*** WARNING C91 IN LINE 159 OF GSM_APP.C: '=': pointer to different objects
  160   4      
  161   4                      uart0_tx_string("\r\n\ndiallist First: ");
  162   4                      uart0_tx_string(diallist_first->no);
  163   4      
  164   4                      temp  = diallist_head->prev;
*** WARNING C91 IN LINE 164 OF GSM_APP.C: '=': pointer to different objects
  165   4                      uart0_tx_string("\r\ndiallist Head: ");
  166   4                      uart0_tx_string(temp->no);
  167   4                  }
  168   3                  else
  169   3                  {
  170   4                      diallist_temp  = diallist_first;    
  171   4                  }
  172   3      
  173   3              }
  174   2              else if(key_temp == 'B')    // Scroll UP
  175   2              {
  176   3                  diallist_temp  = diallist_first->next;  
*** WARNING C91 IN LINE 176 OF GSM_APP.C: '=': pointer to different objects
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 4   

  177   3                  if(diallist_temp->cnt == NOT_FREE)
  178   3                  {
  179   4                      clrscr();
  180   4                      diallist_first = diallist_first->next;
*** WARNING C91 IN LINE 180 OF GSM_APP.C: '=': pointer to different objects
  181   4                      
  182   4                      uart0_tx_string("\r\n\ndiallist First: ");
  183   4                      uart0_tx_string(diallist_first->no);
  184   4      
  185   4                      temp  = diallist_head->prev;
*** WARNING C91 IN LINE 185 OF GSM_APP.C: '=': pointer to different objects
  186   4                      uart0_tx_string("\r\ndiallist Head: ");
  187   4                      uart0_tx_string(temp->no);
  188   4                  }
  189   3                  else
  190   3                  {
  191   4                      diallist_temp  = diallist_first;    
  192   4                  }
  193   3              }
  194   2      
  195   2              diallist_temp  = diallist_first;
  196   2          }
  197   1      }
  198          
  199          /**********************************************************************************/
  200          /* Function Name: GSM_APP_diallist_update                                         */
  201          /* Arguments    : *phone_no, *time                                                */
  202          /* Return Types :                                                                 */
  203          /* Description  :                                                                 */
  204          /**********************************************************************************/
  205          
  206          void GSM_APP_diallist_update(U8 *phone_no, U8 *time)
  207          {
  208   1          LIB_str_copy(phone_no, &diallist_head->no[0], 10);   // Common part for both cases 
  209   1          LIB_str_copy(time, &diallist_head->time[0], 8);      // In any of the case New No is added at the Head of t
             -he list
  210   1          diallist_head->cnt = NOT_FREE;                       // after asigning Phone no and time stamp, the node is marked as NO
             -T_FREE
  211   1      
  212   1          if(diallist_head->next == diallist_tail)            // This is the case when list is full and hence head->next is
             - pointing to the tail 
*** WARNING C91 IN LINE 212 OF GSM_APP.C: '=': pointer to different objects
  213   1          {
  214   2              diallist_tail = diallist_tail->next;            // Tail & Head are shifted further by one position, and we get n
             -ew Head & Tail for our list
*** WARNING C91 IN LINE 214 OF GSM_APP.C: '=': pointer to different objects
  215   2              diallist_head = diallist_head->next;
*** WARNING C91 IN LINE 215 OF GSM_APP.C: '=': pointer to different objects
  216   2          }                                      
  217   1          else 
  218   1          {
  219   2              diallist_head = diallist_head->next;            // Head is traversing forward when list is empty or Head->next i
             -s not tail
*** WARNING C91 IN LINE 219 OF GSM_APP.C: '=': pointer to different objects
  220   2          }                                                   // Tail will not change till the list gets full
  221   1      }
  222          
  223          /**********************************************************************************/
  224          /* Function Name: GSM_APP_diallist_delete                                         */
  225          /* Arguments    : DIAL *del_node                                                  */
  226          /* Return Types : NONE                                                            */
  227          /* Description  : Deletes a node specified by del_node                            */
  228          /**********************************************************************************/
  229          
  230          void GSM_APP_diallist_delete(DIAL *del_node)
  231          {
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 5   

  232   1          DIAL *delnext;                                      // delnext is the node next to del_node & it is used while detaching the node 
             -from 
  233   1          DIAL *temp;                                         // existing list
  234   1          
  235   1          if(del_node->cnt == NOT_FREE)                       // The node to be deleted must be a valid node, deleting empty node
             - is useless. 
  236   1          {
  237   2              delnext = del_node->next;
*** WARNING C91 IN LINE 237 OF GSM_APP.C: '=': pointer to different objects
  238   2              if(diallist_head->next == diallist_tail)        // if Head->next is tail of list, it means that list is full
*** WARNING C91 IN LINE 238 OF GSM_APP.C: '=': pointer to different objects
  239   2              {
  240   3                  if(del_node == diallist_head)               // case1: the deleted node itself is head,
  241   3                  {                                           // In this case we must find a new Head & Tail for the list 
  242   4                      diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
*** WARNING C91 IN LINE 242 OF GSM_APP.C: '=': pointer to different objects
  243   4                      diallist_head = diallist_head->next;    // Head = Head->next      New Head
*** WARNING C91 IN LINE 243 OF GSM_APP.C: '=': pointer to different objects
  244   4                  }
  245   3              }                                               /*What if list is full & del_node is Tail ?  <------ FIX this */ 
  246   2              else 
  247   2              {
  248   3                  if(del_node == diallist_tail)               // case2: List is not full but del_node is Tail of list
  249   3                  {                                           // In this case we must find a Tail for the list 
  250   4                      diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
*** WARNING C91 IN LINE 250 OF GSM_APP.C: '=': pointer to different objects
  251   4                                                              // When list partially filled the head is an empty node and one node ahead of last  
  252   4                  }                                           // entered number.
  253   3              }
  254   2              /* detaching del_node from its position */
  255   2              delnext->prev = del_node->prev;
  256   2              temp = del_node->prev;
*** WARNING C91 IN LINE 256 OF GSM_APP.C: '=': pointer to different objects
  257   2              temp->next = delnext; 
*** WARNING C91 IN LINE 257 OF GSM_APP.C: '=': pointer to different objects
  258   2              del_node->cnt  = FREE;
  259   2              /****************************************/ 
  260   2       
  261   2              /* Adding the deleted node after head */
  262   2              del_node->next = diallist_head->next;            // Copying head->next link to del->next        
  263   2              del_node->prev = diallist_head;                  // del's backlink will be Head
*** WARNING C91 IN LINE 263 OF GSM_APP.C: '=': pointer to different objects
  264   2              diallist_head->next = del_node;                  // Now head->next will be del (new node)
*** WARNING C91 IN LINE 264 OF GSM_APP.C: '=': pointer to different objects
  265   2              temp = del_node->next;                           // Assigning backlink of node next to del (new node) 
*** WARNING C91 IN LINE 265 OF GSM_APP.C: '=': pointer to different objects
  266   2              temp->prev = del_node;                            
*** WARNING C91 IN LINE 266 OF GSM_APP.C: '=': pointer to different objects
  267   2          }
  268   1      }
  269          
  270          /**********************************************************************************/
  271          /* Function Name: GSM_APP_options                                                 */
  272          /* Arguments    : U8 **opt_disp, U8 opt_cnt                                       */
  273          /* Return Types : NONE                                                            */
  274          /* Description  :                                                                 */
  275          /**********************************************************************************/
  276          
  277          U8 GSM_APP_options(U8 **opt_disp, U8 opt_cnt)           // *opt_disp is an array of pointers, were each pointer w
             -ill point  
  278          {                                                       // to the option menu to be displayed
  279   1          U8 temp_key = 0;    
  280   1          U8 uc_cnt = 1;
  281   1          U8 **temp_ptr;
  282   1          ms_delay(1000);                                     // This delay is usefull in avoiding any spurious enterance into the loop.
  283   1      
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 6   

  284   1          while(temp_key != 'D')
  285   1          {
  286   2              lcd_line_disp("                    ", 0, 3);
  287   2              lcd_line_disp("                    ", 0, 4);
  288   2              temp_ptr = opt_disp + (uc_cnt - 1);
  289   2              lcd_line_disp(*temp_ptr, 0, 3);
  290   2              temp_ptr++;
  291   2              lcd_line_disp(*temp_ptr, 0, 4);
  292   2           
  293   2              temp_key = get_key(1);
  294   2              ms_delay(350);
  295   2              if(temp_key == 'B')
  296   2              {
  297   3                  if(uc_cnt >1)
  298   3                  {
  299   4                      uc_cnt -= 1;
  300   4                  }
  301   3              }
  302   2              else if(temp_key == 'C')
  303   2              {
  304   3                  if(uc_cnt < opt_cnt)
  305   3                  {
  306   4                      uc_cnt += 1;
  307   4                  }
  308   3              }  
  309   2              else if(temp_key == 'E')
  310   2              {
  311   3                  return uc_cnt;
  312   3              }
  313   2          }
  314   1          clrscr();
  315   1          ms_delay(1000);             // delay to avoid reentry in to this function
  316   1          return 0;       
  317   1      }
  318          
  319          /**********************************************************************************/
  320          /* Function Name: GSM_APP_deleteall                                               */
  321          /* Arguments    :                                                                 */
  322          /* Return Types : NONE                                                            */
  323          /* Description  : deletes all nodes and brings head of the list back to initial   */
  324          /*                position                                                        */
  325          /**********************************************************************************/
  326           
  327           void GSM_APP_deleteall(DIAL *list_tail)
  328           {
  329   1          DIAL *temp_ptr;
  330   1          temp_ptr = list_tail;
  331   1          while(temp_ptr->cnt == NOT_FREE)
  332   1          {
  333   2              temp_ptr->cnt = FREE;             // Setting node->cnt = FREE, which means node is deleted 
  334   2              temp_ptr = temp_ptr->next;        // traversing to the next node through link list 
*** WARNING C91 IN LINE 334 OF GSM_APP.C: '=': pointer to different objects
  335   2          }
  336   1          diallist_head = list_tail;            // changing global pointer dialist_head
  337   1       }
  338           
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (uart0_tx_string?T)
 EXTERN CODE16 (APP_phone_dial?T)
 EXTERN CODE16 (APP_default_page?T)
 EXTERN CODE16 (rtc_get_time?T)
 EXTERN CODE16 (rtc_get_date?T)
 EXTERN DATA (time)
 EXTERN DATA (date)
 EXTERN CODE16 (gsm_voice_call?T)
 EXTERN CODE16 (LIB_str_copy?T)
 EXTERN CODE16 (get_key?T)
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line_disp?T)



*** PUBLICS:
 PUBLIC         GSM_APP_diallist_init?T
 PUBLIC         GSM_APP_diallist_update?T
 PUBLIC         GSM_APP_diallist_show?T
 PUBLIC         GSM_APP_diallist_delete?T
 PUBLIC         GSM_APP_options?T
 PUBLIC         GSM_APP_call?T
 PUBLIC         GSM_APP_deleteall?T
 PUBLIC         diallist
 PUBLIC         diallist_head
 PUBLIC         diallist_tail



*** DATA SEGMENT '?CON?gsm_app':
 00000000          ?tpl?0001:
 00000000           BEGIN_INIT
 00000000  00000000  DD          ??S_4
 00000004  00000000  DD          ??S_5
 00000008  00000000  DD          ??S_6
 0000000C  00000000  DD          ??S_7
 00000010  00000000  DD          ??S_8
 00000014            SPACE       20
 00000028           END_INIT
 00000028          ??S_13:
 00000028            DB          '                    ',0x00
 0000003D          ??S_12:
 0000003D            DB          0x0D,0x0A,'diallist Tail: ',0x00
 0000004F          ??S_11:
 0000004F            DB          0x0D,0x0A,'diallist Head: ',0x00
 00000061          ??S_10:
 00000061            DB          0x0D,0x0A,0x0A,'diallist First: ',0x00
 00000075          ??S_9:
 00000075            DB          'Options',0x00
 0000007D          ??S_8:
 0000007D            DB          ' ',0x00
 0000007F          ??S_7:
 0000007F            DB          'Exit',0x00
 00000084          ??S_6:
 00000084            DB          'Clear List',0x00
 0000008F          ??S_5:
 0000008F            DB          'Delete',0x00
 00000096          ??S_4:
 00000096            DB          'Call',0x00
 0000009B          ??S_3:
 0000009B            DB          'Call Cancelled !',0x00
 000000AC          ??S_2:
 000000AC            DB          'End Call',0x00
 000000B5          ??S_1:
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 8   

 000000B5            DB          'Calling...',0x00

*** DATA SEGMENT '?DT0?gsm_app':
 00000000          diallist:
 00000000            DS          1200
 000004B0          diallist_head:
 000004B0            DS          4
 000004B4          diallist_tail:
 000004B4            DS          4



*** CODE SEGMENT '?PR?GSM_APP_call?T?gsm_app':
    8: void GSM_APP_call(U8 *phone_no)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; phone_no
 00000004  ---- Variable 'phone_no' assigned to Register 'R5' ----
    9: {
 00000004            ; SCOPE-START
   10:     U8 Uc_dial_stat = 0;
 00000004  2400      MOV         R4,#0x0
 00000006  ---- Variable 'Uc_dial_stat' assigned to Register 'R4' ----
   12:     Uc_dial_stat = APP_phone_dial(phone_no);   // The phone_dial function deals with the dialling facility
 00000006  1C28      MOV         R0,R5 ; phone_no
 00000008  F7FF      BL          APP_phone_dial?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          APP_phone_dial?T  ; T=0x0001  (2)
 0000000C  1C04      MOV         R4,R0 ; Uc_dial_stat
   14:     if(Uc_dial_stat == 1)                          // it also handles the end of call and cancelled call 
 0000000E  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 00000010  0E00      LSR         R0,R0,#0x18
 00000012  2801      CMP         R0,#0x1
 00000014  D121      BNE         L_1  ; T=0x0000005A
   16:         clrscr();                                  // dial_stat = 0 => Cancel a call
 00000016  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000018  FFF3      BL          clrscr?T  ; T=0x0001  (2)
   17:            ms_delay(10000);                           // dial_stat = 1 => make a call
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
   18:         lcd_line_disp("Calling...", 0, 3);         // dial_stat = 2 => End a call
 00000020  4800      LDR         R0,=??S_1 ; ??S_1
 00000022  2100      MOV         R1,#0x0
 00000024  2203      MOV         R2,#0x3
 00000026  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000028  FFEB      BL          lcd_line_disp?T  ; T=0x0001  (2)
   19:         lcd_line_disp("End Call", 12, 4);
 0000002A  4800      LDR         R0,=??S_2 ; ??S_2
 0000002C  210C      MOV         R1,#0xC
 0000002E  2204      MOV         R2,#0x4
 00000030  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000032  FFE6      BL          lcd_line_disp?T  ; T=0x0001  (2)
   20:         lcd_line_disp(phone_no, 0, 2);
 00000034  1C28      MOV         R0,R5 ; phone_no
 00000036  2100      MOV         R1,#0x0
 00000038  2202      MOV         R2,#0x2
 0000003A  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_line_disp?T  ; T=0x0001  (2)
   21:         gsm_voice_call(phone_no);
 0000003E  1C28      MOV         R0,R5 ; phone_no
 00000040  F7FF      BL          gsm_voice_call?T  ; T=0x0001  (1)
 00000042  FFDE      BL          gsm_voice_call?T  ; T=0x0001  (2)
   22:         rtc_get_time(time);
 00000044  4800      LDR         R0,=time ; time
 00000046  F7FF      BL          rtc_get_time?T  ; T=0x0001  (1)
 00000048  FFDB      BL          rtc_get_time?T  ; T=0x0001  (2)
   23:         rtc_get_date(&date[0]);
 0000004A  4800      LDR         R0,=date ; date
 0000004C  F7FF      BL          rtc_get_date?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          rtc_get_date?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 9   

   24:         GSM_APP_diallist_update(phone_no, time);
 00000050  1C28      MOV         R0,R5 ; phone_no
 00000052  4800      LDR         R1,=time ; time
 00000054  F7FF      BL          GSM_APP_diallist_update?T  ; T=0x0001  (1)
 00000056  FFD4      BL          GSM_APP_diallist_update?T  ; T=0x0001  (2)
   25:     }
 00000058  E01F      B           L_2  ; T=0x0000009A
 0000005A          L_1:
   26:     else if(Uc_dial_stat == 0)
 0000005A  1C20      MOV         R0,R4 ; Uc_dial_stat
 0000005C  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 0000005E  0E00      LSR         R0,R0,#0x18
 00000060  2800      CMP         R0,#0x0
 00000062  D10E      BNE         L_3  ; T=0x00000082
   28:          clrscr();
 00000064  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000066  FFCC      BL          clrscr?T  ; T=0x0001  (2)
   29:            ms_delay(5000);
 00000068  4800      LDR         R0,=0x1388
 0000006A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000006C  FFC9      BL          ms_delay?T  ; T=0x0001  (2)
   30:         lcd_line2_disp("Call Cancelled !",0);
 0000006E  4800      LDR         R0,=??S_3 ; ??S_3
 00000070  2100      MOV         R1,#0x0
 00000072  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000074  FFC5      BL          lcd_line2_disp?T  ; T=0x0001  (2)
   31:         ms_delay(20000);
 00000076  4800      LDR         R0,=0x4E20
 00000078  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          ms_delay?T  ; T=0x0001  (2)
   32:         APP_default_page();
 0000007C  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 0000007E  FFC0      BL          APP_default_page?T  ; T=0x0001  (2)
   33:     }
 00000080  E00B      B           L_2  ; T=0x0000009A
 00000082          L_3:
   34:     else if(Uc_dial_stat == 2)
 00000082  1C20      MOV         R0,R4 ; Uc_dial_stat
 00000084  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 00000086  0E00      LSR         R0,R0,#0x18
 00000088  2802      CMP         R0,#0x2
 0000008A  D106      BNE         L_2  ; T=0x0000009A
   36:         clrscr();
 0000008C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          clrscr?T  ; T=0x0001  (2)
   37:         ms_delay(20000);
 00000090  4800      LDR         R0,=0x4E20
 00000092  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000094  FFB5      BL          ms_delay?T  ; T=0x0001  (2)
   38:         APP_default_page();
 00000096  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 00000098  FFB3      BL          APP_default_page?T  ; T=0x0001  (2)
   39:     }    
 0000009A          L_2:
 0000009A            ; SCOPE-END
   40: }
 0000009A  BC30      POP         {R4-R5}
 0000009C  BC08      POP         {R3}
 0000009E  4718      BX          R3
 000000A0          ENDP ; 'GSM_APP_call?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_init?T?gsm_app':
   49: void GSM_APP_diallist_init(U8 diallist_size)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'diallist_size' assigned to Register 'R0' ----
   50: {
 00000002            ; SCOPE-START
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 10  

   54:     caller1 = &diallist[0];
 00000002  4800      LDR         R2,=diallist ; diallist
 00000004  ---- Variable 'caller1' assigned to Register 'R2' ----
   55:     caller2 = &diallist[1];
 00000004  4800      LDR         R1,=diallist + 0x3C ; diallist+60
 00000006  ---- Variable 'caller2' assigned to Register 'R1' ----
   57:      while(diallist_size)                 // Preparing a doubly link list 
 00000006  E00D      B           L_6  ; T=0x00000024
 00000008          L_8:
   59:          caller2->prev = caller1;          
 00000008  1C13      MOV         R3,R2 ; caller1
 0000000A  1C0C      MOV         R4,R1 ; caller2
 0000000C  63A3      STR         R3,[R4,#0x38]
   60:         caller1->next = caller2;    
 0000000E  1C0B      MOV         R3,R1 ; caller2
 00000010  1C14      MOV         R4,R2 ; caller1
 00000012  6363      STR         R3,[R4,#0x34]
   61:         caller1->cnt  = FREE;
 00000014  2400      MOV         R4,#0x0
 00000016  1C13      MOV         R3,R2 ; caller1
 00000018  701C      STRB        R4,[R3,#0x0] ; caller1
   62:         caller1++;
 0000001A  323C      ADD         R2,#0x3C
   63:         caller2++;
 0000001C  313C      ADD         R1,#0x3C
   64:         diallist_size--; 
 0000001E  3801      SUB         R0,#0x1
 00000020  0600      LSL         R0,R0,#0x18
 00000022  0E00      LSR         R0,R0,#0x18
   65:      }
 00000024          L_6:
 00000024  1C03      MOV         R3,R0 ; diallist_size
 00000026  2B00      CMP         R3,#0x0 ; diallist_size
 00000028  D1EE      BNE         L_8  ; T=0x00000008
   67:     diallist_head  = &diallist[0];         // Assigning Head of the list
 0000002A  4800      LDR         R1,=diallist ; diallist
 0000002C  4800      LDR         R0,=diallist_head ; diallist_head
 0000002E  6001      STR         R1,[R0,#0x0] ; diallist_head
   68:     diallist_tail  = diallist_head;        // At initialization Head & Tail are same.
 00000030  4800      LDR         R0,=diallist_head ; diallist_head
 00000032  6801      LDR         R1,[R0,#0x0] ; diallist_head
 00000034  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000036  6001      STR         R1,[R0,#0x0] ; diallist_tail
   69:     caller1->next  = &diallist[0];         // making list circular. Caller1 is incremented in while and hence it will be
             - the last no.
 00000038  4800      LDR         R0,=diallist ; diallist
 0000003A  1C11      MOV         R1,R2 ; caller1
 0000003C  6348      STR         R0,[R1,#0x34]
   70:     diallist_head->prev = caller1;         // providing a back link to the Head of list
 0000003E  1C10      MOV         R0,R2 ; caller1
 00000040  4800      LDR         R1,=diallist_head ; diallist_head
 00000042  6809      LDR         R1,[R1,#0x0] ; diallist_head
 00000044  6388      STR         R0,[R1,#0x38]
 00000046            ; SCOPE-END
   71: }
 00000046  BC10      POP         {R4}
 00000048  4770      BX          R14
 0000004A          ENDP ; 'GSM_APP_diallist_init?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_show?T?gsm_app':
   80: U8 GSM_APP_diallist_show()
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  B08D      SUB         R13,#0x34
 00000004  ---- Variable 'temp' assigned to Register 'R5' ----
   81: {
 00000004            ; SCOPE-START
   82:     U8 uc_cnt = 0;
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 11  

 00000004  2100      MOV         R1,#0x0
 00000006  A800      ADD         R0,R13,#0x0
 00000008  7001      STRB        R1,[R0,#0x0] ; uc_cnt
   83:     U8 key_temp = 0;
 0000000A  A801      ADD         R0,R13,#0x4
 0000000C  7001      STRB        R1,[R0,#0x0] ; key_temp
   84:     U8 opt = 0;
 0000000E  A802      ADD         R0,R13,#0x8
 00000010  7001      STRB        R1,[R0,#0x0] ; opt
   85:     U8 *diallist_opt[10] = {"Call", "Delete", "Clear List", "Exit", " "};
 00000012  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000014  A803      ADD         R0,R13,#0xC
 00000016  2228      MOV         R2,#0x28
 00000018          L_61:
 00000018  780B      LDRB        R3,[R1,#0x0]
 0000001A  7003      STRB        R3,[R0,#0x0]
 0000001C  1C49      ADD         R1,R1,#0x1
 0000001E  1C40      ADD         R0,R0,#0x1
 00000020  1E52      SUB         R2,R2,#0x1
 00000022  D1F9      BNE         L_61  ; T=0x00000018
   91:     clrscr();
 00000024  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000026  FFEC      BL          clrscr?T  ; T=0x0001  (2)
   93:     lcd_line_disp("Delete", 0, 4);
 00000028  4800      LDR         R0,=??S_5 ; ??S_5
 0000002A  2100      MOV         R1,#0x0
 0000002C  2204      MOV         R2,#0x4
 0000002E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000030  FFE7      BL          lcd_line_disp?T  ; T=0x0001  (2)
   94:     lcd_line_disp("Exit", 16, 4);
 00000032  4800      LDR         R0,=??S_7 ; ??S_7
 00000034  2110      MOV         R1,#0x10
 00000036  2204      MOV         R2,#0x4
 00000038  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          lcd_line_disp?T  ; T=0x0001  (2)
   95:     diallist_temp = diallist_head->prev;  // diallist_head 's prev node is allocated to diallist_temp    
 0000003C  4800      LDR         R0,=diallist_head ; diallist_head
 0000003E  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000040  6B86      LDR         R6,[R0,#0x38]
 00000042  1C37      MOV         R7,R6 ; diallist_temp
 00000044  ---- Variable 'diallist_temp' assigned to Register 'R7' ----
   96:     diallist_first = diallist_head->prev; // diallist_head 's prev node is allocated to diallist_first   
 00000044  ---- Variable 'diallist_first' assigned to Register 'R6' ----
   99:         for(uc_cnt = 1; uc_cnt < 4; uc_cnt++)   //   
 00000044          L_18:
 00000044  2001      MOV         R0,#0x1
 00000046  AC00      ADD         R4,R13,#0x0
 00000048  7020      STRB        R0,[R4,#0x0] ; uc_cnt
 0000004A  E018      B           L_16  ; T=0x0000007E
 0000004C          L_17:
  101:             if(diallist_temp->cnt == NOT_FREE)
 0000004C  1C38      MOV         R0,R7 ; diallist_temp
 0000004E  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
 00000050  2801      CMP         R0,#0x1
 00000052  D110      BNE         L_14  ; T=0x00000076
  103:                 lcd_line_disp(diallist_temp->no, 0, uc_cnt);
 00000054  7820      LDRB        R0,[R4,#0x0] ; uc_cnt
 00000056  1C02      MOV         R2,R0
 00000058  1C38      MOV         R0,R7 ; diallist_temp
 0000005A  3001      ADD         R0,#0x1
 0000005C  2100      MOV         R1,#0x0
 0000005E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000060  FFCF      BL          lcd_line_disp?T  ; T=0x0001  (2)
  104:                 lcd_line_disp(diallist_temp->time, 12, uc_cnt);
 00000062  A800      ADD         R0,R13,#0x0
 00000064  7800      LDRB        R0,[R0,#0x0] ; uc_cnt
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 12  

 00000066  1C02      MOV         R2,R0
 00000068  1C38      MOV         R0,R7 ; diallist_temp
 0000006A  3029      ADD         R0,#0x29
 0000006C  210C      MOV         R1,#0xC
 0000006E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000070  FFC7      BL          lcd_line_disp?T  ; T=0x0001  (2)
  105:                 diallist_temp = diallist_temp->prev;    
 00000072  1C38      MOV         R0,R7 ; diallist_temp
 00000074  6B87      LDR         R7,[R0,#0x38]
  107:           }
 00000076          L_14:
 00000076  A800      ADD         R0,R13,#0x0
 00000078  7801      LDRB        R1,[R0,#0x0] ; uc_cnt
 0000007A  3101      ADD         R1,#0x1
 0000007C  7001      STRB        R1,[R0,#0x0] ; uc_cnt
 0000007E          L_16:
 0000007E  A800      ADD         R0,R13,#0x0
 00000080  7800      LDRB        R0,[R0,#0x0] ; uc_cnt
 00000082  2804      CMP         R0,#0x4
 00000084  DBE2      BLT         L_17  ; T=0x0000004C
  108:         lcd_line_disp("Options", 0, 4);
 00000086  4800      LDR         R0,=??S_9 ; ??S_9
 00000088  2100      MOV         R1,#0x0
 0000008A  2204      MOV         R2,#0x4
 0000008C  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          lcd_line_disp?T  ; T=0x0001  (2)
  109:         lcd_line_disp("Exit", 16, 4);
 00000090  4800      LDR         R0,=??S_7 ; ??S_7
 00000092  2110      MOV         R1,#0x10
 00000094  2204      MOV         R2,#0x4
 00000096  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000098  FFB3      BL          lcd_line_disp?T  ; T=0x0001  (2)
  110:         key_temp = get_key(1);
 0000009A  2001      MOV         R0,#0x1
 0000009C  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          get_key?T  ; T=0x0001  (2)
 000000A0  A901      ADD         R1,R13,#0x4
 000000A2  7008      STRB        R0,[R1,#0x0] ; key_temp
  111:         ms_delay(100);
 000000A4  2064      MOV         R0,#0x64
 000000A6  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 000000A8  FFAB      BL          ms_delay?T  ; T=0x0001  (2)
  113:         if(key_temp == 'D')
 000000AA  A801      ADD         R0,R13,#0x4
 000000AC  7800      LDRB        R0,[R0,#0x0] ; key_temp
 000000AE  2844      CMP         R0,#0x44
 000000B0  D104      BNE         L_20  ; T=0x000000BC
  115:             APP_default_page();
 000000B2  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 000000B4  FFA5      BL          APP_default_page?T  ; T=0x0001  (2)
  116:             return 0;
 000000B6  2400      MOV         R4,#0x0
 000000B8  1C20      MOV         R0,R4
 000000BA  E080      B           L_21  ; T=0x000001BE
  117:         }
 000000BC          L_20:
  119:         else if(key_temp == 'E')
 000000BC  A801      ADD         R0,R13,#0x4
 000000BE  7800      LDRB        R0,[R0,#0x0] ; key_temp
 000000C0  2845      CMP         R0,#0x45
 000000C2  D137      BNE         L_23  ; T=0x00000134
  121:             opt =  GSM_APP_options(diallist_opt, 4);
 000000C4  A803      ADD         R0,R13,#0xC
 000000C6  2104      MOV         R1,#0x4
 000000C8  F7FF      BL          GSM_APP_options?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          GSM_APP_options?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 13  

 000000CC  A902      ADD         R1,R13,#0x8
 000000CE  7008      STRB        R0,[R1,#0x0] ; opt
  123:             if(opt == 1)
 000000D0  7808      LDRB        R0,[R1,#0x0] ; opt
 000000D2  2801      CMP         R0,#0x1
 000000D4  D071      BEQ         L_22  ; T=0x000001BA
  127:             else if(opt == 2)
 000000D6  2802      CMP         R0,#0x2
 000000D8  D121      BNE         L_26  ; T=0x0000011E
  129:                 diallist_temp = diallist_first->prev;
 000000DA  1C30      MOV         R0,R6 ; diallist_first
 000000DC  6B87      LDR         R7,[R0,#0x38]
  130:                 GSM_APP_diallist_delete(diallist_first);
 000000DE  1C30      MOV         R0,R6 ; diallist_first
 000000E0  F7FF      BL          GSM_APP_diallist_delete?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          GSM_APP_diallist_delete?T  ; T=0x0001  (2)
  131:                 diallist_first = diallist_temp;
 000000E4  1C3E      MOV         R6,R7 ; diallist_temp
  132:                 clrscr();       
 000000E6  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000E8  FF8B      BL          clrscr?T  ; T=0x0001  (2)
  134:                 uart0_tx_string("\r\n\ndiallist First: ");
 000000EA  4800      LDR         R0,=??S_10 ; ??S_10
 000000EC  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000000EE  FF88      BL          uart0_tx_string?T  ; T=0x0001  (2)
  135:                 uart0_tx_string(diallist_first->no);
 000000F0  1C30      MOV         R0,R6 ; diallist_first
 000000F2  3001      ADD         R0,#0x1
 000000F4  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000000F6  FF84      BL          uart0_tx_string?T  ; T=0x0001  (2)
  137:                 temp  = diallist_head->prev;
 000000F8  4800      LDR         R0,=diallist_head ; diallist_head
 000000FA  6800      LDR         R0,[R0,#0x0] ; diallist_head
 000000FC  6B85      LDR         R5,[R0,#0x38]
  138:                 uart0_tx_string("\r\ndiallist Head: ");
 000000FE  4800      LDR         R0,=??S_11 ; ??S_11
 00000100  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000102  FF7E      BL          uart0_tx_string?T  ; T=0x0001  (2)
  139:                 uart0_tx_string(temp->no);
 00000104  1C28      MOV         R0,R5 ; temp
 00000106  3001      ADD         R0,#0x1
 00000108  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000010A  FF7A      BL          uart0_tx_string?T  ; T=0x0001  (2)
  141:                 uart0_tx_string("\r\ndiallist Tail: ");
 0000010C  4800      LDR         R0,=??S_12 ; ??S_12
 0000010E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000110  FF77      BL          uart0_tx_string?T  ; T=0x0001  (2)
  142:                 uart0_tx_string(diallist_tail->no);
 00000112  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000114  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 00000116  3001      ADD         R0,#0x1
 00000118  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000011A  FF72      BL          uart0_tx_string?T  ; T=0x0001  (2)
  143:                }
 0000011C  E04D      B           L_22  ; T=0x000001BA
 0000011E          L_26:
  144:             else if(opt == 3)
 0000011E  A802      ADD         R0,R13,#0x8
 00000120  7800      LDRB        R0,[R0,#0x0] ; opt
 00000122  2803      CMP         R0,#0x3
 00000124  D149      BNE         L_22  ; T=0x000001BA
  148:                  GSM_APP_deleteall(diallist_tail);
 00000126  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000128  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 0000012A  F7FF      BL          GSM_APP_deleteall?T  ; T=0x0001  (1)
 0000012C  FF69      BL          GSM_APP_deleteall?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 14  

  149:                  clrscr();
 0000012E  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000130  FF67      BL          clrscr?T  ; T=0x0001  (2)
  152:         }
 00000132  E042      B           L_22  ; T=0x000001BA
 00000134          L_23:
  153:         else if(key_temp == 'C')   // Scroll DOWN                                                
 00000134  A801      ADD         R0,R13,#0x4
 00000136  7800      LDRB        R0,[R0,#0x0] ; key_temp
 00000138  2843      CMP         R0,#0x43
 0000013A  D11D      BNE         L_30  ; T=0x00000178
  155:             diallist_temp  = diallist_first->prev;
 0000013C  1C30      MOV         R0,R6 ; diallist_first
 0000013E  6B87      LDR         R7,[R0,#0x38]
  156:             if(diallist_temp->cnt == NOT_FREE)
 00000140  1C38      MOV         R0,R7 ; diallist_temp
 00000142  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
 00000144  2801      CMP         R0,#0x1
 00000146  D115      BNE         L_31  ; T=0x00000174
  158:                 clrscr();
 00000148  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000014A  FF5A      BL          clrscr?T  ; T=0x0001  (2)
  159:                 diallist_first = diallist_first->prev;
 0000014C  1C30      MOV         R0,R6 ; diallist_first
 0000014E  6B86      LDR         R6,[R0,#0x38]
  161:                 uart0_tx_string("\r\n\ndiallist First: ");
 00000150  4800      LDR         R0,=??S_10 ; ??S_10
 00000152  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000154  FF55      BL          uart0_tx_string?T  ; T=0x0001  (2)
  162:                 uart0_tx_string(diallist_first->no);
 00000156  1C30      MOV         R0,R6 ; diallist_first
 00000158  3001      ADD         R0,#0x1
 0000015A  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000015C  FF51      BL          uart0_tx_string?T  ; T=0x0001  (2)
  164:                 temp  = diallist_head->prev;
 0000015E  4800      LDR         R0,=diallist_head ; diallist_head
 00000160  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000162  6B85      LDR         R5,[R0,#0x38]
  165:                 uart0_tx_string("\r\ndiallist Head: ");
 00000164  4800      LDR         R0,=??S_11 ; ??S_11
 00000166  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000168  FF4B      BL          uart0_tx_string?T  ; T=0x0001  (2)
  166:                 uart0_tx_string(temp->no);
 0000016A  1C28      MOV         R0,R5 ; temp
 0000016C  3001      ADD         R0,#0x1
 0000016E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000170  FF47      BL          uart0_tx_string?T  ; T=0x0001  (2)
  167:             }
 00000172  E022      B           L_22  ; T=0x000001BA
 00000174          L_31:
  170:                 diallist_temp  = diallist_first;    
 00000174  1C37      MOV         R7,R6 ; diallist_first
  173:         }
 00000176  E020      B           L_22  ; T=0x000001BA
 00000178          L_30:
  174:         else if(key_temp == 'B')    // Scroll UP
 00000178  A801      ADD         R0,R13,#0x4
 0000017A  7800      LDRB        R0,[R0,#0x0] ; key_temp
 0000017C  2842      CMP         R0,#0x42
 0000017E  D11C      BNE         L_22  ; T=0x000001BA
  176:             diallist_temp  = diallist_first->next;  
 00000180  1C30      MOV         R0,R6 ; diallist_first
 00000182  6B47      LDR         R7,[R0,#0x34]
  177:             if(diallist_temp->cnt == NOT_FREE)
 00000184  1C38      MOV         R0,R7 ; diallist_temp
 00000186  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 15  

 00000188  2801      CMP         R0,#0x1
 0000018A  D115      BNE         L_35  ; T=0x000001B8
  179:                 clrscr();
 0000018C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000018E  FF38      BL          clrscr?T  ; T=0x0001  (2)
  180:                  diallist_first = diallist_first->next;
 00000190  1C30      MOV         R0,R6 ; diallist_first
 00000192  6B46      LDR         R6,[R0,#0x34]
  182:                 uart0_tx_string("\r\n\ndiallist First: ");
 00000194  4800      LDR         R0,=??S_10 ; ??S_10
 00000196  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000198  FF33      BL          uart0_tx_string?T  ; T=0x0001  (2)
  183:                 uart0_tx_string(diallist_first->no);
 0000019A  1C30      MOV         R0,R6 ; diallist_first
 0000019C  3001      ADD         R0,#0x1
 0000019E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001A0  FF2F      BL          uart0_tx_string?T  ; T=0x0001  (2)
  185:                 temp  = diallist_head->prev;
 000001A2  4800      LDR         R0,=diallist_head ; diallist_head
 000001A4  6800      LDR         R0,[R0,#0x0] ; diallist_head
 000001A6  6B85      LDR         R5,[R0,#0x38]
  186:                 uart0_tx_string("\r\ndiallist Head: ");
 000001A8  4800      LDR         R0,=??S_11 ; ??S_11
 000001AA  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001AC  FF29      BL          uart0_tx_string?T  ; T=0x0001  (2)
  187:                 uart0_tx_string(temp->no);
 000001AE  1C28      MOV         R0,R5 ; temp
 000001B0  3001      ADD         R0,#0x1
 000001B2  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001B4  FF25      BL          uart0_tx_string?T  ; T=0x0001  (2)
  188:             }
 000001B6  E000      B           L_22  ; T=0x000001BA
 000001B8          L_35:
  191:                 diallist_temp  = diallist_first;    
 000001B8  1C37      MOV         R7,R6 ; diallist_first
  193:         }
 000001BA          L_22:
  195:         diallist_temp  = diallist_first;
 000001BA  1C37      MOV         R7,R6 ; diallist_first
  196:     }
 000001BC  E742      B           L_18  ; T=0x00000044
 000001BE            ; SCOPE-END
  197: }
 000001BE          L_21:
 000001BE  B00D      ADD         R13,#0x34
 000001C0  BCF0      POP         {R4-R7}
 000001C2  BC08      POP         {R3}
 000001C4  4718      BX          R3
 000001C6          ENDP ; 'GSM_APP_diallist_show?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_update?T?gsm_app':
  206: void GSM_APP_diallist_update(U8 *phone_no, U8 *time)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C0C      MOV         R4,R1 ; time
 00000004  ---- Variable 'time' assigned to Register 'R4' ----
 00000004  1C01      MOV         R1,R0 ; phone_no
 00000006  ---- Variable 'phone_no' assigned to Register 'R1' ----
  208:     LIB_str_copy(phone_no, &diallist_head->no[0], 10);   // Common part for both cases 
 00000006  1C08      MOV         R0,R1 ; phone_no
 00000008  4800      LDR         R1,=diallist_head ; diallist_head
 0000000A  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000000C  3101      ADD         R1,#0x1
 0000000E  220A      MOV         R2,#0xA
 00000010  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000012  FFF6      BL          LIB_str_copy?T  ; T=0x0001  (2)
  209:     LIB_str_copy(time, &diallist_head->time[0], 8);      // In any of the case New No is added at the Head of the list
 00000014  1C20      MOV         R0,R4 ; time
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 16  

 00000016  4800      LDR         R1,=diallist_head ; diallist_head
 00000018  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000001A  3129      ADD         R1,#0x29
 0000001C  2208      MOV         R2,#0x8
 0000001E  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000020  FFEF      BL          LIB_str_copy?T  ; T=0x0001  (2)
  210:     diallist_head->cnt = NOT_FREE;                       // after asigning Phone no and time stamp, the node is marked as NOT_FREE
 00000022  2101      MOV         R1,#0x1
 00000024  4800      LDR         R0,=diallist_head ; diallist_head
 00000026  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000028  7001      STRB        R1,[R0,#0x0]
  212:     if(diallist_head->next == diallist_tail)            // This is the case when list is full and hence head->next is pointin
             -g to the tail 
 0000002A  4800      LDR         R0,=diallist_head ; diallist_head
 0000002C  6803      LDR         R3,[R0,#0x0] ; diallist_head
 0000002E  6B59      LDR         R1,[R3,#0x34]
 00000030  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000032  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 00000034  4281      CMP         R1,R0
 00000036  D105      BNE         L_37  ; T=0x00000044
  214:         diallist_tail = diallist_tail->next;            // Tail & Head are shifted further by one position, and we get new Head 
             -& Tail for our list
 00000038  6B42      LDR         R2,[R0,#0x34]
 0000003A  4800      LDR         R0,=diallist_tail ; diallist_tail
 0000003C  6002      STR         R2,[R0,#0x0] ; diallist_tail
  215:         diallist_head = diallist_head->next;
 0000003E  4800      LDR         R0,=diallist_head ; diallist_head
 00000040  6001      STR         R1,[R0,#0x0] ; diallist_head
  216:     }                                       
 00000042  E001      B           L_38  ; T=0x00000048
 00000044          L_37:
  219:         diallist_head = diallist_head->next;            // Head is traversing forward when list is empty or Head->next is not ta
             -il
 00000044  4800      LDR         R0,=diallist_head ; diallist_head
 00000046  6001      STR         R1,[R0,#0x0] ; diallist_head
  220:     }                                                    // Tail will not change till the list gets full
 00000048          L_38:
  221: }
 00000048  BC10      POP         {R4}
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'GSM_APP_diallist_update?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_delete?T?gsm_app':
  230: void GSM_APP_diallist_delete(DIAL *del_node)
 00000000  B470      PUSH        {R4-R6}
 00000002  1C03      MOV         R3,R0 ; del_node
 00000004  ---- Variable 'del_node' assigned to Register 'R3' ----
  231: {
 00000004            ; SCOPE-START
  235:     if(del_node->cnt == NOT_FREE)                       // The node to be deleted must be a valid node, deleting empty node is usel
             -ess. 
 00000004  1C18      MOV         R0,R3 ; del_node
 00000006  7800      LDRB        R0,[R0,#0x0] ; del_node
 00000008  2801      CMP         R0,#0x1
 0000000A  D135      BNE         L_39  ; T=0x00000078
  237:         delnext = del_node->next;
 0000000C  1C18      MOV         R0,R3 ; del_node
 0000000E  6B44      LDR         R4,[R0,#0x34]
 00000010  ---- Variable 'delnext' assigned to Register 'R4' ----
  238:         if(diallist_head->next == diallist_tail)        // if Head->next is tail of list, it means that list is full
 00000010  4800      LDR         R0,=diallist_head ; diallist_head
 00000012  6806      LDR         R6,[R0,#0x0] ; diallist_head
 00000014  6B72      LDR         R2,[R6,#0x34]
 00000016  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000018  6801      LDR         R1,[R0,#0x0] ; diallist_tail
 0000001A  428A      CMP         R2,R1
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 17  

 0000001C  D108      BNE         L_40  ; T=0x00000030
  240:             if(del_node == diallist_head)               // case1: the deleted node itself is head,
 0000001E  1C18      MOV         R0,R3 ; del_node
 00000020  42B0      CMP         R0,R6 ; del_node
 00000022  D10B      BNE         L_42  ; T=0x0000003C
  242:                 diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
 00000024  6B4D      LDR         R5,[R1,#0x34]
 00000026  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000028  6005      STR         R5,[R0,#0x0] ; diallist_tail
  243:                  diallist_head = diallist_head->next;    // Head = Head->next      New Head
 0000002A  4800      LDR         R0,=diallist_head ; diallist_head
 0000002C  6002      STR         R2,[R0,#0x0] ; diallist_head
  245:         }                                               /*What if list is full & del_node is Tail ?  <------ FIX this */ 
 0000002E  E005      B           L_42  ; T=0x0000003C
 00000030          L_40:
  248:             if(del_node == diallist_tail)               // case2: List is not full but del_node is Tail of list
 00000030  1C18      MOV         R0,R3 ; del_node
 00000032  4288      CMP         R0,R1 ; del_node
 00000034  D102      BNE         L_42  ; T=0x0000003C
  250:                 diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
 00000036  6B49      LDR         R1,[R1,#0x34]
 00000038  4800      LDR         R0,=diallist_tail ; diallist_tail
 0000003A  6001      STR         R1,[R0,#0x0] ; diallist_tail
  253:         }
 0000003C          L_42:
  255:          delnext->prev = del_node->prev;
 0000003C  1C18      MOV         R0,R3 ; del_node
 0000003E  6B80      LDR         R0,[R0,#0x38]
 00000040  1C21      MOV         R1,R4 ; delnext
 00000042  6388      STR         R0,[R1,#0x38]
  256:          temp = del_node->prev;
 00000044  1C18      MOV         R0,R3 ; del_node
 00000046  6B82      LDR         R2,[R0,#0x38]
 00000048  ---- Variable 'temp' assigned to Register 'R2' ----
  257:         temp->next = delnext; 
 00000048  1C20      MOV         R0,R4 ; delnext
 0000004A  1C11      MOV         R1,R2 ; temp
 0000004C  6348      STR         R0,[R1,#0x34]
  258:         del_node->cnt  = FREE;
 0000004E  2100      MOV         R1,#0x0
 00000050  1C18      MOV         R0,R3 ; del_node
 00000052  7001      STRB        R1,[R0,#0x0] ; del_node
  262:         del_node->next = diallist_head->next;            // Copying head->next link to del->next        
 00000054  4800      LDR         R0,=diallist_head ; diallist_head
 00000056  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000058  6B41      LDR         R1,[R0,#0x34]
 0000005A  1C18      MOV         R0,R3 ; del_node
 0000005C  6341      STR         R1,[R0,#0x34]
  263:         del_node->prev = diallist_head;                  // del's backlink will be Head
 0000005E  4800      LDR         R0,=diallist_head ; diallist_head
 00000060  6801      LDR         R1,[R0,#0x0] ; diallist_head
 00000062  1C18      MOV         R0,R3 ; del_node
 00000064  6381      STR         R1,[R0,#0x38]
  264:         diallist_head->next = del_node;                  // Now head->next will be del (new node)
 00000066  1C18      MOV         R0,R3 ; del_node
 00000068  4800      LDR         R1,=diallist_head ; diallist_head
 0000006A  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000006C  6348      STR         R0,[R1,#0x34]
  265:         temp = del_node->next;                           // Assigning backlink of node next to del (new node) 
 0000006E  1C18      MOV         R0,R3 ; del_node
 00000070  6B42      LDR         R2,[R0,#0x34]
  266:         temp->prev = del_node;                            
 00000072  1C18      MOV         R0,R3 ; del_node
 00000074  1C11      MOV         R1,R2 ; temp
 00000076  6388      STR         R0,[R1,#0x38]
  267:     }
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 18  

 00000078          L_39:
 00000078            ; SCOPE-END
  268: }
 00000078  BC70      POP         {R4-R6}
 0000007A  4770      BX          R14
 0000007C          ENDP ; 'GSM_APP_diallist_delete?T'


*** CODE SEGMENT '?PR?GSM_APP_options?T?gsm_app':
  277: U8 GSM_APP_options(U8 **opt_disp, U8 opt_cnt)           // *opt_disp is an array of pointers, were each pointer will poin
             -t  
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C0F      MOV         R7,R1 ; opt_cnt
 00000004  ---- Variable 'opt_cnt' assigned to Register 'R7' ----
 00000004  1C06      MOV         R6,R0 ; opt_disp
 00000006  ---- Variable 'opt_disp' assigned to Register 'R6' ----
 00000006  B081      SUB         R13,#0x4
  278: {                                                        // to the option menu to be displayed
 00000008            ; SCOPE-START
  279:     U8 temp_key = 0;    
 00000008  2500      MOV         R5,#0x0
 0000000A  ---- Variable 'temp_key' assigned to Register 'R5' ----
  280:     U8 uc_cnt = 1;
 0000000A  2401      MOV         R4,#0x1
 0000000C  ---- Variable 'uc_cnt' assigned to Register 'R4' ----
  282:     ms_delay(1000);                                     // This delay is usefull in avoiding any spurious enterance into the loop.
 0000000C  48FA      LDR         R0,=0x3E8
 0000000E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000010  FFF7      BL          ms_delay?T  ; T=0x0001  (2)
  284:     while(temp_key != 'D')
 00000012  E050      B           L_44  ; T=0x000000B6
 00000014          L_46:
  286:          lcd_line_disp("                    ", 0, 3);
 00000014  4800      LDR         R0,=??S_13 ; ??S_13
 00000016  2100      MOV         R1,#0x0
 00000018  2203      MOV         R2,#0x3
 0000001A  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          lcd_line_disp?T  ; T=0x0001  (2)
  287:         lcd_line_disp("                    ", 0, 4);
 0000001E  4800      LDR         R0,=??S_13 ; ??S_13
 00000020  2100      MOV         R1,#0x0
 00000022  2204      MOV         R2,#0x4
 00000024  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000026  FFEC      BL          lcd_line_disp?T  ; T=0x0001  (2)
  288:         temp_ptr = opt_disp + (uc_cnt - 1);
 00000028  1C20      MOV         R0,R4 ; uc_cnt
 0000002A  0601      LSL         R1,R0,#0x18 ; uc_cnt
 0000002C  0E09      LSR         R1,R1,#0x18
 0000002E  0089      LSL         R1,R1,#0x2
 00000030  1C30      MOV         R0,R6 ; opt_disp
 00000032  1840      ADD         R0,R1 ; opt_disp
 00000034  4800      LDR         R1,=0xFFFFFFFC
 00000036  1840      ADD         R0,R1
 00000038  9000      STR         R0,[R13,#0x0] ; temp_ptr
  289:         lcd_line_disp(*temp_ptr, 0, 3);
 0000003A  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 0000003C  6800      LDR         R0,[R0,#0x0]
 0000003E  2100      MOV         R1,#0x0
 00000040  2203      MOV         R2,#0x3
 00000042  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000044  FFDD      BL          lcd_line_disp?T  ; T=0x0001  (2)
  290:         temp_ptr++;
 00000046  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 00000048  3004      ADD         R0,#0x4
 0000004A  9000      STR         R0,[R13,#0x0] ; temp_ptr
  291:         lcd_line_disp(*temp_ptr, 0, 4);
 0000004C  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 0000004E  6800      LDR         R0,[R0,#0x0]
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 19  

 00000050  2100      MOV         R1,#0x0
 00000052  2204      MOV         R2,#0x4
 00000054  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000056  FFD4      BL          lcd_line_disp?T  ; T=0x0001  (2)
  293:          temp_key = get_key(1);
 00000058  2001      MOV         R0,#0x1
 0000005A  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000005C  FFD1      BL          get_key?T  ; T=0x0001  (2)
 0000005E  1C05      MOV         R5,R0 ; temp_key
  294:         ms_delay(350);
 00000060  4800      LDR         R0,=0x15E
 00000062  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000064  FFCD      BL          ms_delay?T  ; T=0x0001  (2)
  295:         if(temp_key == 'B')
 00000066  1C28      MOV         R0,R5 ; temp_key
 00000068  0600      LSL         R0,R0,#0x18 ; temp_key
 0000006A  0E00      LSR         R0,R0,#0x18
 0000006C  2842      CMP         R0,#0x42
 0000006E  D108      BNE         L_48  ; T=0x00000082
  297:             if(uc_cnt >1)
 00000070  1C20      MOV         R0,R4 ; uc_cnt
 00000072  0600      LSL         R0,R0,#0x18 ; uc_cnt
 00000074  0E00      LSR         R0,R0,#0x18
 00000076  2801      CMP         R0,#0x1
 00000078  DD1D      BLE         L_44  ; T=0x000000B6
  299:                 uc_cnt -= 1;
 0000007A  3C01      SUB         R4,#0x1
 0000007C  0624      LSL         R4,R4,#0x18
 0000007E  0E24      LSR         R4,R4,#0x18
  301:         }
 00000080  E019      B           L_44  ; T=0x000000B6
 00000082          L_48:
  302:         else if(temp_key == 'C')
 00000082  1C28      MOV         R0,R5 ; temp_key
 00000084  0600      LSL         R0,R0,#0x18 ; temp_key
 00000086  0E00      LSR         R0,R0,#0x18
 00000088  2843      CMP         R0,#0x43
 0000008A  D10B      BNE         L_51  ; T=0x000000A4
  304:             if(uc_cnt < opt_cnt)
 0000008C  1C38      MOV         R0,R7 ; opt_cnt
 0000008E  0601      LSL         R1,R0,#0x18 ; opt_cnt
 00000090  0E09      LSR         R1,R1,#0x18
 00000092  1C20      MOV         R0,R4 ; uc_cnt
 00000094  0600      LSL         R0,R0,#0x18 ; uc_cnt
 00000096  0E00      LSR         R0,R0,#0x18
 00000098  4288      CMP         R0,R1
 0000009A  D20C      BCS         L_44  ; T=0x000000B6
  306:                 uc_cnt += 1;
 0000009C  3401      ADD         R4,#0x1
 0000009E  0624      LSL         R4,R4,#0x18
 000000A0  0E24      LSR         R4,R4,#0x18
  308:         }  
 000000A2  E008      B           L_44  ; T=0x000000B6
 000000A4          L_51:
  309:         else if(temp_key == 'E')
 000000A4  1C28      MOV         R0,R5 ; temp_key
 000000A6  0600      LSL         R0,R0,#0x18 ; temp_key
 000000A8  0E00      LSR         R0,R0,#0x18
 000000AA  2845      CMP         R0,#0x45
 000000AC  D103      BNE         L_44  ; T=0x000000B6
  311:             return uc_cnt;
 000000AE  1C20      MOV         R0,R4 ; uc_cnt
 000000B0  0600      LSL         R0,R0,#0x18 ; uc_cnt
 000000B2  0E00      LSR         R0,R0,#0x18
 000000B4  E00A      B           L_55  ; T=0x000000CC
  313:       }
ARM COMPILER V2.50a,  gsm_app                                                              22/05/13  17:19:51  PAGE 20  

 000000B6          L_44:
 000000B6  1C28      MOV         R0,R5 ; temp_key
 000000B8  0600      LSL         R0,R0,#0x18 ; temp_key
 000000BA  0E00      LSR         R0,R0,#0x18
 000000BC  2844      CMP         R0,#0x44
 000000BE  D1A9      BNE         L_46  ; T=0x00000014
  314:     clrscr();
 000000C0  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000C2  FF9E      BL          clrscr?T  ; T=0x0001  (2)
  315:     ms_delay(1000);             // delay to avoid reentry in to this function
 000000C4  48FA      LDR         R0,=0x3E8
 000000C6  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 000000C8  FF9B      BL          ms_delay?T  ; T=0x0001  (2)
  316:     return 0;       
 000000CA  2000      MOV         R0,#0x0
 000000CC            ; SCOPE-END
  317: }
 000000CC          L_55:
 000000CC  B001      ADD         R13,#0x4
 000000CE  BCF0      POP         {R4-R7}
 000000D0  BC08      POP         {R3}
 000000D2  4718      BX          R3
 000000D4          ENDP ; 'GSM_APP_options?T'


*** CODE SEGMENT '?PR?GSM_APP_deleteall?T?gsm_app':
  327:  void GSM_APP_deleteall(DIAL *list_tail)
 00000000  1C02      MOV         R2,R0 ; list_tail
 00000002  ---- Variable 'list_tail' assigned to Register 'R2' ----
  328:  {
 00000002            ; SCOPE-START
  330:     temp_ptr = list_tail;
 00000002  1C10      MOV         R0,R2 ; list_tail
 00000004  ---- Variable 'temp_ptr' assigned to Register 'R0' ----
  331:     while(temp_ptr->cnt == NOT_FREE)
 00000004  E003      B           L_56  ; T=0x0000000E
 00000006          L_58:
  333:         temp_ptr->cnt = FREE;             // Setting node->cnt = FREE, which means node is deleted 
 00000006  2300      MOV         R3,#0x0
 00000008  1C01      MOV         R1,R0 ; temp_ptr
 0000000A  700B      STRB        R3,[R1,#0x0] ; temp_ptr
  334:         temp_ptr = temp_ptr->next;        // traversing to the next node through link list 
 0000000C  6B40      LDR         R0,[R0,#0x34]
  335:     }
 0000000E          L_56:
 0000000E  1C01      MOV         R1,R0 ; temp_ptr
 00000010  7809      LDRB        R1,[R1,#0x0] ; temp_ptr
 00000012  2901      CMP         R1,#0x1
 00000014  D0F7      BEQ         L_58  ; T=0x00000006
  336:       diallist_head = list_tail;              // changing global pointer dialist_head
 00000016  1C11      MOV         R1,R2 ; list_tail
 00000018  4800      LDR         R0,=diallist_head ; diallist_head
 0000001A  6001      STR         R1,[R0,#0x0] ; diallist_head
 0000001C            ; SCOPE-END
  337:  }
 0000001C  4770      BX          R14
 0000001E          ENDP ; 'GSM_APP_deleteall?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =      1208
  const size           =       192
End of Module Information.


ARM COMPILATION COMPLETE.  31 WARNING(S),  0 ERROR(S)
