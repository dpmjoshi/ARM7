ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE gsm_app
OBJECT MODULE PLACED IN gsm_app.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe gsm_app.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          
    3          DIAL diallist[20];
    4          DIAL *diallist_head;
    5          DIAL *diallist_tail;
    6          
    7          CONTACT contactlist[50];
    8          CONTACT *contactlist_head;
    9          CONTACT *contactlist_tail;
   10          
   11          
   12          void GSM_APP_call(U8 *phone_no)
   13          {
   14   1          U8 Uc_dial_stat = 0;
   15   1          
   16   1          Uc_dial_stat = APP_phone_dial(phone_no);   // The phone_dial function deals with the dialling facility
   17   1          
   18   1          if(Uc_dial_stat == 1)                          // it also handles the end of call and cancelled call 
   19   1          {                                              // it returns a dial_stat for diff actions               
             -                              
   20   2              clrscr();                                  // dial_stat = 0 => Cancel a call
   21   2              ms_delay(10000);                           // dial_stat = 1 => make a call
   22   2              lcd_line_disp("Calling...", 0, 3);         // dial_stat = 2 => End a call
   23   2              lcd_line_disp("End Call", 12, 4);
   24   2              lcd_line_disp(phone_no, 0, 2);
   25   2              gsm_voice_call(phone_no);
   26   2              rtc_get_time(time);
   27   2              rtc_get_date(&date[0]);
   28   2              GSM_APP_diallist_update(phone_no, time);
   29   2          }
   30   1          else if(Uc_dial_stat == 0)
   31   1          {
   32   2              clrscr();
   33   2              ms_delay(5000);
   34   2              lcd_line_disp("Call Cancelled !", 0, 2);
   35   2              ms_delay(20000);
   36   2              APP_default_page();
   37   2          }
   38   1          else if(Uc_dial_stat == 2)
   39   1          {
   40   2              clrscr();
   41   2              ms_delay(20000);
   42   2              APP_default_page();
   43   2          }   
   44   1      }
   45          
   46          /**********************************************************************************/
   47          /* Function Name: GSM_APP_diallist_init                                           */
   48          /* Arguments    : U8 diallist_size - Configurable size of diallist, limited to 20 */
   49          /* Return Types :                                                                 */
   50          /* Description  :                                                                 */
   51          /**********************************************************************************/
   52          
   53          void GSM_APP_diallist_init(U8 diallist_size)
   54          {
   55   1          DIAL *caller1;
   56   1          DIAL *caller2;
   57   1       
   58   1          caller1 = &diallist[0];
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 2   

   59   1          caller2 = &diallist[1];
   60   1      
   61   1          while(diallist_size)                  // Preparing a doubly link list 
   62   1          {                                     
   63   2              caller2->prev = caller1;          
   64   2              caller1->next = caller2;    
   65   2              caller1->cnt  = FREE;
   66   2              caller1++;
   67   2              caller2++;
   68   2              diallist_size--; 
   69   2          }
   70   1      
   71   1          diallist_head  = &diallist[0];         // Assigning Head of the list
   72   1          diallist_tail  = diallist_head;        // At initialization Head & Tail are same.
   73   1          caller1->next  = &diallist[0];         // making list circular. Caller1 is incremented in while and hence it
             - will be the last no.
   74   1          diallist_head->prev = caller1;         // providing a back link to the Head of list
   75   1      }
   76          
   77          /**********************************************************************************/
   78          /* Function Name: GSM_APP_diallist_show                                           */
   79          /* Arguments    : *phone_no                                                       */
   80          /* Return Types :                                                                 */
   81          /* Description  :                                                                 */
   82          /**********************************************************************************/
   83          
   84          U8 GSM_APP_diallist_show()
   85          {
   86   1          U8 uc_cnt = 0;
   87   1          U8 key_temp = 0;
   88   1          U8 opt = 0;
   89   1          U8 *diallist_opt[10] = {"Call", "Delete", "Clear List", "Exit", " "};
   90   1          
   91   1          DIAL *diallist_temp;
   92   1          DIAL *diallist_first;
   93   1          DIAL *temp;
   94   1        
   95   1          clrscr();
   96   1      
   97   1          lcd_line_disp("Delete", 0, 4);
   98   1          lcd_line_disp("Exit", 12, 4);
   99   1          diallist_temp = diallist_head->prev;  // diallist_head 's prev node is allocated to diallist_temp    
  100   1          diallist_first = diallist_head->prev; // diallist_head 's prev node is allocated to diallist_first   
  101   1          while(1)
  102   1          {       
  103   2              for(uc_cnt = 1; uc_cnt < 4; uc_cnt++)   //   
  104   2              {
  105   3                  if(diallist_temp->cnt == NOT_FREE)
  106   3                  {
  107   4                      lcd_line_disp(diallist_temp->no, 0, uc_cnt);
  108   4                      lcd_line_disp(diallist_temp->time, 8, uc_cnt);
  109   4                      diallist_temp = diallist_temp->prev;    
  110   4                  }
  111   3              }
  112   2              lcd_line_disp("Options", 0, 4);
  113   2              lcd_line_disp("Exit", 12, 4);
  114   2              key_temp = get_key(1);
  115   2              ms_delay(100);
  116   2      
  117   2              if(key_temp == 'D')
  118   2              {
  119   3                  APP_default_page();
  120   3                  return 0;
  121   3              }
  122   2      
  123   2              else if(key_temp == 'E')
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 3   

  124   2              {
  125   3                  opt =  GSM_APP_options(diallist_opt, 4);
  126   3                  
  127   3                  if(opt == 1)
  128   3                  {
  129   4                      
  130   4                  }
  131   3                  else if(opt == 2)
  132   3                  {
  133   4                      diallist_temp = diallist_first->prev;
  134   4                      GSM_APP_diallist_delete(diallist_first);
  135   4                      diallist_first = diallist_temp;
  136   4                      clrscr();       
  137   4      
  138   4                      uart0_tx_string("\r\n\ndiallist First: ");
  139   4                      uart0_tx_string(diallist_first->no);
  140   4                  
  141   4                      temp  = diallist_head->prev;
  142   4                      uart0_tx_string("\r\ndiallist Head: ");
  143   4                      uart0_tx_string(temp->no);
  144   4      
  145   4                      uart0_tx_string("\r\ndiallist Tail: ");
  146   4                      uart0_tx_string(diallist_tail->no);
  147   4                  }
  148   3                  else if(opt == 3)
  149   3                  {
  150   4                      // clear_list function which must be generic, so that we can use it in any other 
  151   4                      // mobile services. it is like delete all option. 
  152   4                       GSM_APP_deleteall(diallist_tail);
  153   4                       clrscr();
  154   4                  }
  155   3      
  156   3              }
  157   2              else if(key_temp == 'C')   // Scroll DOWN                                                
  158   2              {
  159   3                  diallist_temp  = diallist_first->prev;
  160   3                  if(diallist_temp->cnt == NOT_FREE)
  161   3                  {
  162   4                      clrscr();
  163   4                      diallist_first = diallist_first->prev;
  164   4      
  165   4                      uart0_tx_string("\r\n\ndiallist First: ");
  166   4                      uart0_tx_string(diallist_first->no);
  167   4      
  168   4                      temp  = diallist_head->prev;
  169   4                      uart0_tx_string("\r\ndiallist Head: ");
  170   4                      uart0_tx_string(temp->no);
  171   4                  }
  172   3                  else
  173   3                  {
  174   4                      diallist_temp  = diallist_first;    
  175   4                  }
  176   3      
  177   3              }
  178   2              else if(key_temp == 'B')    // Scroll UP
  179   2              {
  180   3                  diallist_temp  = diallist_first->next;  
  181   3                  if(diallist_temp->cnt == NOT_FREE)
  182   3                  {
  183   4                      clrscr();
  184   4                      diallist_first = diallist_first->next;
  185   4                      
  186   4                      uart0_tx_string("\r\n\ndiallist First: ");
  187   4                      uart0_tx_string(diallist_first->no);
  188   4      
  189   4                      temp  = diallist_head->prev;
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 4   

  190   4                      uart0_tx_string("\r\ndiallist Head: ");
  191   4                      uart0_tx_string(temp->no);
  192   4                  }
  193   3                  else
  194   3                  {
  195   4                      diallist_temp  = diallist_first;    
  196   4                  }
  197   3              }
  198   2      
  199   2              diallist_temp  = diallist_first;
  200   2          }
  201   1      }
  202          
  203          /**********************************************************************************/
  204          /* Function Name: GSM_APP_diallist_update                                         */
  205          /* Arguments    : *phone_no, *time                                                */
  206          /* Return Types :                                                                 */
  207          /* Description  :                                                                 */
  208          /**********************************************************************************/
  209          
  210          void GSM_APP_diallist_update(U8 *phone_no, U8 *time)
  211          {
  212   1          LIB_str_copy(phone_no, &diallist_head->no[0], 10);   // Common part for both cases 
  213   1          LIB_str_copy(time, &diallist_head->time[0], 8);      // In any of the case New No is added at the Head of t
             -he list
  214   1          diallist_head->cnt = NOT_FREE;                       // after asigning Phone no and time stamp, the node is marked as NO
             -T_FREE
  215   1      
  216   1          if(diallist_head->next == diallist_tail)            // This is the case when list is full and hence head->next is
             - pointing to the tail 
  217   1          {
  218   2              diallist_tail = diallist_tail->next;            // Tail & Head are shifted further by one position, and we get n
             -ew Head & Tail for our list
  219   2              diallist_head = diallist_head->next;
  220   2          }                                      
  221   1          else 
  222   1          {
  223   2              diallist_head = diallist_head->next;            // Head is traversing forward when list is empty or Head->next i
             -s not tail
  224   2          }                                                   // Tail will not change till the list gets full
  225   1      }
  226          
  227          /**********************************************************************************/
  228          /* Function Name: GSM_APP_diallist_delete                                         */
  229          /* Arguments    : DIAL *del_node                                                  */
  230          /* Return Types : NONE                                                            */
  231          /* Description  : Deletes a node specified by del_node                            */
  232          /**********************************************************************************/
  233          
  234          void GSM_APP_diallist_delete(DIAL *del_node)
  235          {
  236   1          DIAL *delnext;                                      // delnext is the node next to del_node & it is used while detaching the node 
             -from 
  237   1          DIAL *temp;                                         // existing list
  238   1          
  239   1          if(del_node->cnt == NOT_FREE)                       // The node to be deleted must be a valid node, deleting empty node
             - is useless. 
  240   1          {
  241   2              delnext = del_node->next;
  242   2              if(diallist_head->next == diallist_tail)        // if Head->next is tail of list, it means that list is full
  243   2              {
  244   3                  if(del_node == diallist_head)               // case1: the deleted node itself is head,
  245   3                  {                                           // In this case we must find a new Head & Tail for the list 
  246   4                      diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
  247   4                      diallist_head = diallist_head->next;    // Head = Head->next      New Head
  248   4                  }
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 5   

  249   3              }                                               /*What if list is full & del_node is Tail ?  <------ FIX this */ 
  250   2              else 
  251   2              {
  252   3                  if(del_node == diallist_tail)               // case2: List is not full but del_node is Tail of list
  253   3                  {                                           // In this case we must find a Tail for the list 
  254   4                      diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
  255   4                                                              // When list partially filled the head is an empty node and one node ahead of last  
  256   4                  }                                           // entered number.
  257   3              }
  258   2              /* detaching del_node from its position */
  259   2              delnext->prev = del_node->prev;
  260   2              temp = del_node->prev;
  261   2              temp->next = delnext; 
  262   2              del_node->cnt  = FREE;
  263   2              /****************************************/ 
  264   2       
  265   2              /* Adding the deleted node after head */
  266   2              del_node->next = diallist_head->next;            // Copying head->next link to del->next        
  267   2              del_node->prev = diallist_head;                  // del's backlink will be Head
  268   2              diallist_head->next = del_node;                  // Now head->next will be del (new node)
  269   2              temp = del_node->next;                           // Assigning backlink of node next to del (new node) 
  270   2              temp->prev = del_node;                            
  271   2          }
  272   1      }
  273          
  274          /**********************************************************************************/
  275          /* Function Name: GSM_APP_options                                                 */
  276          /* Arguments    : U8 **opt_disp, U8 opt_cnt                                       */
  277          /* Return Types : NONE                                                            */
  278          /* Description  :                                                                 */
  279          /**********************************************************************************/
  280          
  281          U8 GSM_APP_options(U8 **opt_disp, U8 opt_cnt)           // *opt_disp is an array of pointers, were each pointer w
             -ill point  
  282          {                                                       // to the option menu to be displayed
  283   1          U8 temp_key = 0;    
  284   1          U8 uc_cnt = 1;
  285   1          U8 **temp_ptr;
  286   1          ms_delay(1000);                                     // This delay is usefull in avoiding any spurious enterance into the loop.
  287   1      
  288   1          while(temp_key != 'D')
  289   1          {
  290   2              lcd_line_disp("                    ", 0, 3);
  291   2              lcd_line_disp("                    ", 0, 4);
  292   2              temp_ptr = opt_disp + (uc_cnt - 1);
  293   2              lcd_line_disp(*temp_ptr, 0, 3);
  294   2              temp_ptr++;
  295   2              lcd_line_disp(*temp_ptr, 0, 4);
  296   2           
  297   2              temp_key = get_key(1);
  298   2              ms_delay(350);
  299   2              if(temp_key == 'B')
  300   2              {
  301   3                  if(uc_cnt >1)
  302   3                  {
  303   4                      uc_cnt -= 1;
  304   4                  }
  305   3              }
  306   2              else if(temp_key == 'C')
  307   2              {
  308   3                  if(uc_cnt < opt_cnt)
  309   3                  {
  310   4                      uc_cnt += 1;
  311   4                  }
  312   3              }  
  313   2              else if(temp_key == 'E')
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 6   

  314   2              {
  315   3                  return uc_cnt;
  316   3              }
  317   2          }
  318   1          clrscr();
  319   1          ms_delay(1000);             // delay to avoid reentry in to this function
  320   1          return 0;       
  321   1      }
  322          
  323          /**********************************************************************************/
  324          /* Function Name: GSM_APP_deleteall                                               */
  325          /* Arguments    :                                                                 */
  326          /* Return Types : NONE                                                            */
  327          /* Description  : deletes all nodes and brings head of the list back to initial   */
  328          /*                position                                                        */
  329          /**********************************************************************************/
  330           
  331           void GSM_APP_deleteall(DIAL *list_tail)
  332           {
  333   1          DIAL *temp_ptr;
  334   1          temp_ptr = list_tail;
  335   1          while(temp_ptr->cnt == NOT_FREE)
  336   1          {
  337   2              temp_ptr->cnt = FREE;             // Setting node->cnt = FREE, which means node is deleted 
  338   2              temp_ptr = temp_ptr->next;        // traversing to the next node through link list 
  339   2          }
  340   1          diallist_head = list_tail;            // changing global pointer dialist_head
  341   1       }
  342           
  343          
  344          /***************************** Contact List ***************************************/
  345          
  346          /**********************************************************************************/
  347          /* Function Name: GSM_APP_contactlist_init                                        */
  348          /* Arguments    :                                                                 */
  349          /* Return Types :                                                                 */
  350          /* Description  :                                                                 */
  351          /**********************************************************************************/
  352          void GSM_APP_contactlist_init(U8 contactlist_size)
  353          {
  354   1          CONTACT *contact1;
  355   1          CONTACT *contact2;
  356   1       
  357   1          contact1 = &contactlist[0];
  358   1          contact2 = &contactlist[1];
  359   1      
  360   1          contact1->prev_no = 0;
  361   1      
  362   1          while(contactlist_size)               // Preparing a doubly link list 
  363   1          {                                     
  364   2              contact2->prev_no = contact1;         
  365   2              contact1->next_no = contact2;   
  366   2              contact1->cnt = FREE;
  367   2              contact1++;
  368   2              contact2++;
  369   2              contactlist_size--; 
  370   2          }
  371   1      
  372   1          contact1->next_no = 0;
  373   1      
  374   1          contactlist_head    = &contactlist[0];         // Assigning Head of the list
  375   1          contactlist_tail    = contactlist_head;        // At initialization Head & Tail are same.
  376   1          // unlike diallist this list is not circular 
  377   1      }
  378          /**********************************************************************************/
  379          /* Function Name: GSM_APP_contactlist_update                                      */
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 7   

  380          /* Arguments    :                                                                 */
  381          /* Return Types :                                                                 */
  382          /* Description  :                                                                 */
  383          /**********************************************************************************/
  384          void GSM_APP_contactlist_update(U8 *no, U8 *name)
  385          {
  386   1          // sorting algorithm will first sort the new no & then will insert it at 
  387   1          // appropriate position
  388   1          U8 uc_result = 4;
  389   1          CONTACT *contact_temp;
  390   1      
  391   1          contact_temp = contactlist_tail;
  392   1          LIB_str_copy(no, &contactlist_head->no[0], 10);  // Common part for both cases 
  393   1          LIB_str_copy(name, &contactlist_head->name[0], LIB_strlen(name));        // In any of the case New No is adde
             -d at the Head of the list
  394   1          contactlist_head->cnt = NOT_FREE;
  395   1              
  396   1          //contactlist_head = new_contact;
  397   1      
  398   1          if(contactlist_tail != FREE)
  399   1          {
  400   2              while((uc_result != 2) || (contact_temp->cnt == NOT_FREE))      // comparing two nos unless New no is not g
             -reater than first one OR 
  401   2              {                                                               // we do not reach to the end of list
  402   3                  uc_result = GSM_APP_compare_no(contact_temp->no, contactlist_head->no);
  403   3                  contact_temp = contact_temp->next_no;       
  404   3              }
  405   2          
  406   2              if(contact_temp == contactlist_tail)
  407   2              {
  408   3                  contact_temp = contactlist_head; // this contdion will be true for the first time only when list is e
             -mpty
  409   3              }
  410   2              
  411   2           //contcat_temp =                    // disconnect the exsiting link
  412   2      
  413   2              
  414   2          }
  415   1          else
  416   1          {
  417   2              contactlist_tail = contactlist_head;
  418   2              contactlist_head = contactlist_tail->next_no;
  419   2      
  420   2      
  421   2          }
  422   1      
  423   1          if(contactlist_head->next_no == NOT_FREE)   // Check whether new node is available or not 
  424   1          {
  425   2              contactlist_head = contactlist_head->next_no; // finding New HEAD for the contactlist
  426   2          }
  427   1          
  428   1          
  429   1      }
  430          
  431          
  432          /**********************************************************************************/
  433          /* Function Name: GSM_APP_coompare_no                                             */
  434          /* Arguments    :                                                                 */
  435          /* Return Types :                                                                 */
  436          /* Description  :                                                                 */
  437          /**********************************************************************************/
  438          
  439          U8 GSM_APP_compare_no(U8 *no1, U8 *no2)
  440          {
  441   1          while(*no1 == *no2)
  442   1          {
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 8   

  443   2              no1++;
  444   2              no2++;
  445   2              if(*no1 == 0)
  446   2              {
  447   3                  break;
  448   3              }
  449   2          }
  450   1          if(*no1 > *no2)
  451   1          {
  452   2              return 1;
  453   2          }
  454   1          else if(*no2 > *no1)
  455   1          {
  456   2              return 2;
  457   2          }
  458   1          else if(*no1 == *no2)
  459   1          {
  460   2              return 0;
  461   2          }
  462   1      }
  463          /**********************************************************************************/
  464          /* Function Name: GSM_APP_write                                                   */
  465          /* Arguments    :                                                                 */
  466          /* Return Types :                                                                 */
  467          /* Description  :                                                                 */
  468          /**********************************************************************************/
  469          
  470          void GSM_APP_write(U8 *text_msg)
  471          {
  472   1          U8  *uc_ptr, *temp_msg;       // uc_ptr is used to navigate whithin a individual arrays of dictionary,  
  473   1          U8  cur_key = 0;              // temp_msg pointer is used as pointer to msg array
  474   1          U8  prev_key = 0;
  475   1          U8  *msg_arr[15] = {" 0", ".,;:1", "abc2", "def3", "ghi4", "jkl5", "mno6", "pqrs7", "tuv8", "wxyz9"}; 
  476   1          U8  caps = 0;                 // all the arrays above are individual arrays
  477   1      
  478   1          temp_msg = text_msg;          // taking copy of pointer.
  479   1          clrscr();
  480   1          
  481   1          while(cur_key != 'D')
  482   1          {   
  483   2              cur_key = get_key(1);
  484   2              if((cur_key >= '0')&&(cur_key <= '9'))
  485   2              {
  486   3                  if(cur_key == prev_key)         // this signifies that entered key is equal to the previous key
  487   3                  {
  488   4                      if(*(uc_ptr + 1) == 0)
  489   4                      {
  490   5                          uc_ptr = msg_arr[cur_key - 0x30];  // set the starting address if user has been reached to end of ar
             -ray
  491   5                      }
  492   4                      else
  493   4                      {                                      // increasing uc_ptr allows user to navigate through all elements of an individual arr
             -ay
  494   5                          uc_ptr++;
  495   5                      }
  496   4                      *temp_msg = *uc_ptr;         // writing a letter into msg_array
  497   4                      if(caps == 1)
  498   4                      {
  499   5                          *temp_msg -= 0x20;      // converting letters into CAPS
  500   5                      }
  501   4                  }
  502   3                  else                           // will enter in this loop when prev_key is not equal to the cur_key
  503   3                  {
  504   4                      uc_ptr = msg_arr[cur_key - 0x30];
  505   4                      temp_msg++;
  506   4                      *temp_msg = *uc_ptr;
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 9   

  507   4                      *(temp_msg + 1) = '\0';
  508   4                      prev_key = cur_key;
  509   4                  }
  510   3              }
  511   2              else if(cur_key == 'A')
  512   2              {
  513   3                  *temp_msg = ' ';
  514   3                  if(temp_msg != text_msg)
  515   3                  {
  516   4                      temp_msg--;
  517   4                  }
  518   3              }
  519   2              else if(cur_key == '.')
  520   2              {
  521   3                  if(caps == 1)
  522   3                  {
  523   4                      caps = 0;
  524   4                  }       
  525   3                  else
  526   3                  {
  527   4                      caps = 1;
  528   4                  }
  529   3              }
  530   2              lcd_line_disp(text_msg, 0, 1);
  531   2              key_delay(100);
  532   2          }
  533   1      }
  534          
  535          
*** WARNING C180 IN LINE 462 OF gsm_app.c: 'GSM_APP_compare_no?T': not every path returns a value
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (uart0_tx_string?T)
 EXTERN CODE16 (APP_phone_dial?T)
 EXTERN CODE16 (APP_default_page?T)
 EXTERN CODE16 (rtc_get_time?T)
 EXTERN CODE16 (rtc_get_date?T)
 EXTERN DATA (time)
 EXTERN DATA (date)
 EXTERN CODE16 (gsm_voice_call?T)
 EXTERN CODE16 (LIB_str_copy?T)
 EXTERN CODE16 (LIB_strlen?T)
 EXTERN CODE16 (get_key?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (lcd_line_disp?T)



*** PUBLICS:
 PUBLIC         GSM_APP_diallist_init?T
 PUBLIC         GSM_APP_diallist_update?T
 PUBLIC         GSM_APP_diallist_show?T
 PUBLIC         GSM_APP_diallist_delete?T
 PUBLIC         GSM_APP_options?T
 PUBLIC         GSM_APP_call?T
 PUBLIC         GSM_APP_deleteall?T
 PUBLIC         GSM_APP_write?T
 PUBLIC         GSM_APP_compare_no?T
 PUBLIC         GSM_APP_contactlist_init?T
 PUBLIC         GSM_APP_contactlist_update?T
 PUBLIC         diallist
 PUBLIC         diallist_head
 PUBLIC         diallist_tail
 PUBLIC         contactlist
 PUBLIC         contactlist_head
 PUBLIC         contactlist_tail



*** DATA SEGMENT '?CON?gsm_app':
 00000000          ?tpl?0001:
 00000000           BEGIN_INIT
 00000000  00000000  DD          ??S_4
 00000004  00000000  DD          ??S_5
 00000008  00000000  DD          ??S_6
 0000000C  00000000  DD          ??S_7
 00000010  00000000  DD          ??S_8
 00000014            SPACE       20
 00000028           END_INIT
 00000028          ?tpl?0002:
 00000028           BEGIN_INIT
 00000028  00000000  DD          ??S_14
 0000002C  00000000  DD          ??S_15
 00000030  00000000  DD          ??S_16
 00000034  00000000  DD          ??S_17
 00000038  00000000  DD          ??S_18
 0000003C  00000000  DD          ??S_19
 00000040  00000000  DD          ??S_20
 00000044  00000000  DD          ??S_21
 00000048  00000000  DD          ??S_22
 0000004C  00000000  DD          ??S_23
 00000050            SPACE       20
 00000064           END_INIT
 00000064          ??S_23:
 00000064            DB          'wxyz9',0x00
 0000006A          ??S_22:
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 11  

 0000006A            DB          'tuv8',0x00
 0000006F          ??S_21:
 0000006F            DB          'pqrs7',0x00
 00000075          ??S_20:
 00000075            DB          'mno6',0x00
 0000007A          ??S_19:
 0000007A            DB          'jkl5',0x00
 0000007F          ??S_18:
 0000007F            DB          'ghi4',0x00
 00000084          ??S_17:
 00000084            DB          'def3',0x00
 00000089          ??S_16:
 00000089            DB          'abc2',0x00
 0000008E          ??S_15:
 0000008E            DB          '.,;:1',0x00
 00000094          ??S_14:
 00000094            DB          ' 0',0x00
 00000097          ??S_13:
 00000097            DB          '                    ',0x00
 000000AC          ??S_12:
 000000AC            DB          0x0D,0x0A,'diallist Tail: ',0x00
 000000BE          ??S_11:
 000000BE            DB          0x0D,0x0A,'diallist Head: ',0x00
 000000D0          ??S_10:
 000000D0            DB          0x0D,0x0A,0x0A,'diallist First: ',0x00
 000000E4          ??S_9:
 000000E4            DB          'Options',0x00
 000000EC          ??S_8:
 000000EC            DB          ' ',0x00
 000000EE          ??S_7:
 000000EE            DB          'Exit',0x00
 000000F3          ??S_6:
 000000F3            DB          'Clear List',0x00
 000000FE          ??S_5:
 000000FE            DB          'Delete',0x00
 00000105          ??S_4:
 00000105            DB          'Call',0x00
 0000010A          ??S_3:
 0000010A            DB          'Call Cancelled !',0x00
 0000011B          ??S_2:
 0000011B            DB          'End Call',0x00
 00000124          ??S_1:
 00000124            DB          'Calling...',0x00

*** DATA SEGMENT '?DT0?gsm_app':
 00000000          diallist:
 00000000            DS          1200
 000004B0          diallist_head:
 000004B0            DS          4
 000004B4          diallist_tail:
 000004B4            DS          4
 000004B8          contactlist:
 000004B8            DS          3000
 00001070          contactlist_head:
 00001070            DS          4
 00001074          contactlist_tail:
 00001074            DS          4



*** CODE SEGMENT '?PR?GSM_APP_call?T?gsm_app':
   12: void GSM_APP_call(U8 *phone_no)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; phone_no
 00000004  ---- Variable 'phone_no' assigned to Register 'R5' ----
   13: {
 00000004            ; SCOPE-START
   14:     U8 Uc_dial_stat = 0;
 00000004  2400      MOV         R4,#0x0
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 12  

 00000006  ---- Variable 'Uc_dial_stat' assigned to Register 'R4' ----
   16:     Uc_dial_stat = APP_phone_dial(phone_no);   // The phone_dial function deals with the dialling facility
 00000006  1C28      MOV         R0,R5 ; phone_no
 00000008  F7FF      BL          APP_phone_dial?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          APP_phone_dial?T  ; T=0x0001  (2)
 0000000C  1C04      MOV         R4,R0 ; Uc_dial_stat
   18:     if(Uc_dial_stat == 1)                          // it also handles the end of call and cancelled call 
 0000000E  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 00000010  0E00      LSR         R0,R0,#0x18
 00000012  2801      CMP         R0,#0x1
 00000014  D121      BNE         L_1  ; T=0x0000005A
   20:         clrscr();                                  // dial_stat = 0 => Cancel a call
 00000016  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000018  FFF3      BL          clrscr?T  ; T=0x0001  (2)
   21:            ms_delay(10000);                           // dial_stat = 1 => make a call
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
   22:         lcd_line_disp("Calling...", 0, 3);         // dial_stat = 2 => End a call
 00000020  4800      LDR         R0,=??S_1 ; ??S_1
 00000022  2100      MOV         R1,#0x0
 00000024  2203      MOV         R2,#0x3
 00000026  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000028  FFEB      BL          lcd_line_disp?T  ; T=0x0001  (2)
   23:         lcd_line_disp("End Call", 12, 4);
 0000002A  4800      LDR         R0,=??S_2 ; ??S_2
 0000002C  210C      MOV         R1,#0xC
 0000002E  2204      MOV         R2,#0x4
 00000030  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000032  FFE6      BL          lcd_line_disp?T  ; T=0x0001  (2)
   24:         lcd_line_disp(phone_no, 0, 2);
 00000034  1C28      MOV         R0,R5 ; phone_no
 00000036  2100      MOV         R1,#0x0
 00000038  2202      MOV         R2,#0x2
 0000003A  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_line_disp?T  ; T=0x0001  (2)
   25:         gsm_voice_call(phone_no);
 0000003E  1C28      MOV         R0,R5 ; phone_no
 00000040  F7FF      BL          gsm_voice_call?T  ; T=0x0001  (1)
 00000042  FFDE      BL          gsm_voice_call?T  ; T=0x0001  (2)
   26:         rtc_get_time(time);
 00000044  4800      LDR         R0,=time ; time
 00000046  F7FF      BL          rtc_get_time?T  ; T=0x0001  (1)
 00000048  FFDB      BL          rtc_get_time?T  ; T=0x0001  (2)
   27:         rtc_get_date(&date[0]);
 0000004A  4800      LDR         R0,=date ; date
 0000004C  F7FF      BL          rtc_get_date?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          rtc_get_date?T  ; T=0x0001  (2)
   28:         GSM_APP_diallist_update(phone_no, time);
 00000050  1C28      MOV         R0,R5 ; phone_no
 00000052  4800      LDR         R1,=time ; time
 00000054  F7FF      BL          GSM_APP_diallist_update?T  ; T=0x0001  (1)
 00000056  FFD4      BL          GSM_APP_diallist_update?T  ; T=0x0001  (2)
   29:     }
 00000058  E020      B           L_2  ; T=0x0000009C
 0000005A          L_1:
   30:     else if(Uc_dial_stat == 0)
 0000005A  1C20      MOV         R0,R4 ; Uc_dial_stat
 0000005C  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 0000005E  0E00      LSR         R0,R0,#0x18
 00000060  2800      CMP         R0,#0x0
 00000062  D10F      BNE         L_3  ; T=0x00000084
   32:          clrscr();
 00000064  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000066  FFCC      BL          clrscr?T  ; T=0x0001  (2)
   33:            ms_delay(5000);
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 13  

 00000068  4800      LDR         R0,=0x1388
 0000006A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000006C  FFC9      BL          ms_delay?T  ; T=0x0001  (2)
   34:         lcd_line_disp("Call Cancelled !", 0, 2);
 0000006E  4800      LDR         R0,=??S_3 ; ??S_3
 00000070  2100      MOV         R1,#0x0
 00000072  2202      MOV         R2,#0x2
 00000074  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000076  FFC4      BL          lcd_line_disp?T  ; T=0x0001  (2)
   35:         ms_delay(20000);
 00000078  4800      LDR         R0,=0x4E20
 0000007A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          ms_delay?T  ; T=0x0001  (2)
   36:         APP_default_page();
 0000007E  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 00000080  FFBF      BL          APP_default_page?T  ; T=0x0001  (2)
   37:     }
 00000082  E00B      B           L_2  ; T=0x0000009C
 00000084          L_3:
   38:     else if(Uc_dial_stat == 2)
 00000084  1C20      MOV         R0,R4 ; Uc_dial_stat
 00000086  0600      LSL         R0,R0,#0x18 ; Uc_dial_stat
 00000088  0E00      LSR         R0,R0,#0x18
 0000008A  2802      CMP         R0,#0x2
 0000008C  D106      BNE         L_2  ; T=0x0000009C
   40:         clrscr();
 0000008E  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000090  FFB7      BL          clrscr?T  ; T=0x0001  (2)
   41:         ms_delay(20000);
 00000092  4800      LDR         R0,=0x4E20
 00000094  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000096  FFB4      BL          ms_delay?T  ; T=0x0001  (2)
   42:         APP_default_page();
 00000098  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 0000009A  FFB2      BL          APP_default_page?T  ; T=0x0001  (2)
   43:     }    
 0000009C          L_2:
 0000009C            ; SCOPE-END
   44: }
 0000009C  BC30      POP         {R4-R5}
 0000009E  BC08      POP         {R3}
 000000A0  4718      BX          R3
 000000A2          ENDP ; 'GSM_APP_call?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_init?T?gsm_app':
   53: void GSM_APP_diallist_init(U8 diallist_size)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'diallist_size' assigned to Register 'R0' ----
   54: {
 00000002            ; SCOPE-START
   58:     caller1 = &diallist[0];
 00000002  4800      LDR         R2,=diallist ; diallist
 00000004  ---- Variable 'caller1' assigned to Register 'R2' ----
   59:     caller2 = &diallist[1];
 00000004  4800      LDR         R1,=diallist + 0x3C ; diallist+60
 00000006  ---- Variable 'caller2' assigned to Register 'R1' ----
   61:      while(diallist_size)                 // Preparing a doubly link list 
 00000006  E00D      B           L_6  ; T=0x00000024
 00000008          L_8:
   63:          caller2->prev = caller1;          
 00000008  1C13      MOV         R3,R2 ; caller1
 0000000A  1C0C      MOV         R4,R1 ; caller2
 0000000C  63A3      STR         R3,[R4,#0x38]
   64:         caller1->next = caller2;    
 0000000E  1C0B      MOV         R3,R1 ; caller2
 00000010  1C14      MOV         R4,R2 ; caller1
 00000012  6363      STR         R3,[R4,#0x34]
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 14  

   65:         caller1->cnt  = FREE;
 00000014  2400      MOV         R4,#0x0
 00000016  1C13      MOV         R3,R2 ; caller1
 00000018  701C      STRB        R4,[R3,#0x0] ; caller1
   66:         caller1++;
 0000001A  323C      ADD         R2,#0x3C
   67:         caller2++;
 0000001C  313C      ADD         R1,#0x3C
   68:         diallist_size--; 
 0000001E  3801      SUB         R0,#0x1
 00000020  0600      LSL         R0,R0,#0x18
 00000022  0E00      LSR         R0,R0,#0x18
   69:      }
 00000024          L_6:
 00000024  1C03      MOV         R3,R0 ; diallist_size
 00000026  2B00      CMP         R3,#0x0 ; diallist_size
 00000028  D1EE      BNE         L_8  ; T=0x00000008
   71:     diallist_head  = &diallist[0];         // Assigning Head of the list
 0000002A  4800      LDR         R1,=diallist ; diallist
 0000002C  4800      LDR         R0,=diallist_head ; diallist_head
 0000002E  6001      STR         R1,[R0,#0x0] ; diallist_head
   72:     diallist_tail  = diallist_head;        // At initialization Head & Tail are same.
 00000030  4800      LDR         R0,=diallist_head ; diallist_head
 00000032  6801      LDR         R1,[R0,#0x0] ; diallist_head
 00000034  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000036  6001      STR         R1,[R0,#0x0] ; diallist_tail
   73:     caller1->next  = &diallist[0];         // making list circular. Caller1 is incremented in while and hence it will be
             - the last no.
 00000038  4800      LDR         R0,=diallist ; diallist
 0000003A  1C11      MOV         R1,R2 ; caller1
 0000003C  6348      STR         R0,[R1,#0x34]
   74:     diallist_head->prev = caller1;         // providing a back link to the Head of list
 0000003E  1C10      MOV         R0,R2 ; caller1
 00000040  4800      LDR         R1,=diallist_head ; diallist_head
 00000042  6809      LDR         R1,[R1,#0x0] ; diallist_head
 00000044  6388      STR         R0,[R1,#0x38]
 00000046            ; SCOPE-END
   75: }
 00000046  BC10      POP         {R4}
 00000048  4770      BX          R14
 0000004A          ENDP ; 'GSM_APP_diallist_init?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_show?T?gsm_app':
   84: U8 GSM_APP_diallist_show()
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  B08D      SUB         R13,#0x34
 00000004  ---- Variable 'temp' assigned to Register 'R5' ----
   85: {
 00000004            ; SCOPE-START
   86:     U8 uc_cnt = 0;
 00000004  2100      MOV         R1,#0x0
 00000006  A800      ADD         R0,R13,#0x0
 00000008  7001      STRB        R1,[R0,#0x0] ; uc_cnt
   87:     U8 key_temp = 0;
 0000000A  A801      ADD         R0,R13,#0x4
 0000000C  7001      STRB        R1,[R0,#0x0] ; key_temp
   88:     U8 opt = 0;
 0000000E  A802      ADD         R0,R13,#0x8
 00000010  7001      STRB        R1,[R0,#0x0] ; opt
   89:     U8 *diallist_opt[10] = {"Call", "Delete", "Clear List", "Exit", " "};
 00000012  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000014  A803      ADD         R0,R13,#0xC
 00000016  2228      MOV         R2,#0x28
 00000018          L_101:
 00000018  780B      LDRB        R3,[R1,#0x0]
 0000001A  7003      STRB        R3,[R0,#0x0]
 0000001C  1C49      ADD         R1,R1,#0x1
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 15  

 0000001E  1C40      ADD         R0,R0,#0x1
 00000020  1E52      SUB         R2,R2,#0x1
 00000022  D1F9      BNE         L_101  ; T=0x00000018
   95:     clrscr();
 00000024  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000026  FFEC      BL          clrscr?T  ; T=0x0001  (2)
   97:     lcd_line_disp("Delete", 0, 4);
 00000028  4800      LDR         R0,=??S_5 ; ??S_5
 0000002A  2100      MOV         R1,#0x0
 0000002C  2204      MOV         R2,#0x4
 0000002E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000030  FFE7      BL          lcd_line_disp?T  ; T=0x0001  (2)
   98:     lcd_line_disp("Exit", 12, 4);
 00000032  4800      LDR         R0,=??S_7 ; ??S_7
 00000034  210C      MOV         R1,#0xC
 00000036  2204      MOV         R2,#0x4
 00000038  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          lcd_line_disp?T  ; T=0x0001  (2)
   99:     diallist_temp = diallist_head->prev;  // diallist_head 's prev node is allocated to diallist_temp    
 0000003C  4800      LDR         R0,=diallist_head ; diallist_head
 0000003E  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000040  6B86      LDR         R6,[R0,#0x38]
 00000042  1C37      MOV         R7,R6 ; diallist_temp
 00000044  ---- Variable 'diallist_temp' assigned to Register 'R7' ----
  100:     diallist_first = diallist_head->prev; // diallist_head 's prev node is allocated to diallist_first   
 00000044  ---- Variable 'diallist_first' assigned to Register 'R6' ----
  103:         for(uc_cnt = 1; uc_cnt < 4; uc_cnt++)   //   
 00000044          L_18:
 00000044  2001      MOV         R0,#0x1
 00000046  AC00      ADD         R4,R13,#0x0
 00000048  7020      STRB        R0,[R4,#0x0] ; uc_cnt
 0000004A  E018      B           L_16  ; T=0x0000007E
 0000004C          L_17:
  105:             if(diallist_temp->cnt == NOT_FREE)
 0000004C  1C38      MOV         R0,R7 ; diallist_temp
 0000004E  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
 00000050  2801      CMP         R0,#0x1
 00000052  D110      BNE         L_14  ; T=0x00000076
  107:                 lcd_line_disp(diallist_temp->no, 0, uc_cnt);
 00000054  7820      LDRB        R0,[R4,#0x0] ; uc_cnt
 00000056  1C02      MOV         R2,R0
 00000058  1C38      MOV         R0,R7 ; diallist_temp
 0000005A  3001      ADD         R0,#0x1
 0000005C  2100      MOV         R1,#0x0
 0000005E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000060  FFCF      BL          lcd_line_disp?T  ; T=0x0001  (2)
  108:                 lcd_line_disp(diallist_temp->time, 8, uc_cnt);
 00000062  A800      ADD         R0,R13,#0x0
 00000064  7800      LDRB        R0,[R0,#0x0] ; uc_cnt
 00000066  1C02      MOV         R2,R0
 00000068  1C38      MOV         R0,R7 ; diallist_temp
 0000006A  3029      ADD         R0,#0x29
 0000006C  2108      MOV         R1,#0x8
 0000006E  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000070  FFC7      BL          lcd_line_disp?T  ; T=0x0001  (2)
  109:                 diallist_temp = diallist_temp->prev;    
 00000072  1C38      MOV         R0,R7 ; diallist_temp
 00000074  6B87      LDR         R7,[R0,#0x38]
  111:           }
 00000076          L_14:
 00000076  A800      ADD         R0,R13,#0x0
 00000078  7801      LDRB        R1,[R0,#0x0] ; uc_cnt
 0000007A  3101      ADD         R1,#0x1
 0000007C  7001      STRB        R1,[R0,#0x0] ; uc_cnt
 0000007E          L_16:
 0000007E  A800      ADD         R0,R13,#0x0
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 16  

 00000080  7800      LDRB        R0,[R0,#0x0] ; uc_cnt
 00000082  2804      CMP         R0,#0x4
 00000084  DBE2      BLT         L_17  ; T=0x0000004C
  112:         lcd_line_disp("Options", 0, 4);
 00000086  4800      LDR         R0,=??S_9 ; ??S_9
 00000088  2100      MOV         R1,#0x0
 0000008A  2204      MOV         R2,#0x4
 0000008C  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          lcd_line_disp?T  ; T=0x0001  (2)
  113:         lcd_line_disp("Exit", 12, 4);
 00000090  4800      LDR         R0,=??S_7 ; ??S_7
 00000092  210C      MOV         R1,#0xC
 00000094  2204      MOV         R2,#0x4
 00000096  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000098  FFB3      BL          lcd_line_disp?T  ; T=0x0001  (2)
  114:         key_temp = get_key(1);
 0000009A  2001      MOV         R0,#0x1
 0000009C  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          get_key?T  ; T=0x0001  (2)
 000000A0  A901      ADD         R1,R13,#0x4
 000000A2  7008      STRB        R0,[R1,#0x0] ; key_temp
  115:         ms_delay(100);
 000000A4  2064      MOV         R0,#0x64
 000000A6  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 000000A8  FFAB      BL          ms_delay?T  ; T=0x0001  (2)
  117:         if(key_temp == 'D')
 000000AA  A801      ADD         R0,R13,#0x4
 000000AC  7800      LDRB        R0,[R0,#0x0] ; key_temp
 000000AE  2844      CMP         R0,#0x44
 000000B0  D104      BNE         L_20  ; T=0x000000BC
  119:             APP_default_page();
 000000B2  F7FF      BL          APP_default_page?T  ; T=0x0001  (1)
 000000B4  FFA5      BL          APP_default_page?T  ; T=0x0001  (2)
  120:             return 0;
 000000B6  2400      MOV         R4,#0x0
 000000B8  1C20      MOV         R0,R4
 000000BA  E080      B           L_21  ; T=0x000001BE
  121:         }
 000000BC          L_20:
  123:         else if(key_temp == 'E')
 000000BC  A801      ADD         R0,R13,#0x4
 000000BE  7800      LDRB        R0,[R0,#0x0] ; key_temp
 000000C0  2845      CMP         R0,#0x45
 000000C2  D137      BNE         L_23  ; T=0x00000134
  125:             opt =  GSM_APP_options(diallist_opt, 4);
 000000C4  A803      ADD         R0,R13,#0xC
 000000C6  2104      MOV         R1,#0x4
 000000C8  F7FF      BL          GSM_APP_options?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          GSM_APP_options?T  ; T=0x0001  (2)
 000000CC  A902      ADD         R1,R13,#0x8
 000000CE  7008      STRB        R0,[R1,#0x0] ; opt
  127:             if(opt == 1)
 000000D0  7808      LDRB        R0,[R1,#0x0] ; opt
 000000D2  2801      CMP         R0,#0x1
 000000D4  D071      BEQ         L_22  ; T=0x000001BA
  131:             else if(opt == 2)
 000000D6  2802      CMP         R0,#0x2
 000000D8  D121      BNE         L_26  ; T=0x0000011E
  133:                 diallist_temp = diallist_first->prev;
 000000DA  1C30      MOV         R0,R6 ; diallist_first
 000000DC  6B87      LDR         R7,[R0,#0x38]
  134:                 GSM_APP_diallist_delete(diallist_first);
 000000DE  1C30      MOV         R0,R6 ; diallist_first
 000000E0  F7FF      BL          GSM_APP_diallist_delete?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          GSM_APP_diallist_delete?T  ; T=0x0001  (2)
  135:                 diallist_first = diallist_temp;
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 17  

 000000E4  1C3E      MOV         R6,R7 ; diallist_temp
  136:                 clrscr();       
 000000E6  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000E8  FF8B      BL          clrscr?T  ; T=0x0001  (2)
  138:                 uart0_tx_string("\r\n\ndiallist First: ");
 000000EA  4800      LDR         R0,=??S_10 ; ??S_10
 000000EC  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000000EE  FF88      BL          uart0_tx_string?T  ; T=0x0001  (2)
  139:                 uart0_tx_string(diallist_first->no);
 000000F0  1C30      MOV         R0,R6 ; diallist_first
 000000F2  3001      ADD         R0,#0x1
 000000F4  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000000F6  FF84      BL          uart0_tx_string?T  ; T=0x0001  (2)
  141:                 temp  = diallist_head->prev;
 000000F8  4800      LDR         R0,=diallist_head ; diallist_head
 000000FA  6800      LDR         R0,[R0,#0x0] ; diallist_head
 000000FC  6B85      LDR         R5,[R0,#0x38]
  142:                 uart0_tx_string("\r\ndiallist Head: ");
 000000FE  4800      LDR         R0,=??S_11 ; ??S_11
 00000100  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000102  FF7E      BL          uart0_tx_string?T  ; T=0x0001  (2)
  143:                 uart0_tx_string(temp->no);
 00000104  1C28      MOV         R0,R5 ; temp
 00000106  3001      ADD         R0,#0x1
 00000108  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000010A  FF7A      BL          uart0_tx_string?T  ; T=0x0001  (2)
  145:                 uart0_tx_string("\r\ndiallist Tail: ");
 0000010C  4800      LDR         R0,=??S_12 ; ??S_12
 0000010E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000110  FF77      BL          uart0_tx_string?T  ; T=0x0001  (2)
  146:                 uart0_tx_string(diallist_tail->no);
 00000112  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000114  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 00000116  3001      ADD         R0,#0x1
 00000118  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000011A  FF72      BL          uart0_tx_string?T  ; T=0x0001  (2)
  147:                }
 0000011C  E04D      B           L_22  ; T=0x000001BA
 0000011E          L_26:
  148:             else if(opt == 3)
 0000011E  A802      ADD         R0,R13,#0x8
 00000120  7800      LDRB        R0,[R0,#0x0] ; opt
 00000122  2803      CMP         R0,#0x3
 00000124  D149      BNE         L_22  ; T=0x000001BA
  152:                  GSM_APP_deleteall(diallist_tail);
 00000126  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000128  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 0000012A  F7FF      BL          GSM_APP_deleteall?T  ; T=0x0001  (1)
 0000012C  FF69      BL          GSM_APP_deleteall?T  ; T=0x0001  (2)
  153:                  clrscr();
 0000012E  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000130  FF67      BL          clrscr?T  ; T=0x0001  (2)
  156:         }
 00000132  E042      B           L_22  ; T=0x000001BA
 00000134          L_23:
  157:         else if(key_temp == 'C')   // Scroll DOWN                                                
 00000134  A801      ADD         R0,R13,#0x4
 00000136  7800      LDRB        R0,[R0,#0x0] ; key_temp
 00000138  2843      CMP         R0,#0x43
 0000013A  D11D      BNE         L_30  ; T=0x00000178
  159:             diallist_temp  = diallist_first->prev;
 0000013C  1C30      MOV         R0,R6 ; diallist_first
 0000013E  6B87      LDR         R7,[R0,#0x38]
  160:             if(diallist_temp->cnt == NOT_FREE)
 00000140  1C38      MOV         R0,R7 ; diallist_temp
 00000142  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 18  

 00000144  2801      CMP         R0,#0x1
 00000146  D115      BNE         L_31  ; T=0x00000174
  162:                 clrscr();
 00000148  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000014A  FF5A      BL          clrscr?T  ; T=0x0001  (2)
  163:                 diallist_first = diallist_first->prev;
 0000014C  1C30      MOV         R0,R6 ; diallist_first
 0000014E  6B86      LDR         R6,[R0,#0x38]
  165:                 uart0_tx_string("\r\n\ndiallist First: ");
 00000150  4800      LDR         R0,=??S_10 ; ??S_10
 00000152  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000154  FF55      BL          uart0_tx_string?T  ; T=0x0001  (2)
  166:                 uart0_tx_string(diallist_first->no);
 00000156  1C30      MOV         R0,R6 ; diallist_first
 00000158  3001      ADD         R0,#0x1
 0000015A  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 0000015C  FF51      BL          uart0_tx_string?T  ; T=0x0001  (2)
  168:                 temp  = diallist_head->prev;
 0000015E  4800      LDR         R0,=diallist_head ; diallist_head
 00000160  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000162  6B85      LDR         R5,[R0,#0x38]
  169:                 uart0_tx_string("\r\ndiallist Head: ");
 00000164  4800      LDR         R0,=??S_11 ; ??S_11
 00000166  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000168  FF4B      BL          uart0_tx_string?T  ; T=0x0001  (2)
  170:                 uart0_tx_string(temp->no);
 0000016A  1C28      MOV         R0,R5 ; temp
 0000016C  3001      ADD         R0,#0x1
 0000016E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000170  FF47      BL          uart0_tx_string?T  ; T=0x0001  (2)
  171:             }
 00000172  E022      B           L_22  ; T=0x000001BA
 00000174          L_31:
  174:                 diallist_temp  = diallist_first;    
 00000174  1C37      MOV         R7,R6 ; diallist_first
  177:         }
 00000176  E020      B           L_22  ; T=0x000001BA
 00000178          L_30:
  178:         else if(key_temp == 'B')    // Scroll UP
 00000178  A801      ADD         R0,R13,#0x4
 0000017A  7800      LDRB        R0,[R0,#0x0] ; key_temp
 0000017C  2842      CMP         R0,#0x42
 0000017E  D11C      BNE         L_22  ; T=0x000001BA
  180:             diallist_temp  = diallist_first->next;  
 00000180  1C30      MOV         R0,R6 ; diallist_first
 00000182  6B47      LDR         R7,[R0,#0x34]
  181:             if(diallist_temp->cnt == NOT_FREE)
 00000184  1C38      MOV         R0,R7 ; diallist_temp
 00000186  7800      LDRB        R0,[R0,#0x0] ; diallist_temp
 00000188  2801      CMP         R0,#0x1
 0000018A  D115      BNE         L_35  ; T=0x000001B8
  183:                 clrscr();
 0000018C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000018E  FF38      BL          clrscr?T  ; T=0x0001  (2)
  184:                  diallist_first = diallist_first->next;
 00000190  1C30      MOV         R0,R6 ; diallist_first
 00000192  6B46      LDR         R6,[R0,#0x34]
  186:                 uart0_tx_string("\r\n\ndiallist First: ");
 00000194  4800      LDR         R0,=??S_10 ; ??S_10
 00000196  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 00000198  FF33      BL          uart0_tx_string?T  ; T=0x0001  (2)
  187:                 uart0_tx_string(diallist_first->no);
 0000019A  1C30      MOV         R0,R6 ; diallist_first
 0000019C  3001      ADD         R0,#0x1
 0000019E  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001A0  FF2F      BL          uart0_tx_string?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 19  

  189:                 temp  = diallist_head->prev;
 000001A2  4800      LDR         R0,=diallist_head ; diallist_head
 000001A4  6800      LDR         R0,[R0,#0x0] ; diallist_head
 000001A6  6B85      LDR         R5,[R0,#0x38]
  190:                 uart0_tx_string("\r\ndiallist Head: ");
 000001A8  4800      LDR         R0,=??S_11 ; ??S_11
 000001AA  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001AC  FF29      BL          uart0_tx_string?T  ; T=0x0001  (2)
  191:                 uart0_tx_string(temp->no);
 000001AE  1C28      MOV         R0,R5 ; temp
 000001B0  3001      ADD         R0,#0x1
 000001B2  F7FF      BL          uart0_tx_string?T  ; T=0x0001  (1)
 000001B4  FF25      BL          uart0_tx_string?T  ; T=0x0001  (2)
  192:             }
 000001B6  E000      B           L_22  ; T=0x000001BA
 000001B8          L_35:
  195:                 diallist_temp  = diallist_first;    
 000001B8  1C37      MOV         R7,R6 ; diallist_first
  197:         }
 000001BA          L_22:
  199:         diallist_temp  = diallist_first;
 000001BA  1C37      MOV         R7,R6 ; diallist_first
  200:     }
 000001BC  E742      B           L_18  ; T=0x00000044
 000001BE            ; SCOPE-END
  201: }
 000001BE          L_21:
 000001BE  B00D      ADD         R13,#0x34
 000001C0  BCF0      POP         {R4-R7}
 000001C2  BC08      POP         {R3}
 000001C4  4718      BX          R3
 000001C6          ENDP ; 'GSM_APP_diallist_show?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_update?T?gsm_app':
  210: void GSM_APP_diallist_update(U8 *phone_no, U8 *time)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C0C      MOV         R4,R1 ; time
 00000004  ---- Variable 'time' assigned to Register 'R4' ----
 00000004  1C01      MOV         R1,R0 ; phone_no
 00000006  ---- Variable 'phone_no' assigned to Register 'R1' ----
  212:     LIB_str_copy(phone_no, &diallist_head->no[0], 10);   // Common part for both cases 
 00000006  1C08      MOV         R0,R1 ; phone_no
 00000008  4800      LDR         R1,=diallist_head ; diallist_head
 0000000A  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000000C  3101      ADD         R1,#0x1
 0000000E  220A      MOV         R2,#0xA
 00000010  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000012  FFF6      BL          LIB_str_copy?T  ; T=0x0001  (2)
  213:     LIB_str_copy(time, &diallist_head->time[0], 8);      // In any of the case New No is added at the Head of the list
 00000014  1C20      MOV         R0,R4 ; time
 00000016  4800      LDR         R1,=diallist_head ; diallist_head
 00000018  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000001A  3129      ADD         R1,#0x29
 0000001C  2208      MOV         R2,#0x8
 0000001E  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000020  FFEF      BL          LIB_str_copy?T  ; T=0x0001  (2)
  214:     diallist_head->cnt = NOT_FREE;                       // after asigning Phone no and time stamp, the node is marked as NOT_FREE
 00000022  2101      MOV         R1,#0x1
 00000024  4800      LDR         R0,=diallist_head ; diallist_head
 00000026  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000028  7001      STRB        R1,[R0,#0x0]
  216:     if(diallist_head->next == diallist_tail)            // This is the case when list is full and hence head->next is pointin
             -g to the tail 
 0000002A  4800      LDR         R0,=diallist_head ; diallist_head
 0000002C  6803      LDR         R3,[R0,#0x0] ; diallist_head
 0000002E  6B59      LDR         R1,[R3,#0x34]
 00000030  4800      LDR         R0,=diallist_tail ; diallist_tail
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 20  

 00000032  6800      LDR         R0,[R0,#0x0] ; diallist_tail
 00000034  4281      CMP         R1,R0
 00000036  D105      BNE         L_37  ; T=0x00000044
  218:         diallist_tail = diallist_tail->next;            // Tail & Head are shifted further by one position, and we get new Head 
             -& Tail for our list
 00000038  6B42      LDR         R2,[R0,#0x34]
 0000003A  4800      LDR         R0,=diallist_tail ; diallist_tail
 0000003C  6002      STR         R2,[R0,#0x0] ; diallist_tail
  219:         diallist_head = diallist_head->next;
 0000003E  4800      LDR         R0,=diallist_head ; diallist_head
 00000040  6001      STR         R1,[R0,#0x0] ; diallist_head
  220:     }                                       
 00000042  E001      B           L_38  ; T=0x00000048
 00000044          L_37:
  223:         diallist_head = diallist_head->next;            // Head is traversing forward when list is empty or Head->next is not ta
             -il
 00000044  4800      LDR         R0,=diallist_head ; diallist_head
 00000046  6001      STR         R1,[R0,#0x0] ; diallist_head
  224:     }                                                    // Tail will not change till the list gets full
 00000048          L_38:
  225: }
 00000048  BC10      POP         {R4}
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'GSM_APP_diallist_update?T'


*** CODE SEGMENT '?PR?GSM_APP_diallist_delete?T?gsm_app':
  234: void GSM_APP_diallist_delete(DIAL *del_node)
 00000000  B470      PUSH        {R4-R6}
 00000002  1C03      MOV         R3,R0 ; del_node
 00000004  ---- Variable 'del_node' assigned to Register 'R3' ----
  235: {
 00000004            ; SCOPE-START
  239:     if(del_node->cnt == NOT_FREE)                       // The node to be deleted must be a valid node, deleting empty node is usel
             -ess. 
 00000004  1C18      MOV         R0,R3 ; del_node
 00000006  7800      LDRB        R0,[R0,#0x0] ; del_node
 00000008  2801      CMP         R0,#0x1
 0000000A  D135      BNE         L_39  ; T=0x00000078
  241:         delnext = del_node->next;
 0000000C  1C18      MOV         R0,R3 ; del_node
 0000000E  6B44      LDR         R4,[R0,#0x34]
 00000010  ---- Variable 'delnext' assigned to Register 'R4' ----
  242:         if(diallist_head->next == diallist_tail)        // if Head->next is tail of list, it means that list is full
 00000010  4800      LDR         R0,=diallist_head ; diallist_head
 00000012  6806      LDR         R6,[R0,#0x0] ; diallist_head
 00000014  6B72      LDR         R2,[R6,#0x34]
 00000016  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000018  6801      LDR         R1,[R0,#0x0] ; diallist_tail
 0000001A  428A      CMP         R2,R1
 0000001C  D108      BNE         L_40  ; T=0x00000030
  244:             if(del_node == diallist_head)               // case1: the deleted node itself is head,
 0000001E  1C18      MOV         R0,R3 ; del_node
 00000020  42B0      CMP         R0,R6 ; del_node
 00000022  D10B      BNE         L_42  ; T=0x0000003C
  246:                 diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
 00000024  6B4D      LDR         R5,[R1,#0x34]
 00000026  4800      LDR         R0,=diallist_tail ; diallist_tail
 00000028  6005      STR         R5,[R0,#0x0] ; diallist_tail
  247:                  diallist_head = diallist_head->next;    // Head = Head->next      New Head
 0000002A  4800      LDR         R0,=diallist_head ; diallist_head
 0000002C  6002      STR         R2,[R0,#0x0] ; diallist_head
  249:         }                                               /*What if list is full & del_node is Tail ?  <------ FIX this */ 
 0000002E  E005      B           L_42  ; T=0x0000003C
 00000030          L_40:
  252:             if(del_node == diallist_tail)               // case2: List is not full but del_node is Tail of list
 00000030  1C18      MOV         R0,R3 ; del_node
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 21  

 00000032  4288      CMP         R0,R1 ; del_node
 00000034  D102      BNE         L_42  ; T=0x0000003C
  254:                 diallist_tail = diallist_tail->next;    // Tail = Tail->next      New Tail
 00000036  6B49      LDR         R1,[R1,#0x34]
 00000038  4800      LDR         R0,=diallist_tail ; diallist_tail
 0000003A  6001      STR         R1,[R0,#0x0] ; diallist_tail
  257:         }
 0000003C          L_42:
  259:          delnext->prev = del_node->prev;
 0000003C  1C18      MOV         R0,R3 ; del_node
 0000003E  6B80      LDR         R0,[R0,#0x38]
 00000040  1C21      MOV         R1,R4 ; delnext
 00000042  6388      STR         R0,[R1,#0x38]
  260:          temp = del_node->prev;
 00000044  1C18      MOV         R0,R3 ; del_node
 00000046  6B82      LDR         R2,[R0,#0x38]
 00000048  ---- Variable 'temp' assigned to Register 'R2' ----
  261:         temp->next = delnext; 
 00000048  1C20      MOV         R0,R4 ; delnext
 0000004A  1C11      MOV         R1,R2 ; temp
 0000004C  6348      STR         R0,[R1,#0x34]
  262:         del_node->cnt  = FREE;
 0000004E  2100      MOV         R1,#0x0
 00000050  1C18      MOV         R0,R3 ; del_node
 00000052  7001      STRB        R1,[R0,#0x0] ; del_node
  266:         del_node->next = diallist_head->next;            // Copying head->next link to del->next        
 00000054  4800      LDR         R0,=diallist_head ; diallist_head
 00000056  6800      LDR         R0,[R0,#0x0] ; diallist_head
 00000058  6B41      LDR         R1,[R0,#0x34]
 0000005A  1C18      MOV         R0,R3 ; del_node
 0000005C  6341      STR         R1,[R0,#0x34]
  267:         del_node->prev = diallist_head;                  // del's backlink will be Head
 0000005E  4800      LDR         R0,=diallist_head ; diallist_head
 00000060  6801      LDR         R1,[R0,#0x0] ; diallist_head
 00000062  1C18      MOV         R0,R3 ; del_node
 00000064  6381      STR         R1,[R0,#0x38]
  268:         diallist_head->next = del_node;                  // Now head->next will be del (new node)
 00000066  1C18      MOV         R0,R3 ; del_node
 00000068  4800      LDR         R1,=diallist_head ; diallist_head
 0000006A  6809      LDR         R1,[R1,#0x0] ; diallist_head
 0000006C  6348      STR         R0,[R1,#0x34]
  269:         temp = del_node->next;                           // Assigning backlink of node next to del (new node) 
 0000006E  1C18      MOV         R0,R3 ; del_node
 00000070  6B42      LDR         R2,[R0,#0x34]
  270:         temp->prev = del_node;                            
 00000072  1C18      MOV         R0,R3 ; del_node
 00000074  1C11      MOV         R1,R2 ; temp
 00000076  6388      STR         R0,[R1,#0x38]
  271:     }
 00000078          L_39:
 00000078            ; SCOPE-END
  272: }
 00000078  BC70      POP         {R4-R6}
 0000007A  4770      BX          R14
 0000007C          ENDP ; 'GSM_APP_diallist_delete?T'


*** CODE SEGMENT '?PR?GSM_APP_options?T?gsm_app':
  281: U8 GSM_APP_options(U8 **opt_disp, U8 opt_cnt)           // *opt_disp is an array of pointers, were each pointer will poin
             -t  
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C0F      MOV         R7,R1 ; opt_cnt
 00000004  ---- Variable 'opt_cnt' assigned to Register 'R7' ----
 00000004  1C06      MOV         R6,R0 ; opt_disp
 00000006  ---- Variable 'opt_disp' assigned to Register 'R6' ----
 00000006  B081      SUB         R13,#0x4
  282: {                                                        // to the option menu to be displayed
 00000008            ; SCOPE-START
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 22  

  283:     U8 temp_key = 0;    
 00000008  2500      MOV         R5,#0x0
 0000000A  ---- Variable 'temp_key' assigned to Register 'R5' ----
  284:     U8 uc_cnt = 1;
 0000000A  2401      MOV         R4,#0x1
 0000000C  ---- Variable 'uc_cnt' assigned to Register 'R4' ----
  286:     ms_delay(1000);                                     // This delay is usefull in avoiding any spurious enterance into the loop.
 0000000C  48FA      LDR         R0,=0x3E8
 0000000E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000010  FFF7      BL          ms_delay?T  ; T=0x0001  (2)
  288:     while(temp_key != 'D')
 00000012  E050      B           L_44  ; T=0x000000B6
 00000014          L_46:
  290:          lcd_line_disp("                    ", 0, 3);
 00000014  4800      LDR         R0,=??S_13 ; ??S_13
 00000016  2100      MOV         R1,#0x0
 00000018  2203      MOV         R2,#0x3
 0000001A  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          lcd_line_disp?T  ; T=0x0001  (2)
  291:         lcd_line_disp("                    ", 0, 4);
 0000001E  4800      LDR         R0,=??S_13 ; ??S_13
 00000020  2100      MOV         R1,#0x0
 00000022  2204      MOV         R2,#0x4
 00000024  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000026  FFEC      BL          lcd_line_disp?T  ; T=0x0001  (2)
  292:         temp_ptr = opt_disp + (uc_cnt - 1);
 00000028  1C20      MOV         R0,R4 ; uc_cnt
 0000002A  0601      LSL         R1,R0,#0x18 ; uc_cnt
 0000002C  0E09      LSR         R1,R1,#0x18
 0000002E  0089      LSL         R1,R1,#0x2
 00000030  1C30      MOV         R0,R6 ; opt_disp
 00000032  1840      ADD         R0,R1 ; opt_disp
 00000034  4800      LDR         R1,=0xFFFFFFFC
 00000036  1840      ADD         R0,R1
 00000038  9000      STR         R0,[R13,#0x0] ; temp_ptr
  293:         lcd_line_disp(*temp_ptr, 0, 3);
 0000003A  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 0000003C  6800      LDR         R0,[R0,#0x0]
 0000003E  2100      MOV         R1,#0x0
 00000040  2203      MOV         R2,#0x3
 00000042  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000044  FFDD      BL          lcd_line_disp?T  ; T=0x0001  (2)
  294:         temp_ptr++;
 00000046  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 00000048  3004      ADD         R0,#0x4
 0000004A  9000      STR         R0,[R13,#0x0] ; temp_ptr
  295:         lcd_line_disp(*temp_ptr, 0, 4);
 0000004C  9800      LDR         R0,[R13,#0x0] ; temp_ptr
 0000004E  6800      LDR         R0,[R0,#0x0]
 00000050  2100      MOV         R1,#0x0
 00000052  2204      MOV         R2,#0x4
 00000054  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 00000056  FFD4      BL          lcd_line_disp?T  ; T=0x0001  (2)
  297:          temp_key = get_key(1);
 00000058  2001      MOV         R0,#0x1
 0000005A  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000005C  FFD1      BL          get_key?T  ; T=0x0001  (2)
 0000005E  1C05      MOV         R5,R0 ; temp_key
  298:         ms_delay(350);
 00000060  4800      LDR         R0,=0x15E
 00000062  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000064  FFCD      BL          ms_delay?T  ; T=0x0001  (2)
  299:         if(temp_key == 'B')
 00000066  1C28      MOV         R0,R5 ; temp_key
 00000068  0600      LSL         R0,R0,#0x18 ; temp_key
 0000006A  0E00      LSR         R0,R0,#0x18
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 23  

 0000006C  2842      CMP         R0,#0x42
 0000006E  D108      BNE         L_48  ; T=0x00000082
  301:             if(uc_cnt >1)
 00000070  1C20      MOV         R0,R4 ; uc_cnt
 00000072  0600      LSL         R0,R0,#0x18 ; uc_cnt
 00000074  0E00      LSR         R0,R0,#0x18
 00000076  2801      CMP         R0,#0x1
 00000078  DD1D      BLE         L_44  ; T=0x000000B6
  303:                 uc_cnt -= 1;
 0000007A  3C01      SUB         R4,#0x1
 0000007C  0624      LSL         R4,R4,#0x18
 0000007E  0E24      LSR         R4,R4,#0x18
  305:         }
 00000080  E019      B           L_44  ; T=0x000000B6
 00000082          L_48:
  306:         else if(temp_key == 'C')
 00000082  1C28      MOV         R0,R5 ; temp_key
 00000084  0600      LSL         R0,R0,#0x18 ; temp_key
 00000086  0E00      LSR         R0,R0,#0x18
 00000088  2843      CMP         R0,#0x43
 0000008A  D10B      BNE         L_51  ; T=0x000000A4
  308:             if(uc_cnt < opt_cnt)
 0000008C  1C38      MOV         R0,R7 ; opt_cnt
 0000008E  0601      LSL         R1,R0,#0x18 ; opt_cnt
 00000090  0E09      LSR         R1,R1,#0x18
 00000092  1C20      MOV         R0,R4 ; uc_cnt
 00000094  0600      LSL         R0,R0,#0x18 ; uc_cnt
 00000096  0E00      LSR         R0,R0,#0x18
 00000098  4288      CMP         R0,R1
 0000009A  D20C      BCS         L_44  ; T=0x000000B6
  310:                 uc_cnt += 1;
 0000009C  3401      ADD         R4,#0x1
 0000009E  0624      LSL         R4,R4,#0x18
 000000A0  0E24      LSR         R4,R4,#0x18
  312:         }  
 000000A2  E008      B           L_44  ; T=0x000000B6
 000000A4          L_51:
  313:         else if(temp_key == 'E')
 000000A4  1C28      MOV         R0,R5 ; temp_key
 000000A6  0600      LSL         R0,R0,#0x18 ; temp_key
 000000A8  0E00      LSR         R0,R0,#0x18
 000000AA  2845      CMP         R0,#0x45
 000000AC  D103      BNE         L_44  ; T=0x000000B6
  315:             return uc_cnt;
 000000AE  1C20      MOV         R0,R4 ; uc_cnt
 000000B0  0600      LSL         R0,R0,#0x18 ; uc_cnt
 000000B2  0E00      LSR         R0,R0,#0x18
 000000B4  E00A      B           L_55  ; T=0x000000CC
  317:       }
 000000B6          L_44:
 000000B6  1C28      MOV         R0,R5 ; temp_key
 000000B8  0600      LSL         R0,R0,#0x18 ; temp_key
 000000BA  0E00      LSR         R0,R0,#0x18
 000000BC  2844      CMP         R0,#0x44
 000000BE  D1A9      BNE         L_46  ; T=0x00000014
  318:     clrscr();
 000000C0  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000C2  FF9E      BL          clrscr?T  ; T=0x0001  (2)
  319:     ms_delay(1000);             // delay to avoid reentry in to this function
 000000C4  48FA      LDR         R0,=0x3E8
 000000C6  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 000000C8  FF9B      BL          ms_delay?T  ; T=0x0001  (2)
  320:     return 0;       
 000000CA  2000      MOV         R0,#0x0
 000000CC            ; SCOPE-END
  321: }
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 24  

 000000CC          L_55:
 000000CC  B001      ADD         R13,#0x4
 000000CE  BCF0      POP         {R4-R7}
 000000D0  BC08      POP         {R3}
 000000D2  4718      BX          R3
 000000D4          ENDP ; 'GSM_APP_options?T'


*** CODE SEGMENT '?PR?GSM_APP_deleteall?T?gsm_app':
  331:  void GSM_APP_deleteall(DIAL *list_tail)
 00000000  1C02      MOV         R2,R0 ; list_tail
 00000002  ---- Variable 'list_tail' assigned to Register 'R2' ----
  332:  {
 00000002            ; SCOPE-START
  334:     temp_ptr = list_tail;
 00000002  1C10      MOV         R0,R2 ; list_tail
 00000004  ---- Variable 'temp_ptr' assigned to Register 'R0' ----
  335:     while(temp_ptr->cnt == NOT_FREE)
 00000004  E003      B           L_56  ; T=0x0000000E
 00000006          L_58:
  337:         temp_ptr->cnt = FREE;             // Setting node->cnt = FREE, which means node is deleted 
 00000006  2300      MOV         R3,#0x0
 00000008  1C01      MOV         R1,R0 ; temp_ptr
 0000000A  700B      STRB        R3,[R1,#0x0] ; temp_ptr
  338:         temp_ptr = temp_ptr->next;        // traversing to the next node through link list 
 0000000C  6B40      LDR         R0,[R0,#0x34]
  339:     }
 0000000E          L_56:
 0000000E  1C01      MOV         R1,R0 ; temp_ptr
 00000010  7809      LDRB        R1,[R1,#0x0] ; temp_ptr
 00000012  2901      CMP         R1,#0x1
 00000014  D0F7      BEQ         L_58  ; T=0x00000006
  340:       diallist_head = list_tail;              // changing global pointer dialist_head
 00000016  1C11      MOV         R1,R2 ; list_tail
 00000018  4800      LDR         R0,=diallist_head ; diallist_head
 0000001A  6001      STR         R1,[R0,#0x0] ; diallist_head
 0000001C            ; SCOPE-END
  341:  }
 0000001C  4770      BX          R14
 0000001E          ENDP ; 'GSM_APP_deleteall?T'


*** CODE SEGMENT '?PR?GSM_APP_contactlist_init?T?gsm_app':
  352: void GSM_APP_contactlist_init(U8 contactlist_size)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'contactlist_size' assigned to Register 'R0' ----
  353: {
 00000002            ; SCOPE-START
  357:     contact1 = &contactlist[0];
 00000002  4800      LDR         R2,=contactlist ; contactlist
 00000004  ---- Variable 'contact1' assigned to Register 'R2' ----
  358:     contact2 = &contactlist[1];
 00000004  4800      LDR         R1,=contactlist + 0x3C ; contactlist+60
 00000006  ---- Variable 'contact2' assigned to Register 'R1' ----
  360:     contact1->prev_no = 0;
 00000006  2300      MOV         R3,#0x0
 00000008  1C14      MOV         R4,R2 ; contact1
 0000000A  6323      STR         R3,[R4,#0x30]
  362:      while(contactlist_size)                  // Preparing a doubly link list 
 0000000C  E00D      B           L_60  ; T=0x0000002A
 0000000E          L_62:
  364:          contact2->prev_no = contact1;         
 0000000E  1C13      MOV         R3,R2 ; contact1
 00000010  1C0C      MOV         R4,R1 ; contact2
 00000012  6323      STR         R3,[R4,#0x30]
  365:         contact1->next_no = contact2;   
 00000014  1C0B      MOV         R3,R1 ; contact2
 00000016  1C14      MOV         R4,R2 ; contact1
 00000018  62E3      STR         R3,[R4,#0x2C]
  366:         contact1->cnt = FREE;
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 25  

 0000001A  2400      MOV         R4,#0x0
 0000001C  1C13      MOV         R3,R2 ; contact1
 0000001E  701C      STRB        R4,[R3,#0x0] ; contact1
  367:         contact1++;
 00000020  323C      ADD         R2,#0x3C
  368:         contact2++;
 00000022  313C      ADD         R1,#0x3C
  369:         contactlist_size--; 
 00000024  3801      SUB         R0,#0x1
 00000026  0600      LSL         R0,R0,#0x18
 00000028  0E00      LSR         R0,R0,#0x18
  370:      }
 0000002A          L_60:
 0000002A  1C03      MOV         R3,R0 ; contactlist_size
 0000002C  2B00      CMP         R3,#0x0 ; contactlist_size
 0000002E  D1EE      BNE         L_62  ; T=0x0000000E
  372:     contact1->next_no = 0;
 00000030  2000      MOV         R0,#0x0
 00000032  1C11      MOV         R1,R2 ; contact1
 00000034  62C8      STR         R0,[R1,#0x2C]
  374:     contactlist_head    = &contactlist[0];         // Assigning Head of the list
 00000036  4800      LDR         R1,=contactlist ; contactlist
 00000038  4800      LDR         R0,=contactlist_head ; contactlist_head
 0000003A  6001      STR         R1,[R0,#0x0] ; contactlist_head
  375:     contactlist_tail    = contactlist_head;        // At initialization Head & Tail are same.
 0000003C  4800      LDR         R0,=contactlist_head ; contactlist_head
 0000003E  6801      LDR         R1,[R0,#0x0] ; contactlist_head
 00000040  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 00000042  6001      STR         R1,[R0,#0x0] ; contactlist_tail
 00000044            ; SCOPE-END
  377: }
 00000044  BC10      POP         {R4}
 00000046  4770      BX          R14
 00000048          ENDP ; 'GSM_APP_contactlist_init?T'


*** CODE SEGMENT '?PR?GSM_APP_contactlist_update?T?gsm_app':
  384: void GSM_APP_contactlist_update(U8 *no, U8 *name)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C0E      MOV         R6,R1 ; name
 00000004  ---- Variable 'name' assigned to Register 'R6' ----
 00000004  1C01      MOV         R1,R0 ; no
 00000006  ---- Variable 'no' assigned to Register 'R1' ----
  385: {
 00000006            ; SCOPE-START
  388:     U8 uc_result = 4;
 00000006  2504      MOV         R5,#0x4
 00000008  ---- Variable 'uc_result' assigned to Register 'R5' ----
  391:     contact_temp = contactlist_tail;
 00000008  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 0000000A  6804      LDR         R4,[R0,#0x0] ; contactlist_tail
 0000000C  ---- Variable 'contact_temp' assigned to Register 'R4' ----
  392:     LIB_str_copy(no, &contactlist_head->no[0], 10);  // Common part for both cases 
 0000000C  1C08      MOV         R0,R1 ; no
 0000000E  4800      LDR         R1,=contactlist_head ; contactlist_head
 00000010  6809      LDR         R1,[R1,#0x0] ; contactlist_head
 00000012  3101      ADD         R1,#0x1
 00000014  220A      MOV         R2,#0xA
 00000016  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 00000018  FFF3      BL          LIB_str_copy?T  ; T=0x0001  (2)
  393:     LIB_str_copy(name, &contactlist_head->name[0], LIB_strlen(name));        // In any of the case New No is added at the
             - Head of the list
 0000001A  1C30      MOV         R0,R6 ; name
 0000001C  F7FF      BL          LIB_strlen?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          LIB_strlen?T  ; T=0x0001  (2)
 00000020  0402      LSL         R2,R0,#0x10 ; LIB_strlen?T
 00000022  0C12      LSR         R2,R2,#0x10
 00000024  1C30      MOV         R0,R6 ; name
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 26  

 00000026  4800      LDR         R1,=contactlist_head ; contactlist_head
 00000028  6809      LDR         R1,[R1,#0x0] ; contactlist_head
 0000002A  3110      ADD         R1,#0x10
 0000002C  F7FF      BL          LIB_str_copy?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          LIB_str_copy?T  ; T=0x0001  (2)
  394:     contactlist_head->cnt = NOT_FREE;
 00000030  2101      MOV         R1,#0x1
 00000032  4800      LDR         R0,=contactlist_head ; contactlist_head
 00000034  6800      LDR         R0,[R0,#0x0] ; contactlist_head
 00000036  7001      STRB        R1,[R0,#0x0]
  398:     if(contactlist_tail != FREE)
 00000038  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 0000003A  6800      LDR         R0,[R0,#0x0] ; contactlist_tail
 0000003C  2800      CMP         R0,#0x0
 0000003E  D01B      BEQ         L_64  ; T=0x00000078
  400:         while((uc_result != 2) || (contact_temp->cnt == NOT_FREE))      // comparing two nos unless New no is not greater t
             -han first one OR 
 00000040  E009      B           L_65  ; T=0x00000056
 00000042          L_67:
  402:             uc_result = GSM_APP_compare_no(contact_temp->no, contactlist_head->no);
 00000042  1C20      MOV         R0,R4 ; contact_temp
 00000044  3001      ADD         R0,#0x1
 00000046  4800      LDR         R1,=contactlist_head ; contactlist_head
 00000048  6809      LDR         R1,[R1,#0x0] ; contactlist_head
 0000004A  3101      ADD         R1,#0x1
 0000004C  F7FF      BL          GSM_APP_compare_no?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          GSM_APP_compare_no?T  ; T=0x0001  (2)
 00000050  1C05      MOV         R5,R0 ; uc_result
  403:             contact_temp = contact_temp->next_no;       
 00000052  1C20      MOV         R0,R4 ; contact_temp
 00000054  6AC4      LDR         R4,[R0,#0x2C]
  404:         }
 00000056          L_65:
 00000056  1C28      MOV         R0,R5 ; uc_result
 00000058  0600      LSL         R0,R0,#0x18 ; uc_result
 0000005A  0E00      LSR         R0,R0,#0x18
 0000005C  2802      CMP         R0,#0x2
 0000005E  D1F0      BNE         L_67  ; T=0x00000042
 00000060  1C20      MOV         R0,R4 ; contact_temp
 00000062  7800      LDRB        R0,[R0,#0x0] ; contact_temp
 00000064  2801      CMP         R0,#0x1
 00000066  D0EC      BEQ         L_67  ; T=0x00000042
  406:         if(contact_temp == contactlist_tail)
 00000068  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 0000006A  6801      LDR         R1,[R0,#0x0] ; contactlist_tail
 0000006C  1C20      MOV         R0,R4 ; contact_temp
 0000006E  4288      CMP         R0,R1 ; contact_temp
 00000070  D10B      BNE         L_70  ; T=0x0000008A
  408:             contact_temp = contactlist_head; // this contdion will be true for the first time only when list is empty
 00000072  4800      LDR         R0,=contactlist_head ; contactlist_head
 00000074  6804      LDR         R4,[R0,#0x0] ; contactlist_head
  414:     }
 00000076  E008      B           L_70  ; T=0x0000008A
 00000078          L_64:
  417:          contactlist_tail = contactlist_head;
 00000078  4800      LDR         R0,=contactlist_head ; contactlist_head
 0000007A  6801      LDR         R1,[R0,#0x0] ; contactlist_head
 0000007C  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 0000007E  6001      STR         R1,[R0,#0x0] ; contactlist_tail
  418:         contactlist_head = contactlist_tail->next_no;
 00000080  4800      LDR         R0,=contactlist_tail ; contactlist_tail
 00000082  6800      LDR         R0,[R0,#0x0] ; contactlist_tail
 00000084  6AC1      LDR         R1,[R0,#0x2C]
 00000086  4800      LDR         R0,=contactlist_head ; contactlist_head
 00000088  6001      STR         R1,[R0,#0x0] ; contactlist_head
  421:     }
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 27  

 0000008A          L_70:
  423:     if(contactlist_head->next_no == NOT_FREE)   // Check whether new node is available or not 
 0000008A  4800      LDR         R0,=contactlist_head ; contactlist_head
 0000008C  6802      LDR         R2,[R0,#0x0] ; contactlist_head
 0000008E  6AD1      LDR         R1,[R2,#0x2C]
 00000090  1C08      MOV         R0,R1
 00000092  2801      CMP         R0,#0x1
 00000094  D101      BNE         L_71  ; T=0x0000009A
  425:          contactlist_head = contactlist_head->next_no; // finding New HEAD for the contactlist
 00000096  4800      LDR         R0,=contactlist_head ; contactlist_head
 00000098  6001      STR         R1,[R0,#0x0] ; contactlist_head
  426:     }
 0000009A          L_71:
 0000009A            ; SCOPE-END
  429: }
 0000009A  BC70      POP         {R4-R6}
 0000009C  BC08      POP         {R3}
 0000009E  4718      BX          R3
 000000A0          ENDP ; 'GSM_APP_contactlist_update?T'


*** CODE SEGMENT '?PR?GSM_APP_compare_no?T?gsm_app':
  439: U8 GSM_APP_compare_no(U8 *no1, U8 *no2)
 00000000  B410      PUSH        {R4}
 00000002  1C0C      MOV         R4,R1 ; no2
 00000004  ---- Variable 'no2' assigned to Register 'R4' ----
 00000004  1C03      MOV         R3,R0 ; no1
 00000006  ---- Variable 'no1' assigned to Register 'R3' ----
  441:       while(*no1 == *no2)
 00000006  E005      B           L_72  ; T=0x00000014
 00000008          L_74:
  443:         no1++;
 00000008  3301      ADD         R3,#0x1
  444:         no2++;
 0000000A  3401      ADD         R4,#0x1
  445:         if(*no1 == 0)
 0000000C  1C18      MOV         R0,R3 ; no1
 0000000E  7800      LDRB        R0,[R0,#0x0] ; no1
 00000010  2800      CMP         R0,#0x0
 00000012  D005      BEQ         L_73  ; T=0x00000020
  449:     }
 00000014          L_72:
 00000014  1C20      MOV         R0,R4 ; no2
 00000016  7801      LDRB        R1,[R0,#0x0] ; no2
 00000018  1C18      MOV         R0,R3 ; no1
 0000001A  7800      LDRB        R0,[R0,#0x0] ; no1
 0000001C  4288      CMP         R0,R1
 0000001E  D0F3      BEQ         L_74  ; T=0x00000008
 00000020          L_73:
  450:     if(*no1 > *no2)
 00000020  1C20      MOV         R0,R4 ; no2
 00000022  7802      LDRB        R2,[R0,#0x0] ; no2
 00000024  1C18      MOV         R0,R3 ; no1
 00000026  7801      LDRB        R1,[R0,#0x0] ; no1
 00000028  4291      CMP         R1,R2
 0000002A  D901      BLS         L_77  ; T=0x00000030
  452:         return 1;
 0000002C  2001      MOV         R0,#0x1
 0000002E  E006      B           L_78  ; T=0x0000003E
  453:     }
 00000030          L_77:
  454:     else if(*no2 > *no1)
 00000030  428A      CMP         R2,R1
 00000032  D901      BLS         L_80  ; T=0x00000038
  456:         return 2;
 00000034  2002      MOV         R0,#0x2
 00000036  E002      B           L_78  ; T=0x0000003E
  457:       }
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 28  

 00000038          L_80:
  458:     else if(*no1 == *no2)
 00000038  4291      CMP         R1,R2
 0000003A  D100      BNE         L_78  ; T=0x0000003E
  460:         return 0;
 0000003C  2000      MOV         R0,#0x0
  462: }
 0000003E          L_78:
 0000003E  BC10      POP         {R4}
 00000040  4770      BX          R14
 00000042          ENDP ; 'GSM_APP_compare_no?T'


*** CODE SEGMENT '?PR?GSM_APP_write?T?gsm_app':
  470: void GSM_APP_write(U8 *text_msg)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C07      MOV         R7,R0 ; text_msg
 00000004  ---- Variable 'text_msg' assigned to Register 'R7' ----
 00000004  B091      SUB         R13,#0x44
 00000006  ---- Variable 'uc_ptr' assigned to Register 'R4' ----
  471: {
 00000006            ; SCOPE-START
  473:     U8  cur_key = 0;              // temp_msg pointer is used as pointer to msg array
 00000006  2100      MOV         R1,#0x0
 00000008  1C0E      MOV         R6,R1 ; cur_key
 0000000A  ---- Variable 'cur_key' assigned to Register 'R6' ----
  474:     U8  prev_key = 0;
 0000000A  A800      ADD         R0,R13,#0x0
 0000000C  7001      STRB        R1,[R0,#0x0] ; prev_key
  475:     U8  *msg_arr[15] = {" 0", ".,;:1", "abc2", "def3", "ghi4", "jkl5", "mno6", "pqrs7", "tuv8", "wxyz9"}; 
 0000000E  4800      LDR         R1,=?tpl?0002 ; ?tpl?0002
 00000010  A801      ADD         R0,R13,#0x4
 00000012  223C      MOV         R2,#0x3C
 00000014          L_103:
 00000014  780B      LDRB        R3,[R1,#0x0]
 00000016  7003      STRB        R3,[R0,#0x0]
 00000018  1C49      ADD         R1,R1,#0x1
 0000001A  1C40      ADD         R0,R0,#0x1
 0000001C  1E52      SUB         R2,R2,#0x1
 0000001E  D1F9      BNE         L_103  ; T=0x00000014
  476:     U8  caps = 0;                 // all the arrays above are individual arrays
 00000020  2100      MOV         R1,#0x0
 00000022  A810      ADD         R0,R13,#0x40
 00000024  7001      STRB        R1,[R0,#0x0] ; caps
  478:     temp_msg = text_msg;          // taking copy of pointer.
 00000026  1C3D      MOV         R5,R7 ; text_msg
 00000028  ---- Variable 'temp_msg' assigned to Register 'R5' ----
  479:     clrscr();
 00000028  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          clrscr?T  ; T=0x0001  (2)
  481:     while(cur_key != 'D')
 0000002C  E066      B           L_83  ; T=0x000000FC
 0000002E          L_85:
  483:          cur_key = get_key(1);
 0000002E  2001      MOV         R0,#0x1
 00000030  F7FF      BL          get_key?T  ; T=0x0001  (1)
 00000032  FFE6      BL          get_key?T  ; T=0x0001  (2)
 00000034  1C06      MOV         R6,R0 ; cur_key
  484:         if((cur_key >= '0')&&(cur_key <= '9'))
 00000036  0600      LSL         R0,R0,#0x18 ; cur_key
 00000038  0E00      LSR         R0,R0,#0x18
 0000003A  2830      CMP         R0,#0x30
 0000003C  DB3A      BLT         L_87  ; T=0x000000B4
 0000003E  1C30      MOV         R0,R6 ; cur_key
 00000040  0600      LSL         R0,R0,#0x18 ; cur_key
 00000042  0E00      LSR         R0,R0,#0x18
 00000044  2839      CMP         R0,#0x39
 00000046  DC35      BGT         L_87  ; T=0x000000B4
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 29  

  486:             if(cur_key == prev_key)         // this signifies that entered key is equal to the previous key
 00000048  A800      ADD         R0,R13,#0x0
 0000004A  7800      LDRB        R0,[R0,#0x0] ; prev_key
 0000004C  1C01      MOV         R1,R0
 0000004E  1C30      MOV         R0,R6 ; cur_key
 00000050  0600      LSL         R0,R0,#0x18 ; cur_key
 00000052  0E00      LSR         R0,R0,#0x18
 00000054  4288      CMP         R0,R1
 00000056  D11A      BNE         L_88  ; T=0x0000008E
  488:                   if(*(uc_ptr + 1) == 0)
 00000058  1C20      MOV         R0,R4 ; uc_ptr
 0000005A  7840      LDRB        R0,[R0,#0x1]
 0000005C  2800      CMP         R0,#0x0
 0000005E  D107      BNE         L_89  ; T=0x00000070
  490:                     uc_ptr = msg_arr[cur_key - 0x30];  // set the starting address if user has been reached to end of array
 00000060  1C30      MOV         R0,R6 ; cur_key
 00000062  0601      LSL         R1,R0,#0x18 ; cur_key
 00000064  0E09      LSR         R1,R1,#0x18
 00000066  0089      LSL         R1,R1,#0x2
 00000068  4800      LDR         R0,=0xFFFFFF44
 0000006A  4468      ADD         R0,R13
 0000006C  5844      LDR         R4,[R0,R1]
  491:                 }
 0000006E  E000      B           L_90  ; T=0x00000072
 00000070          L_89:
  494:                        uc_ptr++;
 00000070  3401      ADD         R4,#0x1
  495:                    }
 00000072          L_90:
  496:                 *temp_msg = *uc_ptr;         // writing a letter into msg_array
 00000072  1C20      MOV         R0,R4 ; uc_ptr
 00000074  7801      LDRB        R1,[R0,#0x0] ; uc_ptr
 00000076  1C28      MOV         R0,R5 ; temp_msg
 00000078  7001      STRB        R1,[R0,#0x0] ; temp_msg
  497:                 if(caps == 1)
 0000007A  A810      ADD         R0,R13,#0x40
 0000007C  7800      LDRB        R0,[R0,#0x0] ; caps
 0000007E  2801      CMP         R0,#0x1
 00000080  D134      BNE         L_93  ; T=0x000000EC
  499:                     *temp_msg -= 0x20;      // converting letters into CAPS
 00000082  1C28      MOV         R0,R5 ; temp_msg
 00000084  7801      LDRB        R1,[R0,#0x0] ; temp_msg
 00000086  3920      SUB         R1,#0x20
 00000088  1C28      MOV         R0,R5 ; temp_msg
 0000008A  7001      STRB        R1,[R0,#0x0] ; temp_msg
  501:             }
 0000008C  E02E      B           L_93  ; T=0x000000EC
 0000008E          L_88:
  504:                 uc_ptr = msg_arr[cur_key - 0x30];
 0000008E  1C30      MOV         R0,R6 ; cur_key
 00000090  0601      LSL         R1,R0,#0x18 ; cur_key
 00000092  0E09      LSR         R1,R1,#0x18
 00000094  0089      LSL         R1,R1,#0x2
 00000096  4800      LDR         R0,=0xFFFFFF44
 00000098  4468      ADD         R0,R13
 0000009A  5844      LDR         R4,[R0,R1]
  505:                 temp_msg++;
 0000009C  3501      ADD         R5,#0x1
  506:                 *temp_msg = *uc_ptr;
 0000009E  1C20      MOV         R0,R4 ; uc_ptr
 000000A0  7801      LDRB        R1,[R0,#0x0] ; uc_ptr
 000000A2  1C28      MOV         R0,R5 ; temp_msg
 000000A4  7001      STRB        R1,[R0,#0x0] ; temp_msg
  507:                 *(temp_msg + 1) = '\0';
 000000A6  2000      MOV         R0,#0x0
 000000A8  1C29      MOV         R1,R5 ; temp_msg
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 30  

 000000AA  7048      STRB        R0,[R1,#0x1]
  508:                 prev_key = cur_key;
 000000AC  1C31      MOV         R1,R6 ; cur_key
 000000AE  A800      ADD         R0,R13,#0x0
 000000B0  7001      STRB        R1,[R0,#0x0] ; prev_key
  510:         }
 000000B2  E01B      B           L_93  ; T=0x000000EC
 000000B4          L_87:
  511:         else if(cur_key == 'A')
 000000B4  1C30      MOV         R0,R6 ; cur_key
 000000B6  0600      LSL         R0,R0,#0x18 ; cur_key
 000000B8  0E00      LSR         R0,R0,#0x18
 000000BA  2841      CMP         R0,#0x41
 000000BC  D108      BNE         L_94  ; T=0x000000D0
  513:             *temp_msg = ' ';
 000000BE  2120      MOV         R1,#0x20
 000000C0  1C28      MOV         R0,R5 ; temp_msg
 000000C2  7001      STRB        R1,[R0,#0x0] ; temp_msg
  514:             if(temp_msg != text_msg)
 000000C4  1C39      MOV         R1,R7 ; text_msg
 000000C6  1C28      MOV         R0,R5 ; temp_msg
 000000C8  4288      CMP         R0,R1 ; temp_msg
 000000CA  D00F      BEQ         L_93  ; T=0x000000EC
  516:                 temp_msg--;
 000000CC  3D01      SUB         R5,#0x1
  518:         }
 000000CE  E00D      B           L_93  ; T=0x000000EC
 000000D0          L_94:
  519:         else if(cur_key == '.')
 000000D0  1C30      MOV         R0,R6 ; cur_key
 000000D2  0600      LSL         R0,R0,#0x18 ; cur_key
 000000D4  0E00      LSR         R0,R0,#0x18
 000000D6  282E      CMP         R0,#0x2E
 000000D8  D108      BNE         L_93  ; T=0x000000EC
  521:             if(caps == 1)
 000000DA  A810      ADD         R0,R13,#0x40
 000000DC  7801      LDRB        R1,[R0,#0x0] ; caps
 000000DE  2901      CMP         R1,#0x1
 000000E0  D102      BNE         L_98  ; T=0x000000E8
  523:                 caps = 0;
 000000E2  2100      MOV         R1,#0x0
 000000E4  7001      STRB        R1,[R0,#0x0] ; caps
  524:             }       
 000000E6  E001      B           L_93  ; T=0x000000EC
 000000E8          L_98:
  527:                 caps = 1;
 000000E8  2101      MOV         R1,#0x1
 000000EA  7001      STRB        R1,[R0,#0x0] ; caps
  529:         }
 000000EC          L_93:
  530:         lcd_line_disp(text_msg, 0, 1);
 000000EC  1C38      MOV         R0,R7 ; text_msg
 000000EE  2100      MOV         R1,#0x0
 000000F0  2201      MOV         R2,#0x1
 000000F2  F7FF      BL          lcd_line_disp?T  ; T=0x0001  (1)
 000000F4  FF85      BL          lcd_line_disp?T  ; T=0x0001  (2)
  531:         key_delay(100);
 000000F6  2064      MOV         R0,#0x64
 000000F8  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000000FA  FF82      BL          key_delay?T  ; T=0x0001  (2)
  532:     }
 000000FC          L_83:
 000000FC  1C30      MOV         R0,R6 ; cur_key
 000000FE  0600      LSL         R0,R0,#0x18 ; cur_key
 00000100  0E00      LSR         R0,R0,#0x18
 00000102  2844      CMP         R0,#0x44
ARM COMPILER V2.50a,  gsm_app                                                              06/06/13  14:15:37  PAGE 31  

 00000104  D193      BNE         L_85  ; T=0x0000002E
 00000106            ; SCOPE-END
  533: }
 00000106  B011      ADD         R13,#0x44
 00000108  BCF0      POP         {R4-R7}
 0000010A  BC08      POP         {R3}
 0000010C  4718      BX          R3
 0000010E          ENDP ; 'GSM_APP_write?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =      4216
  const size           =       303
End of Module Information.


ARM COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
