ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE zigbee
OBJECT MODULE PLACED IN zigbee.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe zigbee.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"    
    2          
    3          #define RESP_ON_UART0 1
    4          
    5          void ZIGB_cmd_mode();
    6          void ZIGB_wr_cmd();
    7          void ZIGB_exit_cmd();
    8          void ZIGB_dl_wrt(U8*);
    9          void ZIGB_pan_wrt(U8*);
   10          void ZIGB_my_wrt(U8*);
   11          void ZIGB_ch_wrt(U8*);
   12          void ZIGB_setting();
   13          void ZIGB_my_read();
   14          void ZIGB_pan_read();
   15          void ZIGB_write();
   16          void ZIGB_read();
   17          void ZIGB_wr_page();
   18          void ZIGB_menu_page();
   19          
   20          
   21          U8 Uc_zigb_pan[10] = {"0000"};
   22          U8 Uc_zigb_ch[10]  = {"0C"};
   23          U8 Uc_zigb_my[10]  = {"0000"};
   24          U8 Uc_zigb_dl[10]  = {"0000"};
   25          
   26          U8 Uc_zb_cmd = 0;
   27          
   28          U8 ZIGB_responce(U8, U8*);  
   29               
   30          /**********************************************************************************/
   31          /* Function Name: ZIGB_cmd_mode()                                                 */
   32          /* Arguments    : NONE                                                            */
   33          /* Return Types : NONE                                                            */
   34          /* Description  : The function enters into the command mode.                      */
   35          /**********************************************************************************/
   36          
   37          void ZIGB_cmd_mode()
   38          {
   39   1       uart1_send_string("+++");
   40   1       clrscr();
   41   1       lcd_line1_disp("CMD Mode",0);
   42   1       
   43   1       if(ZIGB_responce(3,"OK\r"))
   44   1        {
   45   2         Uc_zb_cmd = 1;
   46   2         #if RESP_ON_UART0 == 1
   47   2         uart0_send_string("\n\n\rCMD: OK ");
   48   2         #endif
   49   2         ms_delay(10000);
   50   2        }
   51   1       else
   52   1        {
   53   2         Uc_zb_cmd = 0;
   54   2         #if RESP_ON_UART0 == 1
   55   2         uart0_send_string("\n\n\rCMD: ERROR ");
   56   2         #endif
   57   2         ms_delay(10000);
   58   2        }
   59   1      }
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 2   

   60          
   61          /**********************************************************************************/
   62          /* Function Name: ZIGB_wr_cmd()                                                   */
   63          /* Arguments    : NONE                                                            */
   64          /* Return Types : NONE                                                            */
   65          /* Description  : The function sends wr cmd to ZigBee module.                     */
   66          /**********************************************************************************/
   67          
   68          void ZIGB_wr_cmd()
   69          {
   70   1       uart1_send_string("ATWR\r");
   71   1       if(ZIGB_responce(3,"OK\r"))
   72   1        {
   73   2         #if RESP_ON_UART0 == 1
   74   2          uart0_send_string("\n\n\rWR CMD: OK ");
   75   2         #endif
   76   2         ms_delay(10000);
   77   2        }
   78   1       else
   79   1        {
   80   2         #if RESP_ON_UART0 == 1
   81   2          uart0_send_string("\n\n\rWR CMD: ERROR ");
   82   2         #endif
   83   2         ms_delay(10000);
   84   2        }
   85   1      }
   86           
   87          /**********************************************************************************/
   88          /* Function Name: ZIGB_exit_cmd()                                                 */
   89          /* Arguments    : NONE                                                            */
   90          /* Return Types : NONE                                                            */
   91          /* Description  : The function exits from the command mode.                       */
   92          /**********************************************************************************/
   93          
   94          void ZIGB_exit_cmd()
   95          {
   96   1       uart1_send_string("ATCN\r");
   97   1       if(ZIGB_responce(3,"OK\r"))
   98   1        {
   99   2         #if RESP_ON_UART0 == 1
  100   2         uart0_send_string("\n\n\rExit CMD: OK ");
  101   2         #endif
  102   2         ms_delay(10000);
  103   2        }
  104   1       else
  105   1        {
  106   2         #if RESP_ON_UART0 == 1
  107   2         uart0_send_string("\n\n\rExit CMD: ERROR ");
  108   2         #endif
  109   2         ms_delay(10000);
  110   2        }
  111   1      }
  112          
  113          
  114          /**********************************************************************************/
  115          /* Function Name: ZIGB_dl_wrt()                                                   */
  116          /* Arguments    : U8 *dest_add(pointer to the array which will hold the           */
  117          /*                destination add )                                               */
  118          /* Return Types : NONE                                                            */
  119          /* Description  : The function writes destination add. to ZigBee.                 */
  120          /**********************************************************************************/
  121          
  122          void ZIGB_dl_wrt(U8 *dest_add)
  123          {
  124   1        uart1_send_string("ATDL");
  125   1        uart1_send_string(dest_add);
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 3   

  126   1        uart1_send_byte('\r');
  127   1        if(ZIGB_responce(3,"OK\r"))
  128   1        {
  129   2         #if RESP_ON_UART0 == 1
  130   2         uart0_send_string("\n\n\rDL: OK ");
  131   2         #endif
  132   2         ms_delay(10000);
  133   2        }
  134   1       else
  135   1        {
  136   2         #if RESP_ON_UART0 == 1
  137   2         uart0_send_string("\n\n\rDL: ERROR ");
  138   2         #endif
  139   2         ms_delay(10000);
  140   2        }
  141   1      
  142   1      }
  143          
  144          
  145          /**********************************************************************************/
  146          /* Function Name: ZIGB_pan_wrt()                                                  */
  147          /* Arguments    : U8 *pan_add(pointer to the array which will hold the PAN add )  */                                                      
  148          /* Return Types : NONE                                                            */
  149          /* Description  : The function writes PAN add. to ZigBee.                         */
  150          /**********************************************************************************/
  151          
  152          void ZIGB_pan_wrt(U8 *pan_add)
  153          {
  154   1        uart1_send_string("ATID");
  155   1        uart1_send_string(pan_add);
  156   1        uart1_send_byte('\r');
  157   1      
  158   1         if(ZIGB_responce(3,"OK\r"))
  159   1        {
  160   2         #if RESP_ON_UART0 == 1
  161   2         uart0_send_string("\n\n\rPAN: OK ");
  162   2         #endif
  163   2         ms_delay(10000);
  164   2        }
  165   1       else
  166   1        {
  167   2         #if RESP_ON_UART0 == 1
  168   2         uart0_send_string("\n\n\rPAN: ERROR ");
  169   2         #endif
  170   2         ms_delay(10000);
  171   2        }
  172   1      }
  173          
  174          /**********************************************************************************/
  175          /* Function Name: ZIGB_my_wrt()                                                   */
  176          /* Arguments    : U8 *my_add(pointer to the array which will hold the MY add )    */                                                      
  177          /* Return Types : NONE                                                            */
  178          /* Description  : The function writes MY add. to ZigBee.                          */
  179          /**********************************************************************************/
  180          
  181          void ZIGB_my_wrt(U8 *my_add)
  182          {
  183   1        uart1_send_string("ATMY");
  184   1        uart1_send_string(my_add);
  185   1        uart1_send_byte('\r');
  186   1      
  187   1         if(ZIGB_responce(3,"OK\r"))
  188   1        {
  189   2         #if RESP_ON_UART0 == 1
  190   2         uart0_send_string("\n\n\rMY: OK ");
  191   2         #endif
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 4   

  192   2         ms_delay(10000);
  193   2        }
  194   1       else
  195   1        {
  196   2         #if RESP_ON_UART0 == 1
  197   2         uart0_send_string("\n\n\rMY: ERROR ");
  198   2         #endif
  199   2         ms_delay(10000);                   
  200   2        }
  201   1      }
  202          
  203          
  204          /**********************************************************************************/
  205          /* Function Name: ZIGB_ch_wrt()                                                   */
  206          /* Arguments    : U8 *ch_no(pointer to the array which will hold the MY add )     */                                                      
  207          /* Return Types : NONE                                                            */
  208          /* Description  : The function writes MY add. to ZigBee.                          */
  209          /**********************************************************************************/
  210          
  211          void ZIGB_ch_wrt(U8 *ch_no)
  212          {
  213   1        uart1_send_string("ATCH");
  214   1        uart1_send_string(ch_no);
  215   1        uart1_send_byte('\r');
  216   1      
  217   1         if(ZIGB_responce(3,"OK\r"))
  218   1        {
  219   2         #if RESP_ON_UART0 == 1
  220   2         uart0_send_string("\n\n\rCH: OK ");
  221   2         #endif
  222   2         ms_delay(10000);
  223   2        }
  224   1       else
  225   1        {
  226   2         #if RESP_ON_UART0 == 1
  227   2         uart0_send_string("\n\n\rCH: ERROR ");
  228   2         #endif
  229   2         ms_delay(10000);
  230   2        }
  231   1      }
  232          
  233          /**********************************************************************************/
  234          /* Function Name: ZIGB_responce()                                                 */
  235          /* Arguments    : U8 resp_cnt(defines the responce count)                         */
  236          /*                U8 *resp (pointer to array containning expected responce)       */
  237          /* Return Types : NONE                                                            */
  238          /* Description  : This function waits for ZigBee to respond on the entered        */
  239          /*                AT commands.                                                    */
  240          /**********************************************************************************/
  241          
  242          U8 ZIGB_responce(U8 resp_cnt, U8 *resp)
  243          {
  244   1        U8 temp_arr[20]= "000";
  245   1        U8 temp_cnt ;
  246   1        for(temp_cnt = 0; temp_cnt < resp_cnt; temp_cnt++)
  247   1         {
  248   2          timer1_on();
  249   2          while((U1LSR & 0x01) == 0)
  250   2          {
  251   3           if(Uc_zb_tout == 1)
  252   3           {
  253   4            break;
  254   4           }
  255   3          }
  256   2          if(Uc_zb_tout == 1)
  257   2          {
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 5   

  258   3           break;
  259   3          }
  260   2          timer1_off();
  261   2          temp_arr[temp_cnt] = U1RBR;
  262   2         }    
  263   1        if(str_cmp(&temp_arr[0],resp))
  264   1         {
  265   2           return 1;
  266   2         }
  267   1        else
  268   1         {
  269   2          return 0;
  270   2         }
  271   1      }
  272          
  273          /**********************************************************************************/
  274          /* Function Name: ZIGB_setting()                                                  */
  275          /* Arguments    : NONE                                                            */
  276          /* Return Types : NONE                                                            */
  277          /* Description  : This function provides an interface for ZigBee settings through */
  278          /*                AT Commands. This fn is divided into two parts:                 */
  279          /*                a) Read   b) Write                                              */
  280          /**********************************************************************************/
  281          
  282          void ZIGB_setting()
  283          {
  284   1       ZIGB_menu_page();
  285   1       
  286   1       while((Uc_key_temp = get_key(1)) != 'A')
  287   1       {
  288   2        if(Uc_key_temp == '1')
  289   2        {
  290   3          Uc_key_temp = 0;
  291   3      
  292   3          #if RESP_ON_UART0 == 1
  293   3          uart0_send_string("\n\n\rReading ZigBee Parameters...");
  294   3          #endif
  295   3          ZIGB_read();
  296   3          ZIGB_menu_page();
  297   3        }
  298   2        else if(Uc_key_temp == '2')
  299   2        {
  300   3          Uc_key_temp = 0;
  301   3          ms_delay(1000);
  302   3          #if RESP_ON_UART0 == 1
  303   3          uart0_send_string("\n\n\rWritting ZigBee Parameters...");
  304   3          #endif
  305   3          ZIGB_write();
  306   3          ZIGB_menu_page();
  307   3        }
  308   2       }
  309   1      }
  310          
  311          /**********************************************************************************/
  312          /* Function Name: ZIGB_my_read()                                                  */
  313          /* Arguments    : NONE                                                            */
  314          /* Return Types : NONE (Stores MY add. in a Global array Uc_zigb_my[])            */
  315          /* Description  : AT command function to read MY address of ZigBee                */
  316          /*                                                                                */
  317          /**********************************************************************************/
  318          
  319          void ZIGB_my_read()
  320          {
  321   1        U8 temp_arr[20]= "000";
  322   1        U8 temp_cnt;
  323   1        
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 6   

  324   1        uart1_send_string("ATMY");
  325   1        uart1_send_byte('\r');
  326   1      
  327   1        for(temp_cnt = 0; Uc_zigb_my[temp_cnt - 1] != '\r'; temp_cnt++)
  328   1        {
  329   2          while((U1LSR & 0x01) == 0)
  330   2          {
  331   3           if(Uc_zb_tout == 1)
  332   3           {
  333   4            break;
  334   4           }
  335   3          }
  336   2          if(Uc_zb_tout == 1)
  337   2           {
  338   3            break;
  339   3           }
  340   2          Uc_zigb_my[temp_cnt] = U1RBR;
  341   2        }
  342   1      
  343   1        Uc_zigb_my[temp_cnt - 1] = '\0';
  344   1      
  345   1        uart0_send_string("\n\n\rMY Address: ");
  346   1        uart0_send_string(&Uc_zigb_my[0]);
  347   1      }
  348          
  349          
  350          /**********************************************************************************/
  351          /* Function Name: ZIGB_pan_read()                                                 */
  352          /* Arguments    : NONE                                                            */
  353          /* Return Types : NONE (Stores PAN add. in a Global array Uc_zigb_pan[])          */
  354          /* Description  : AT command function to read PAN address of ZigBee               */
  355          /*                                                                                */
  356          /**********************************************************************************/
  357          
  358          void ZIGB_pan_read()
  359          {
  360   1        U8 temp_arr[20]= "000";
  361   1        U8 temp_cnt;
  362   1        
  363   1        uart1_send_string("ATID");
  364   1        uart1_send_byte('\r');
  365   1      
  366   1        for(temp_cnt = 0; Uc_zigb_pan[temp_cnt - 1] != '\r'; temp_cnt++)
  367   1        {
  368   2          while((U1LSR & 0x01) == 0);
  369   2          Uc_zigb_pan[temp_cnt] = U1RBR;
  370   2        }
  371   1      
  372   1        Uc_zigb_my[temp_cnt - 1] = '\0';
  373   1      
  374   1        uart0_send_string("\n\n\rPAN Address: ");
  375   1        uart0_send_string(&Uc_zigb_pan[0]);
  376   1      }
  377          
  378          
  379          /**********************************************************************************/
  380          /* Function Name: ZIGB_read()                                                     */
  381          /* Arguments    : NONE                                                            */
  382          /* Return Types : NONE                                                            */
  383          /* Description  : reads all the basic parameters of Zigbee                        */
  384          /*                                                                                */
  385          /**********************************************************************************/
  386          
  387          void ZIGB_read()
  388          {
  389   1       ZIGB_cmd_mode();
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 7   

  390   1       ZIGB_my_read(); 
  391   1       ZIGB_pan_read();
  392   1       ZIGB_exit_cmd();
  393   1      } 
  394          
  395          /**********************************************************************************/
  396          /* Function Name: ZIGB_write()                                                    */
  397          /* Arguments    : NONE                                                            */
  398          /* Return Types : NONE                                                            */
  399          /* Description  : writes all the basic parameters of Zigbee                       */
  400          /*                PAN, DL, CH, MY                                                 */
  401          /**********************************************************************************/
  402          
  403          void ZIGB_write()
  404          {
  405   1       ZIGB_read();
  406   1      
  407   1       ZIGB_wr_page();
  408   1       
  409   1       Uc_key_temp = get_key(0);
  410   1       while(Uc_key_temp != 'D')
  411   1       {
  412   2        Uc_key_temp = get_key(0);
  413   2        wdt_feed(0x03ffffff);
  414   2        lcd_line1_disp(&Uc_zigb_pan[0],10);
  415   2        lcd_line2_disp(&Uc_zigb_ch[0],10);
  416   2        lcd_line3_disp(&Uc_zigb_my[0],10);
  417   2        lcd_line4_disp(&Uc_zigb_dl[0],10);
  418   2        
  419   2      
  420   2        if(Uc_key_temp == '1')
  421   2        { 
  422   3          clrscr();
  423   3          lcd_line1_disp("PAN",0);
  424   3          key_usr_ip(4,&Uc_zigb_pan[0],1,10);
  425   3          ZIGB_wr_page();
  426   3        }
  427   2        else if(Uc_key_temp == '2')
  428   2         {
  429   3          clrscr();
  430   3          lcd_line1_disp("CH",0);
  431   3          key_usr_ip(2,&Uc_zigb_ch[0],1,10);
  432   3          ZIGB_wr_page();
  433   3         }
  434   2        else if(Uc_key_temp == '3')
  435   2         {
  436   3          clrscr();
  437   3          lcd_line1_disp("MY",0);
  438   3          key_usr_ip(4,&Uc_zigb_my[0],1,10);
  439   3          ZIGB_wr_page();
  440   3         }
  441   2        else if(Uc_key_temp == '4')
  442   2         {
  443   3          clrscr();
  444   3          lcd_line1_disp("DL",0);
  445   3          key_usr_ip(4,&Uc_zigb_dl[0],1,10);
  446   3          ZIGB_wr_page();
  447   3         }
  448   2       }
  449   1      
  450   1       ms_delay(500);
  451   1      
  452   1       // Writing to ZigBee //
  453   1       
  454   1       ZIGB_cmd_mode();
  455   1       ZIGB_dl_wrt(&Uc_zigb_dl[0]);
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 8   

  456   1       ZIGB_pan_wrt(&Uc_zigb_pan[0]);
  457   1       ZIGB_my_wrt(&Uc_zigb_my[0]);
  458   1       ZIGB_ch_wrt(&Uc_zigb_ch[0]);
  459   1      
  460   1       ZIGB_wr_cmd();
  461   1      
  462   1       ZIGB_exit_cmd();
  463   1      }
  464          
  465          /**********************************************************************************/
  466          /* Function Name: ZIGB_wr_page()                                                  */
  467          /* Arguments    : NONE                                                            */
  468          /* Return Types : NONE                                                            */
  469          /* Description  : Static content displayed on 3rd page for Zigbee settings        */
  470          /*                This page is related  with the Writing to ZigBee                */
  471          /**********************************************************************************/
  472          
  473          void ZIGB_wr_page()
  474          {
  475   1       clrscr();
  476   1       lcd_line1_disp("PAN",0);
  477   1       lcd_line2_disp("CH",0);
  478   1       lcd_line3_disp("MY",0);
  479   1       lcd_line4_disp("DL",0);
  480   1      }
  481          
  482          /**********************************************************************************/
  483          /* Function Name: ZIGB_menu_page()                                                */
  484          /* Arguments    : NONE                                                            */
  485          /* Return Types : NONE                                                            */
  486          /* Description  : Static content displayed on 2nd page for Zigbee settings        */
  487          /*                                                                                */
  488          /**********************************************************************************/
  489          
  490          void ZIGB_menu_page()
  491          {
  492   1       clrscr();
  493   1       lcd_line1_disp("ZigBee Settings",2);
  494   1       lcd_line2_disp("Read    [1]",0);
  495   1       lcd_line3_disp("Write   [2]",0);
  496   1       ms_delay(1000);
  497   1      }         
  498          
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (uart1_send_byte?T)
 EXTERN CODE16 (uart0_send_string?T)
 EXTERN CODE16 (uart1_send_string?T)
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (timer1_on?T)
 EXTERN CODE16 (timer1_off?T)
 EXTERN DATA (Uc_zb_tout)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (key_usr_ip?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (str_cmp?T)



*** PUBLICS:
 PUBLIC         ZIGB_cmd_mode?T
 PUBLIC         ZIGB_exit_cmd?T
 PUBLIC         ZIGB_dl_wrt?T
 PUBLIC         ZIGB_setting?T
 PUBLIC         ZIGB_wr_cmd?T
 PUBLIC         ZIGB_pan_wrt?T
 PUBLIC         ZIGB_my_wrt?T
 PUBLIC         ZIGB_ch_wrt?T
 PUBLIC         ZIGB_my_read?T
 PUBLIC         ZIGB_pan_read?T
 PUBLIC         ZIGB_write?T
 PUBLIC         ZIGB_read?T
 PUBLIC         ZIGB_wr_page?T
 PUBLIC         ZIGB_menu_page?T
 PUBLIC         ZIGB_responce?T
 PUBLIC         Uc_zigb_pan
 PUBLIC         Uc_zigb_ch
 PUBLIC         Uc_zigb_my
 PUBLIC         Uc_zigb_dl
 PUBLIC         Uc_zb_cmd



*** DATA SEGMENT '?CON?zigbee':
 00000000          ??S_37:
 00000000            DB          'Write   [2]',0x00
 0000000C          ??S_36:
 0000000C            DB          'Read    [1]',0x00
 00000018          ??S_35:
 00000018            DB          'ZigBee Settings',0x00
 00000028          ??S_34:
 00000028            DB          'DL',0x00
 0000002B          ??S_33:
 0000002B            DB          'MY',0x00
 0000002E          ??S_32:
 0000002E            DB          'CH',0x00
 00000031          ??S_31:
 00000031            DB          'PAN',0x00
 00000035          ??S_30:
 00000035            DB          0x0A,0x0A,0x0D,'PAN Address: ',0x00
 00000046          ??S_29:
 00000046            DB          0x0A,0x0A,0x0D,'MY Address: ',0x00
 00000056          ??S_28:
 00000056            DB          0x0A,0x0A,0x0D,'Writting ZigBee Paramet'
 00000070            DB          'ers...',0x00
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 10  

 00000077          ??S_27:
 00000077            DB          0x0A,0x0A,0x0D,'Reading ZigBee Paramete'
 00000091            DB          'rs...',0x00
 00000097          ??S_25:
 00000097            DB          0x0A,0x0A,0x0D,'CH: ERROR ',0x00
 000000A5          ??S_24:
 000000A5            DB          0x0A,0x0A,0x0D,'CH: OK ',0x00
 000000B0          ??S_23:
 000000B0            DB          'ATCH',0x00
 000000B5          ??S_22:
 000000B5            DB          0x0A,0x0A,0x0D,'MY: ERROR ',0x00
 000000C3          ??S_21:
 000000C3            DB          0x0A,0x0A,0x0D,'MY: OK ',0x00
 000000CE          ??S_20:
 000000CE            DB          'ATMY',0x00
 000000D3          ??S_19:
 000000D3            DB          0x0A,0x0A,0x0D,'PAN: ERROR ',0x00
 000000E2          ??S_18:
 000000E2            DB          0x0A,0x0A,0x0D,'PAN: OK ',0x00
 000000EE          ??S_17:
 000000EE            DB          'ATID',0x00
 000000F3          ??S_16:
 000000F3            DB          0x0A,0x0A,0x0D,'DL: ERROR ',0x00
 00000101          ??S_15:
 00000101            DB          0x0A,0x0A,0x0D,'DL: OK ',0x00
 0000010C          ??S_14:
 0000010C            DB          'ATDL',0x00
 00000111          ??S_13:
 00000111            DB          0x0A,0x0A,0x0D,'Exit CMD: ERROR ',0x00
 00000125          ??S_12:
 00000125            DB          0x0A,0x0A,0x0D,'Exit CMD: OK ',0x00
 00000136          ??S_11:
 00000136            DB          'ATCN',0x0D,0x00
 0000013C          ??S_10:
 0000013C            DB          0x0A,0x0A,0x0D,'WR CMD: ERROR ',0x00
 0000014E          ??S_9:
 0000014E            DB          0x0A,0x0A,0x0D,'WR CMD: OK ',0x00
 0000015D          ??S_8:
 0000015D            DB          'ATWR',0x0D,0x00
 00000163          ??S_7:
 00000163            DB          0x0A,0x0A,0x0D,'CMD: ERROR ',0x00
 00000172          ??S_6:
 00000172            DB          0x0A,0x0A,0x0D,'CMD: OK ',0x00
 0000017E          ??S_5:
 0000017E            DB          'OK',0x0D,0x00
 00000182          ??S_4:
 00000182            DB          'CMD Mode',0x00
 0000018B          ??S_3:
 0000018B            DB          '+++',0x00
 0000018F            ALIGN       4
 00000190          ?tpl?0001:
 00000190           BEGIN_INIT
 00000190            DB          '000',0x00
 00000194            SPACE       16
 000001A4           END_INIT
 000001A4          ?tpl?0002:
 000001A4           BEGIN_INIT
 000001A4            DB          '000',0x00
 000001A8            SPACE       16
 000001B8           END_INIT
 000001B8          ?tpl?0003:
 000001B8           BEGIN_INIT
 000001B8            DB          '000',0x00
 000001BC            SPACE       16
 000001CC           END_INIT

*** DATA SEGMENT '?DT0?zigbee':
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 11  

 00000000          Uc_zigb_pan:
 00000000           BEGIN_INIT
 00000000            DB          '0000',0x00
 00000005            SPACE       5
 0000000A           END_INIT
 0000000A          Uc_zigb_ch:
 0000000A           BEGIN_INIT
 0000000A            DB          '0C',0x00
 0000000D            SPACE       7
 00000014           END_INIT
 00000014          Uc_zigb_my:
 00000014           BEGIN_INIT
 00000014            DB          '0000',0x00
 00000019            SPACE       5
 0000001E           END_INIT
 0000001E          Uc_zigb_dl:
 0000001E           BEGIN_INIT
 0000001E            DB          '0000',0x00
 00000023            SPACE       5
 00000028           END_INIT
 00000028          Uc_zb_cmd:
 00000028           BEGIN_INIT
 00000028  00        DB          0x0
 00000029           END_INIT



*** CODE SEGMENT '?PR?ZIGB_cmd_mode?T?zigbee':
   37: void ZIGB_cmd_mode()
 00000000  B500      PUSH        {LR}
   39:  uart1_send_string("+++");
 00000002  4800      LDR         R0,=??S_3 ; ??S_3
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
   40:  clrscr();
 00000008  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          clrscr?T  ; T=0x0001  (2)
   41:  lcd_line1_disp("CMD Mode",0);
 0000000C  4800      LDR         R0,=??S_4 ; ??S_4
 0000000E  2100      MOV         R1,#0x0
 00000010  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_line1_disp?T  ; T=0x0001  (2)
   43:  if(ZIGB_responce(3,"OK\r"))
 00000014  4800      LDR         R1,=??S_5 ; ??S_5
 00000016  2003      MOV         R0,#0x3
 00000018  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001C  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 0000001E  D009      BEQ         L_1  ; T=0x00000034
   45:    Uc_zb_cmd = 1;
 00000020  2101      MOV         R1,#0x1
 00000022  4800      LDR         R0,=Uc_zb_cmd ; Uc_zb_cmd
 00000024  7001      STRB        R1,[R0,#0x0] ; Uc_zb_cmd
   47:    uart0_send_string("\n\n\rCMD: OK ");
 00000026  4800      LDR         R0,=??S_6 ; ??S_6
 00000028  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          uart0_send_string?T  ; T=0x0001  (2)
   49:    ms_delay(10000);
 0000002C  4800      LDR         R0,=0x2710
 0000002E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000030  FFE7      BL          ms_delay?T  ; T=0x0001  (2)
   50:   }
 00000032  E008      B           L_2  ; T=0x00000046
 00000034          L_1:
   53:    Uc_zb_cmd = 0;
 00000034  2100      MOV         R1,#0x0
 00000036  4800      LDR         R0,=Uc_zb_cmd ; Uc_zb_cmd
 00000038  7001      STRB        R1,[R0,#0x0] ; Uc_zb_cmd
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 12  

   55:    uart0_send_string("\n\n\rCMD: ERROR ");
 0000003A  4800      LDR         R0,=??S_7 ; ??S_7
 0000003C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000003E  FFE0      BL          uart0_send_string?T  ; T=0x0001  (2)
   57:    ms_delay(10000);
 00000040  4800      LDR         R0,=0x2710
 00000042  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000044  FFDD      BL          ms_delay?T  ; T=0x0001  (2)
   58:   }
 00000046          L_2:
   59: }
 00000046  BC08      POP         {R3}
 00000048  4718      BX          R3
 0000004A          ENDP ; 'ZIGB_cmd_mode?T'


*** CODE SEGMENT '?PR?ZIGB_wr_cmd?T?zigbee':
   68: void ZIGB_wr_cmd()
 00000000  B500      PUSH        {LR}
   70:  uart1_send_string("ATWR\r");
 00000002  4800      LDR         R0,=??S_8 ; ??S_8
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
   71:  if(ZIGB_responce(3,"OK\r"))
 00000008  4800      LDR         R1,=??S_5 ; ??S_5
 0000000A  2003      MOV         R0,#0x3
 0000000C  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          ZIGB_responce?T  ; T=0x0001  (2)
 00000010  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000012  D006      BEQ         L_3  ; T=0x00000022
   74:      uart0_send_string("\n\n\rWR CMD: OK ");
 00000014  4800      LDR         R0,=??S_9 ; ??S_9
 00000016  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000018  FFF3      BL          uart0_send_string?T  ; T=0x0001  (2)
   76:    ms_delay(10000);
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
   77:   }
 00000020  E005      B           L_4  ; T=0x0000002E
 00000022          L_3:
   81:     uart0_send_string("\n\n\rWR CMD: ERROR ");
 00000022  4800      LDR         R0,=??S_10 ; ??S_10
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
   83:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
   84:   }
 0000002E          L_4:
   85: }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'ZIGB_wr_cmd?T'


*** CODE SEGMENT '?PR?ZIGB_exit_cmd?T?zigbee':
   94: void ZIGB_exit_cmd()
 00000000  B500      PUSH        {LR}
   96:  uart1_send_string("ATCN\r");
 00000002  4800      LDR         R0,=??S_11 ; ??S_11
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
   97:  if(ZIGB_responce(3,"OK\r"))
 00000008  4800      LDR         R1,=??S_5 ; ??S_5
 0000000A  2003      MOV         R0,#0x3
 0000000C  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          ZIGB_responce?T  ; T=0x0001  (2)
 00000010  2800      CMP         R0,#0x0 ; ZIGB_responce?T
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 13  

 00000012  D006      BEQ         L_5  ; T=0x00000022
  100:    uart0_send_string("\n\n\rExit CMD: OK ");
 00000014  4800      LDR         R0,=??S_12 ; ??S_12
 00000016  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000018  FFF3      BL          uart0_send_string?T  ; T=0x0001  (2)
  102:    ms_delay(10000);
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
  103:   }
 00000020  E005      B           L_6  ; T=0x0000002E
 00000022          L_5:
  107:    uart0_send_string("\n\n\rExit CMD: ERROR ");
 00000022  4800      LDR         R0,=??S_13 ; ??S_13
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  109:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  110:   }
 0000002E          L_6:
  111: }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'ZIGB_exit_cmd?T'


*** CODE SEGMENT '?PR?ZIGB_dl_wrt?T?zigbee':
  122: void ZIGB_dl_wrt(U8 *dest_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; dest_add
 00000004  ---- Variable 'dest_add' assigned to Register 'R4' ----
  124:   uart1_send_string("ATDL");
 00000004  4800      LDR         R0,=??S_14 ; ??S_14
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  125:   uart1_send_string(dest_add);
 0000000A  1C20      MOV         R0,R4 ; dest_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  126:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  127:   if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_5 ; ??S_5
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_7  ; T=0x00000030
  130:    uart0_send_string("\n\n\rDL: OK ");
 00000022  4800      LDR         R0,=??S_15 ; ??S_15
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  132:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  133:   }
 0000002E  E005      B           L_8  ; T=0x0000003C
 00000030          L_7:
  137:    uart0_send_string("\n\n\rDL: ERROR ");
 00000030  4800      LDR         R0,=??S_16 ; ??S_16
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  139:    ms_delay(10000);
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 14  

 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  140:   }
 0000003C          L_8:
  142: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_dl_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_pan_wrt?T?zigbee':
  152: void ZIGB_pan_wrt(U8 *pan_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; pan_add
 00000004  ---- Variable 'pan_add' assigned to Register 'R4' ----
  154:   uart1_send_string("ATID");
 00000004  4800      LDR         R0,=??S_17 ; ??S_17
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  155:   uart1_send_string(pan_add);
 0000000A  1C20      MOV         R0,R4 ; pan_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  156:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  158:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_5 ; ??S_5
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_9  ; T=0x00000030
  161:    uart0_send_string("\n\n\rPAN: OK ");
 00000022  4800      LDR         R0,=??S_18 ; ??S_18
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  163:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  164:   }
 0000002E  E005      B           L_10  ; T=0x0000003C
 00000030          L_9:
  168:    uart0_send_string("\n\n\rPAN: ERROR ");
 00000030  4800      LDR         R0,=??S_19 ; ??S_19
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  170:    ms_delay(10000);
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  171:   }
 0000003C          L_10:
  172: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_pan_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_my_wrt?T?zigbee':
  181: void ZIGB_my_wrt(U8 *my_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; my_add
 00000004  ---- Variable 'my_add' assigned to Register 'R4' ----
  183:   uart1_send_string("ATMY");
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 15  

 00000004  4800      LDR         R0,=??S_20 ; ??S_20
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  184:   uart1_send_string(my_add);
 0000000A  1C20      MOV         R0,R4 ; my_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  185:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  187:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_5 ; ??S_5
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_11  ; T=0x00000030
  190:    uart0_send_string("\n\n\rMY: OK ");
 00000022  4800      LDR         R0,=??S_21 ; ??S_21
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  192:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  193:   }
 0000002E  E005      B           L_12  ; T=0x0000003C
 00000030          L_11:
  197:    uart0_send_string("\n\n\rMY: ERROR ");
 00000030  4800      LDR         R0,=??S_22 ; ??S_22
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  199:    ms_delay(10000);                   
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  200:   }
 0000003C          L_12:
  201: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_my_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_ch_wrt?T?zigbee':
  211: void ZIGB_ch_wrt(U8 *ch_no)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; ch_no
 00000004  ---- Variable 'ch_no' assigned to Register 'R4' ----
  213:   uart1_send_string("ATCH");
 00000004  4800      LDR         R0,=??S_23 ; ??S_23
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  214:   uart1_send_string(ch_no);
 0000000A  1C20      MOV         R0,R4 ; ch_no
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  215:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  217:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_5 ; ??S_5
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 16  

 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_13  ; T=0x00000030
  220:    uart0_send_string("\n\n\rCH: OK ");
 00000022  4800      LDR         R0,=??S_24 ; ??S_24
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  222:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  223:   }
 0000002E  E005      B           L_14  ; T=0x0000003C
 00000030          L_13:
  227:    uart0_send_string("\n\n\rCH: ERROR ");
 00000030  4800      LDR         R0,=??S_25 ; ??S_25
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  229:    ms_delay(10000);
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  230:   }
 0000003C          L_14:
  231: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_ch_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_responce?T?zigbee':
  242: U8 ZIGB_responce(U8 resp_cnt, U8 *resp)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C0C      MOV         R4,R1 ; resp
 00000004  ---- Variable 'resp' assigned to Register 'R4' ----
 00000004  1C06      MOV         R6,R0 ; resp_cnt
 00000006  ---- Variable 'resp_cnt' assigned to Register 'R6' ----
 00000006  B085      SUB         R13,#0x14
  243: {
 00000008            ; SCOPE-START
  244:   U8 temp_arr[20]= "000";
 00000008  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 0000000A  A800      ADD         R0,R13,#0x0
 0000000C  2214      MOV         R2,#0x14
 0000000E          L_68:
 0000000E  780B      LDRB        R3,[R1,#0x0]
 00000010  7003      STRB        R3,[R0,#0x0]
 00000012  1C49      ADD         R1,R1,#0x1
 00000014  1C40      ADD         R0,R0,#0x1
 00000016  1E52      SUB         R2,R2,#0x1
 00000018  D1F9      BNE         L_68  ; T=0x0000000E
  246:   for(temp_cnt = 0; temp_cnt < resp_cnt; temp_cnt++)
 0000001A  2500      MOV         R5,#0x0
 0000001C  ---- Variable 'temp_cnt' assigned to Register 'R5' ----
 0000001C  E01B      B           L_17  ; T=0x00000056
 0000001E          L_18:
  248:     timer1_on();
 0000001E  F7FF      BL          timer1_on?T  ; T=0x0001  (1)
 00000020  FFEF      BL          timer1_on?T  ; T=0x0001  (2)
  249:        while((U1LSR & 0x01) == 0)
 00000022  E003      B           L_20  ; T=0x0000002C
 00000024          L_22:
  251:      if(Uc_zb_tout == 1)
 00000024  4800      LDR         R0,=Uc_zb_tout ; Uc_zb_tout
 00000026  7800      LDRB        R0,[R0,#0x0] ; Uc_zb_tout
 00000028  2801      CMP         R0,#0x1
 0000002A  D004      BEQ         L_21  ; T=0x00000036
  255:     }
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 17  

 0000002C          L_20:
 0000002C  4800      LDR         R0,=0xE0010014
 0000002E  7800      LDRB        R0,[R0,#0x0]
 00000030  2101      MOV         R1,#0x1
 00000032  4208      TST         R0,R1
 00000034  D0F6      BEQ         L_22  ; T=0x00000024
 00000036          L_21:
  256:     if(Uc_zb_tout == 1)
 00000036  4800      LDR         R0,=Uc_zb_tout ; Uc_zb_tout
 00000038  7800      LDRB        R0,[R0,#0x0] ; Uc_zb_tout
 0000003A  2801      CMP         R0,#0x1
 0000003C  D013      BEQ         L_16  ; T=0x00000066
  260:     timer1_off();
 0000003E  F7FF      BL          timer1_off?T  ; T=0x0001  (1)
 00000040  FFDF      BL          timer1_off?T  ; T=0x0001  (2)
  261:        temp_arr[temp_cnt] = U1RBR;
 00000042  4800      LDR         R0,=0xE0010000
 00000044  7800      LDRB        R0,[R0,#0x0]
 00000046  1C29      MOV         R1,R5 ; temp_cnt
 00000048  060A      LSL         R2,R1,#0x18 ; temp_cnt
 0000004A  0E12      LSR         R2,R2,#0x18
 0000004C  A900      ADD         R1,R13,#0x0
 0000004E  5488      STRB        R0,[R1,R2]
  262:    }    
 00000050  3501      ADD         R5,#0x1
 00000052  062D      LSL         R5,R5,#0x18
 00000054  0E2D      LSR         R5,R5,#0x18
 00000056          L_17:
 00000056  1C30      MOV         R0,R6 ; resp_cnt
 00000058  0601      LSL         R1,R0,#0x18 ; resp_cnt
 0000005A  0E09      LSR         R1,R1,#0x18
 0000005C  1C28      MOV         R0,R5 ; temp_cnt
 0000005E  0600      LSL         R0,R0,#0x18 ; temp_cnt
 00000060  0E00      LSR         R0,R0,#0x18
 00000062  4288      CMP         R0,R1
 00000064  D3DB      BCC         L_18  ; T=0x0000001E
 00000066          L_16:
  263:   if(str_cmp(&temp_arr[0],resp))
 00000066  A800      ADD         R0,R13,#0x0
 00000068  1C21      MOV         R1,R4 ; resp
 0000006A  F7FF      BL          str_cmp?T  ; T=0x0001  (1)
 0000006C  FFC9      BL          str_cmp?T  ; T=0x0001  (2)
 0000006E  2800      CMP         R0,#0x0 ; str_cmp?T
 00000070  D001      BEQ         L_26  ; T=0x00000076
  265:      return 1;
 00000072  2001      MOV         R0,#0x1
 00000074  E000      B           L_27  ; T=0x00000078
  266:    }
 00000076          L_26:
  269:     return 0;
 00000076  2000      MOV         R0,#0x0
  270:    }
 00000078            ; SCOPE-END
  271: }
 00000078          L_27:
 00000078  B005      ADD         R13,#0x14
 0000007A  BC70      POP         {R4-R6}
 0000007C  BC08      POP         {R3}
 0000007E  4718      BX          R3
 00000080          ENDP ; 'ZIGB_responce?T'


*** CODE SEGMENT '?PR?ZIGB_setting?T?zigbee':
  282: void ZIGB_setting()
 00000000  B510      PUSH        {R4,LR}
  284:  ZIGB_menu_page();
 00000002  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000004  FFFD      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 18  

  286:  while((Uc_key_temp = get_key(1)) != 'A')
 00000006  E01E      B           L_29  ; T=0x00000046
 00000008          L_31:
  288:   if(Uc_key_temp == '1')
 00000008  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000000A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000000C  1C04      MOV         R4,R0
 0000000E  2C31      CMP         R4,#0x31
 00000010  D10A      BNE         L_33  ; T=0x00000028
  290:       Uc_key_temp = 0;
 00000012  2100      MOV         R1,#0x0
 00000014  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000016  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
  293:     uart0_send_string("\n\n\rReading ZigBee Parameters...");
 00000018  4800      LDR         R0,=??S_27 ; ??S_27
 0000001A  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          uart0_send_string?T  ; T=0x0001  (2)
  295:     ZIGB_read();
 0000001E  F7FF      BL          ZIGB_read?T  ; T=0x0001  (1)
 00000020  FFEF      BL          ZIGB_read?T  ; T=0x0001  (2)
  296:     ZIGB_menu_page();
 00000022  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000024  FFED      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
  297:   }
 00000026  E00E      B           L_29  ; T=0x00000046
 00000028          L_33:
  298:   else if(Uc_key_temp == '2')
 00000028  2C32      CMP         R4,#0x32
 0000002A  D10C      BNE         L_29  ; T=0x00000046
  300:        Uc_key_temp = 0;
 0000002C  2100      MOV         R1,#0x0
 0000002E  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000030  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
  301:     ms_delay(1000);
 00000032  48FA      LDR         R0,=0x3E8
 00000034  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000036  FFE4      BL          ms_delay?T  ; T=0x0001  (2)
  303:     uart0_send_string("\n\n\rWritting ZigBee Parameters...");
 00000038  4800      LDR         R0,=??S_28 ; ??S_28
 0000003A  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          uart0_send_string?T  ; T=0x0001  (2)
  305:     ZIGB_write();
 0000003E  F7FF      BL          ZIGB_write?T  ; T=0x0001  (1)
 00000040  FFDF      BL          ZIGB_write?T  ; T=0x0001  (2)
  306:     ZIGB_menu_page();
 00000042  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000044  FFDD      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
  308:  }
 00000046          L_29:
 00000046  2001      MOV         R0,#0x1
 00000048  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          get_key?T  ; T=0x0001  (2)
 0000004C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000004E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 00000050  0600      LSL         R0,R0,#0x18 ; get_key?T
 00000052  0E00      LSR         R0,R0,#0x18
 00000054  2841      CMP         R0,#0x41
 00000056  D1D7      BNE         L_31  ; T=0x00000008
  309: }
 00000058  BC10      POP         {R4}
 0000005A  BC08      POP         {R3}
 0000005C  4718      BX          R3
 0000005E          ENDP ; 'ZIGB_setting?T'


*** CODE SEGMENT '?PR?ZIGB_my_read?T?zigbee':
  319: void ZIGB_my_read()
 00000000  B500      PUSH        {LR}
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 19  

 00000002  B085      SUB         R13,#0x14
  320: {
 00000004            ; SCOPE-START
  321:   U8 temp_arr[20]= "000";
 00000004  4800      LDR         R1,=?tpl?0002 ; ?tpl?0002
 00000006  A800      ADD         R0,R13,#0x0
 00000008  2214      MOV         R2,#0x14
 0000000A          L_70:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_70  ; T=0x0000000A
  324:   uart1_send_string("ATMY");
 00000016  4800      LDR         R0,=??S_20 ; ??S_20
 00000018  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          uart1_send_string?T  ; T=0x0001  (2)
  325:   uart1_send_byte('\r');
 0000001C  200D      MOV         R0,#0xD
 0000001E  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000020  FFEF      BL          uart1_send_byte?T  ; T=0x0001  (2)
  327:   for(temp_cnt = 0; Uc_zigb_my[temp_cnt - 1] != '\r'; temp_cnt++)
 00000022  2200      MOV         R2,#0x0
 00000024  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000024  E017      B           L_38  ; T=0x00000056
  329:        while((U1LSR & 0x01) == 0)
 00000026          L_44:
 00000026  E003      B           L_41  ; T=0x00000030
 00000028          L_43:
  331:      if(Uc_zb_tout == 1)
 00000028  4800      LDR         R0,=Uc_zb_tout ; Uc_zb_tout
 0000002A  7800      LDRB        R0,[R0,#0x0] ; Uc_zb_tout
 0000002C  2801      CMP         R0,#0x1
 0000002E  D004      BEQ         L_42  ; T=0x0000003A
  335:     }
 00000030          L_41:
 00000030  4800      LDR         R0,=0xE0010014
 00000032  7800      LDRB        R0,[R0,#0x0]
 00000034  2101      MOV         R1,#0x1
 00000036  4208      TST         R0,R1
 00000038  D0F6      BEQ         L_43  ; T=0x00000028
 0000003A          L_42:
  336:     if(Uc_zb_tout == 1)
 0000003A  4800      LDR         R0,=Uc_zb_tout ; Uc_zb_tout
 0000003C  7800      LDRB        R0,[R0,#0x0] ; Uc_zb_tout
 0000003E  2801      CMP         R0,#0x1
 00000040  D010      BEQ         L_37  ; T=0x00000064
  340:        Uc_zigb_my[temp_cnt] = U1RBR;
 00000042  4800      LDR         R0,=0xE0010000
 00000044  7800      LDRB        R0,[R0,#0x0]
 00000046  1C11      MOV         R1,R2 ; temp_cnt
 00000048  060B      LSL         R3,R1,#0x18 ; temp_cnt
 0000004A  0E1B      LSR         R3,R3,#0x18
 0000004C  4800      LDR         R1,=Uc_zigb_my ; Uc_zigb_my
 0000004E  54C8      STRB        R0,[R1,R3]
  341:   }
 00000050  3201      ADD         R2,#0x1
 00000052  0612      LSL         R2,R2,#0x18
 00000054  0E12      LSR         R2,R2,#0x18
 00000056          L_38:
 00000056  1C10      MOV         R0,R2 ; temp_cnt
 00000058  0601      LSL         R1,R0,#0x18 ; temp_cnt
 0000005A  0E09      LSR         R1,R1,#0x18
 0000005C  4800      LDR         R0,=Uc_zigb_my + 0xFFFFFFFF ; Uc_zigb_my-1
 0000005E  5C40      LDRB        R0,[R0,R1]
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 20  

 00000060  280D      CMP         R0,#0xD
 00000062  D1E0      BNE         L_44  ; T=0x00000026
 00000064          L_37:
  343:   Uc_zigb_my[temp_cnt - 1] = '\0';
 00000064  2000      MOV         R0,#0x0
 00000066  1C11      MOV         R1,R2 ; temp_cnt
 00000068  060A      LSL         R2,R1,#0x18 ; temp_cnt
 0000006A  0E12      LSR         R2,R2,#0x18
 0000006C  4800      LDR         R1,=Uc_zigb_my + 0xFFFFFFFF ; Uc_zigb_my-1
 0000006E  5488      STRB        R0,[R1,R2]
  345:   uart0_send_string("\n\n\rMY Address: ");
 00000070  4800      LDR         R0,=??S_29 ; ??S_29
 00000072  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000074  FFC5      BL          uart0_send_string?T  ; T=0x0001  (2)
  346:   uart0_send_string(&Uc_zigb_my[0]);
 00000076  4800      LDR         R0,=Uc_zigb_my ; Uc_zigb_my
 00000078  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          uart0_send_string?T  ; T=0x0001  (2)
 0000007C            ; SCOPE-END
  347: }
 0000007C  B005      ADD         R13,#0x14
 0000007E  BC08      POP         {R3}
 00000080  4718      BX          R3
 00000082          ENDP ; 'ZIGB_my_read?T'


*** CODE SEGMENT '?PR?ZIGB_pan_read?T?zigbee':
  358: void ZIGB_pan_read()
 00000000  B500      PUSH        {LR}
 00000002  B085      SUB         R13,#0x14
  359: {
 00000004            ; SCOPE-START
  360:   U8 temp_arr[20]= "000";
 00000004  4800      LDR         R1,=?tpl?0003 ; ?tpl?0003
 00000006  A800      ADD         R0,R13,#0x0
 00000008  2214      MOV         R2,#0x14
 0000000A          L_72:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_72  ; T=0x0000000A
  363:   uart1_send_string("ATID");
 00000016  4800      LDR         R0,=??S_17 ; ??S_17
 00000018  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          uart1_send_string?T  ; T=0x0001  (2)
  364:   uart1_send_byte('\r');
 0000001C  200D      MOV         R0,#0xD
 0000001E  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000020  FFEF      BL          uart1_send_byte?T  ; T=0x0001  (2)
  366:   for(temp_cnt = 0; Uc_zigb_pan[temp_cnt - 1] != '\r'; temp_cnt++)
 00000022  2200      MOV         R2,#0x0
 00000024  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000024  E00E      B           L_49  ; T=0x00000044
  368:        while((U1LSR & 0x01) == 0);
 00000026          L_55:
 00000026          L_52:
 00000026  4800      LDR         R0,=0xE0010014
 00000028  7800      LDRB        R0,[R0,#0x0]
 0000002A  2101      MOV         R1,#0x1
 0000002C  4208      TST         R0,R1
 0000002E  D0FA      BEQ         L_52  ; T=0x00000026
  369:     Uc_zigb_pan[temp_cnt] = U1RBR;
 00000030  4800      LDR         R0,=0xE0010000
 00000032  7800      LDRB        R0,[R0,#0x0]
 00000034  1C11      MOV         R1,R2 ; temp_cnt
 00000036  060B      LSL         R3,R1,#0x18 ; temp_cnt
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 21  

 00000038  0E1B      LSR         R3,R3,#0x18
 0000003A  4800      LDR         R1,=Uc_zigb_pan ; Uc_zigb_pan
 0000003C  54C8      STRB        R0,[R1,R3]
  370:   }
 0000003E  3201      ADD         R2,#0x1
 00000040  0612      LSL         R2,R2,#0x18
 00000042  0E12      LSR         R2,R2,#0x18
 00000044          L_49:
 00000044  1C10      MOV         R0,R2 ; temp_cnt
 00000046  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000048  0E09      LSR         R1,R1,#0x18
 0000004A  4800      LDR         R0,=Uc_zigb_pan + 0xFFFFFFFF ; Uc_zigb_pan-1
 0000004C  5C40      LDRB        R0,[R0,R1]
 0000004E  280D      CMP         R0,#0xD
 00000050  D1E9      BNE         L_55  ; T=0x00000026
  372:   Uc_zigb_my[temp_cnt - 1] = '\0';
 00000052  2000      MOV         R0,#0x0
 00000054  1C11      MOV         R1,R2 ; temp_cnt
 00000056  060A      LSL         R2,R1,#0x18 ; temp_cnt
 00000058  0E12      LSR         R2,R2,#0x18
 0000005A  4800      LDR         R1,=Uc_zigb_my + 0xFFFFFFFF ; Uc_zigb_my-1
 0000005C  5488      STRB        R0,[R1,R2]
  374:   uart0_send_string("\n\n\rPAN Address: ");
 0000005E  4800      LDR         R0,=??S_30 ; ??S_30
 00000060  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000062  FFCE      BL          uart0_send_string?T  ; T=0x0001  (2)
  375:   uart0_send_string(&Uc_zigb_pan[0]);
 00000064  4800      LDR         R0,=Uc_zigb_pan ; Uc_zigb_pan
 00000066  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000068  FFCB      BL          uart0_send_string?T  ; T=0x0001  (2)
 0000006A            ; SCOPE-END
  376: }
 0000006A  B005      ADD         R13,#0x14
 0000006C  BC08      POP         {R3}
 0000006E  4718      BX          R3
 00000070          ENDP ; 'ZIGB_pan_read?T'


*** CODE SEGMENT '?PR?ZIGB_read?T?zigbee':
  387: void ZIGB_read()
 00000000  B500      PUSH        {LR}
  389:  ZIGB_cmd_mode();
 00000002  F7FF      BL          ZIGB_cmd_mode?T  ; T=0x0001  (1)
 00000004  FFFD      BL          ZIGB_cmd_mode?T  ; T=0x0001  (2)
  390:  ZIGB_my_read(); 
 00000006  F7FF      BL          ZIGB_my_read?T  ; T=0x0001  (1)
 00000008  FFFB      BL          ZIGB_my_read?T  ; T=0x0001  (2)
  391:  ZIGB_pan_read();
 0000000A  F7FF      BL          ZIGB_pan_read?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ZIGB_pan_read?T  ; T=0x0001  (2)
  392:  ZIGB_exit_cmd();
 0000000E  F7FF      BL          ZIGB_exit_cmd?T  ; T=0x0001  (1)
 00000010  FFF7      BL          ZIGB_exit_cmd?T  ; T=0x0001  (2)
  393: } 
 00000012  BC08      POP         {R3}
 00000014  4718      BX          R3
 00000016          ENDP ; 'ZIGB_read?T'


*** CODE SEGMENT '?PR?ZIGB_write?T?zigbee':
  403: void ZIGB_write()
 00000000  B510      PUSH        {R4,LR}
  405:  ZIGB_read();
 00000002  F7FF      BL          ZIGB_read?T  ; T=0x0001  (1)
 00000004  FFFD      BL          ZIGB_read?T  ; T=0x0001  (2)
  407:  ZIGB_wr_page();
 00000006  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 00000008  FFFB      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  409:  Uc_key_temp = get_key(0);
 0000000A  2000      MOV         R0,#0x0
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 22  

 0000000C  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          get_key?T  ; T=0x0001  (2)
 00000010  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000012  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  410:  while(Uc_key_temp != 'D')
 00000014  E05D      B           L_56  ; T=0x000000D2
 00000016          L_58:
  412:   Uc_key_temp = get_key(0);
 00000016  2000      MOV         R0,#0x0
 00000018  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          get_key?T  ; T=0x0001  (2)
 0000001C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000001E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  413:   wdt_feed(0x03ffffff);
 00000020  4800      LDR         R0,=0x3FFFFFF
 00000022  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000024  FFED      BL          wdt_feed?T  ; T=0x0001  (2)
  414:   lcd_line1_disp(&Uc_zigb_pan[0],10);
 00000026  4800      LDR         R0,=Uc_zigb_pan ; Uc_zigb_pan
 00000028  210A      MOV         R1,#0xA
 0000002A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  415:   lcd_line2_disp(&Uc_zigb_ch[0],10);
 0000002E  4800      LDR         R0,=Uc_zigb_ch ; Uc_zigb_ch
 00000030  210A      MOV         R1,#0xA
 00000032  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000034  FFE5      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  416:   lcd_line3_disp(&Uc_zigb_my[0],10);
 00000036  4800      LDR         R0,=Uc_zigb_my ; Uc_zigb_my
 00000038  210A      MOV         R1,#0xA
 0000003A  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  417:   lcd_line4_disp(&Uc_zigb_dl[0],10);
 0000003E  4800      LDR         R0,=Uc_zigb_dl ; Uc_zigb_dl
 00000040  210A      MOV         R1,#0xA
 00000042  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000044  FFDD      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  420:   if(Uc_key_temp == '1')
 00000046  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000048  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000004A  1C04      MOV         R4,R0
 0000004C  2C31      CMP         R4,#0x31
 0000004E  D10E      BNE         L_60  ; T=0x0000006E
  422:      clrscr();
 00000050  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000052  FFD6      BL          clrscr?T  ; T=0x0001  (2)
  423:     lcd_line1_disp("PAN",0);
 00000054  4800      LDR         R0,=??S_31 ; ??S_31
 00000056  2100      MOV         R1,#0x0
 00000058  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000005A  FFD2      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  424:      key_usr_ip(4,&Uc_zigb_pan[0],1,10);
 0000005C  4800      LDR         R1,=Uc_zigb_pan ; Uc_zigb_pan
 0000005E  2004      MOV         R0,#0x4
 00000060  2201      MOV         R2,#0x1
 00000062  230A      MOV         R3,#0xA
 00000064  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 00000066  FFCC      BL          key_usr_ip?T  ; T=0x0001  (2)
  425:     ZIGB_wr_page();
 00000068  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  426:   }
 0000006C  E031      B           L_56  ; T=0x000000D2
 0000006E          L_60:
  427:   else if(Uc_key_temp == '2')
 0000006E  2C32      CMP         R4,#0x32
ARM COMPILER V2.50a,  zigbee                                                               16/01/13  18:24:30  PAGE 23  

 00000070  D10E      BNE         L_62  ; T=0x00000090
  429:     clrscr();
 00000072  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000074  FFC5      BL          clrscr?T  ; T=0x0001  (2)
  430:     lcd_line1_disp("CH",0);
 00000076  4800      LDR         R0,=??S_32 ; ??S_32
 00000078  2100      MOV         R1,#0x0
 0000007A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  431:     key_usr_ip(2,&Uc_zigb_ch[0],1,10);
 0000007E  4800      LDR         R1,=Uc_zigb_ch ; Uc_zigb_ch
 00000080  2002      MOV         R0,#0x2
 00000082  2201      MOV         R2,#0x1
 00000084  230A      MOV         R3,#0xA
 00000086  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 00000088  FFBB      BL          key_usr_ip?T  ; T=0x0001  (2)
  432:     ZIGB_wr_page();
 0000008A  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 0000008C  FFB9      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  433:    }
 0000008E  E020      B           L_56  ; T=0x000000D2
 00000090          L_62:
  434:   else if(Uc_key_temp == '3')
 00000090  2C33      CMP         R4,#0x33
 00000092  D10E      BNE         L_64  ; T=0x000000B2
  436:      clrscr();
 00000094  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000096  FFB4      BL          clrscr?T  ; T=0x0001  (2)
  437:     lcd_line1_disp("MY",0);
 00000098  4800      LDR         R0,=??S_33 ; ??S_33
 0000009A  2100      MOV         R1,#0x0
 0000009C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  438:      key_usr_ip(4,&Uc_zigb_my[0],1,10);
 000000A0  4800      LDR         R1,=Uc_zigb_my ; Uc_zigb_my
 000000A2  2004      MOV         R0,#0x4
 000000A4  2201      MOV         R2,#0x1
 000000A6  230A      MOV         R3,#0xA
 000000A8  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 000000AA  FFAA      BL          key_usr_ip?T  ; T=0x0001  (2)
  439:     ZIGB_wr_page();
 000000AC  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 000000AE  FFA8      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  440:    }
 000000B0  E00F      B           L_56  ; T=0x000000D2
 000000B2          L_64:
  441:   else if(Uc_key_temp == '4')
 000000B2  2C34      CMP         R4,#0x34
 000000B4  D10D      BNE         L_56  ; T=0x000000D2
  443:      clrscr();
 000000B6  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000B8  FFA3      BL          clrscr?T  ; T=0x0001  (2)
  444:     lcd_line1_disp("DL",0);
 000000BA  4800      LDR         R0,=??S_34 ; ??S_34
 000000BC  2100      MOV         R1,#0x0
 000000BE  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)