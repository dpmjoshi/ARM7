ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE key
OBJECT MODULE PLACED IN key.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe key.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include"includes.h"
    2          
    3          void scancode(long temp1,long temp2);
    4          U8 get_key(U8 pass_key);
    5          
    6          
    7          U8 keyboard[4][4] =           
    8           { '1','2','3','A',
    9             '4','5','6','B',
   10             '7','8','9','C',
   11             'E','0','.','D'};
   12          
   13           
   14          U8 ch ;
   15          U8 Uc_key_temp;
   16          //*************************************
   17          // Get key
   18          //*************************************
   19          U8 get_key(U8 pass_key)
   20          {
   21   1              
   22   1      U32 i=0,temp1,temp2; 
   23   1      U32 val1 =0, val2 = 0;
   24   1      U32 col1=0,col2=0; 
   25   1      
   26   1      
   27   1      ch = 0;
   28   1      IO1CLR = 0xFFFFFFFF;
   29   1      temp1  = IO1PIN;                            
   30   1      val1   = temp1;
   31   1      if(pass_key == 1)
   32   1      {
   33   2          while((val1 & 0xF0000000) == 0xF0000000)
   34   2          {
   35   3              temp1  = IO1PIN;                            
   36   3              val1   = temp1;
   37   3          }
   38   2      }
   39   1      if((col1 = (val1 & 0xF0000000)) != 0xF0000000)                  //temp2 ==  Row
   40   1      {
   41   2      
   42   2       val1 = temp1;
   43   2       key_delay(20);     //wait 20msec debounce time
   44   2       if((col2 = (val1 & 0xF0000000)) != 0xF0000000)
   45   2          {   
   46   3         for(i=0;i<4;i++)
   47   3              {
   48   4                  switch(i)
   49   4                  {
   50   5                  case 0 : IO1SET = 0x0D000000;    //0x00580000
   51   5                           break;
   52   5                  case 1 : IO1SET = 0x07000000;    //0x00380000
   53   5                           break;
   54   5                  case 2 : IO1SET = 0x0E000000;     //0x00700000    0x0E000000
   55   5                           break;
   56   5                  case 3 : IO1SET = 0x0B000000;     //0x00680000
   57   5                           break;
   58   5                  }
   59   4                  temp2 = IO1PIN;  ////------>  temp2 ====  row .... temp1 = column
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 2   

   60   4                  val2 = temp2;
   61   4                  if((val2 & 0xF0000000) != 0xF0000000)
   62   4                      {                         
   63   5                          scancode(temp1,temp2);      //temp2 ------> row number
   64   5                          break;
   65   5                      }
   66   4                  IO1SET = 0xFFFFFFFF;
   67   4                  IO1CLR = 0xFFFFFFFF; 
   68   4              }
   69   3          }
   70   2          //else
   71   2          //continue;
   72   2       } 
   73   1      key_delay(50);
   74   1      return ch;
   75   1      }
   76          
   77          
   78           
   79          void scancode(long temp1,long temp2)    //temp1 = column......temp2 = row......
   80          {
   81   1                      
   82   1      U16  code1 = 0,code2 = 0, j=0;
   83   1      U16  val1=0,val2=0;                 //ADDED VARIABLES
   84   1      
   85   1      
   86   1      
   87   1      temp1=temp1>>28;                  //col
   88   1      temp2=temp2 & 0x0F000000 ;   //row
   89   1      temp2=temp2>>24;
   90   1      
   91   1      
   92   1      for(j=0;j<4;j++)
   93   1      {
   94   2      val1 = temp1;                   //ADDED
   95   2      code1 = val1 & (1<<j);
   96   2          if(code1 == 0)
   97   2              {
   98   3                  code1 = j;
   99   3                  break;
  100   3              }
  101   2          else
  102   2                  continue;
  103   2      }
  104   1      
  105   1      for(j=0;j<4;j++)
  106   1      {
  107   2      val2=temp2;                     //ADDED
  108   2      code2 = val2 & (1<<j);
  109   2          if(code2 == 0)
  110   2              {
  111   3                  code2 = j;
  112   3                  break;
  113   3              }
  114   2          else
  115   2          continue;
  116   2      }
  117   1      
  118   1      
  119   1      ch = keyboard[code2][code1];
  120   1      
  121   1      temp1 = temp2 = 0;
  122   1      IO1SET=0xFFFFFFFF;
  123   1      IO1CLR = 0xFFFFFFFF;
  124   1      
  125   1      }
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 3   

  126          //////////////////////////////////////////////////
  127          
  128          
  129          void key_usr_ip(U8 no_val, U8 *ip_arr, U8 lcd_line, U8 lcd_pos)
  130          {
  131   1       U8 uc_temp_cnt = 0;
  132   1       U8 uc_temp_arr[20] = {"----"};
  133   1       ms_delay(5000);
  134   1      
  135   1       while(uc_temp_cnt < no_val)
  136   1       {
  137   2        wdt_feed(0x03ffffff);
  138   2        
  139   2        Uc_key_temp = get_key(1);
  140   2        if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  141   2        {         
  142   3          uc_temp_arr[uc_temp_cnt] = Uc_key_temp;
  143   3          uc_temp_cnt += 1;
  144   3          Uc_key_temp = 0;
  145   3        }
  146   2        else if(Uc_key_temp == 'A')
  147   2        {
  148   3          Uc_key_temp = 0;
  149   3          uc_temp_cnt = no_val;
  150   3        }
  151   2        key_delay(250);
  152   2        if(lcd_line == 1)
  153   2        {
  154   3         lcd_line1_disp(&uc_temp_arr[0],lcd_pos);
  155   3        }
  156   2        else if(lcd_line == 2)
  157   2        {
  158   3         lcd_line2_disp(&uc_temp_arr[0],lcd_pos);
  159   3        }
  160   2        else if(lcd_line == 3)
  161   2        {
  162   3         lcd_line3_disp(&uc_temp_arr[0],lcd_pos);
  163   3        }
  164   2        else if(lcd_line == 4)
  165   2        {
  166   3         lcd_line4_disp(&uc_temp_arr[0],lcd_pos);
  167   3        }
  168   2       }
  169   1       str_copy(&uc_temp_arr[0],&ip_arr[0],no_val);
  170   1       ms_delay(5000);
  171   1      }
  172          
  173          
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (str_copy?T)



*** PUBLICS:
 PUBLIC         scancode?T
 PUBLIC         get_key?T
 PUBLIC         key_usr_ip?T
 PUBLIC         Uc_key_temp
 PUBLIC         keyboard
 PUBLIC         ch



*** DATA SEGMENT '?DT0?key':
 00000000          Uc_key_temp:
 00000000            DS          1
 00000001          keyboard:
 00000001           BEGIN_INIT
 00000001  31        DB          0x31
 00000002  32        DB          0x32
 00000003  33        DB          0x33
 00000004  41        DB          0x41
 00000005  34        DB          0x34
 00000006  35        DB          0x35
 00000007  36        DB          0x36
 00000008  42        DB          0x42
 00000009  37        DB          0x37
 0000000A  38        DB          0x38
 0000000B  39        DB          0x39
 0000000C  43        DB          0x43
 0000000D  45        DB          0x45
 0000000E  30        DB          0x30
 0000000F  2E        DB          0x2E
 00000010  44        DB          0x44
 00000011           END_INIT
 00000011          ch:
 00000011            DS          1

*** DATA SEGMENT '?CON?key':
 00000000          ?tpl?0001:
 00000000           BEGIN_INIT
 00000000            DB          '----',0x00
 00000005            SPACE       15
 00000014           END_INIT



*** CODE SEGMENT '?PR?get_key?T?key':
   19: U8 get_key(U8 pass_key)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C01      MOV         R1,R0 ; pass_key
 00000004  ---- Variable 'pass_key' assigned to Register 'R1' ----
 00000004  B081      SUB         R13,#0x4
   20: {
 00000006            ; SCOPE-START
   22: U32 i=0,temp1,temp2; 
 00000006  2000      MOV         R0,#0x0
 00000008  1C06      MOV         R6,R0 ; i
 0000000A  ---- Variable 'i' assigned to Register 'R6' ----
   23: U32 val1 =0, val2 = 0;
 0000000A  1C07      MOV         R7,R0 ; val1
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 5   

 0000000C  ---- Variable 'val1' assigned to Register 'R7' ----
 0000000C  1C05      MOV         R5,R0 ; val2
 0000000E  ---- Variable 'val2' assigned to Register 'R5' ----
   24: U32 col1=0,col2=0; 
 0000000E  1C02      MOV         R2,R0 ; col1
 00000010  ---- Variable 'col1' assigned to Register 'R2' ----
 00000010  9000      STR         R0,[R13,#0x0] ; col2
   27: ch = 0;
 00000012  2300      MOV         R3,#0x0
 00000014  4800      LDR         R0,=ch ; ch
 00000016  7003      STRB        R3,[R0,#0x0] ; ch
   28: IO1CLR = 0xFFFFFFFF;
 00000018  4800      LDR         R3,=0xFFFFFFFF
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6003      STR         R3,[R0,#0x0]
   29: temp1  = IO1PIN;                            
 0000001E  4800      LDR         R0,=0xE0028010
 00000020  6804      LDR         R4,[R0,#0x0]
 00000022  ---- Variable 'temp1' assigned to Register 'R4' ----
   30: val1   = temp1;
 00000022  1C27      MOV         R7,R4 ; temp1
   31: if(pass_key == 1)
 00000024  1C08      MOV         R0,R1 ; pass_key
 00000026  0600      LSL         R0,R0,#0x18 ; pass_key
 00000028  0E00      LSR         R0,R0,#0x18
 0000002A  2801      CMP         R0,#0x1
 0000002C  D109      BNE         L_1  ; T=0x00000042
   33:     while((val1 & 0xF0000000) == 0xF0000000)
 0000002E  E002      B           L_2  ; T=0x00000036
 00000030          L_4:
   35:         temp1  = IO1PIN;                            
 00000030  4800      LDR         R0,=0xE0028010
 00000032  6804      LDR         R4,[R0,#0x0]
   36:         val1   = temp1;
 00000034  1C27      MOV         R7,R4 ; temp1
   37:     }
 00000036          L_2:
 00000036  1C38      MOV         R0,R7 ; val1
 00000038  4800      LDR         R1,=0xF0000000
 0000003A  4008      AND         R0,R1
 0000003C  4800      LDR         R1,=0x10000000
 0000003E  42C8      CMN         R0,R1
 00000040  D0F6      BEQ         L_4  ; T=0x00000030
   38: }
 00000042          L_1:
   39: if((col1 = (val1 & 0xF0000000)) != 0xF0000000)                  //temp2 ==  Row
 00000042  1C38      MOV         R0,R7 ; val1
 00000044  4800      LDR         R1,=0xF0000000
 00000046  4008      AND         R0,R1
 00000048  1C02      MOV         R2,R0 ; col1
 0000004A  4800      LDR         R1,=0x10000000
 0000004C  42C8      CMN         R0,R1
 0000004E  D03A      BEQ         L_6  ; T=0x000000C6
   42:  val1 = temp1;
 00000050  1C27      MOV         R7,R4 ; temp1
   43:  key_delay(20);     //wait 20msec debounce time
 00000052  2014      MOV         R0,#0x14
 00000054  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 00000056  FFD4      BL          key_delay?T  ; T=0x0001  (2)
   44:  if((col2 = (val1 & 0xF0000000)) != 0xF0000000)
 00000058  1C38      MOV         R0,R7 ; val1
 0000005A  4800      LDR         R1,=0xF0000000
 0000005C  4008      AND         R0,R1
 0000005E  9000      STR         R0,[R13,#0x0] ; col2
 00000060  4800      LDR         R1,=0x10000000
 00000062  42C8      CMN         R0,R1
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 6   

 00000064  D02F      BEQ         L_6  ; T=0x000000C6
   46:    for(i=0;i<4;i++)
 00000066  2600      MOV         R6,#0x0
 00000068          L_11:
   48:               switch(i)
 00000068  1C30      MOV         R0,R6 ; i
 0000006A  2801      CMP         R0,#0x1 ; i
 0000006C  D009      BEQ         L_15  ; T=0x00000082
 0000006E  2802      CMP         R0,#0x2 ; i
 00000070  D00B      BEQ         L_16  ; T=0x0000008A
 00000072  2803      CMP         R0,#0x3 ; i
 00000074  D00D      BEQ         L_17  ; T=0x00000092
 00000076  2800      CMP         R0,#0x0 ; i
 00000078  D10E      BNE         L_13  ; T=0x00000098
   50:             case 0 : IO1SET = 0x0D000000;    //0x00580000
 0000007A          L_14:
 0000007A  4800      LDR         R1,=0xD000000
 0000007C  4800      LDR         R0,=0xE0028014
 0000007E  6001      STR         R1,[R0,#0x0]
   51:                      break;
 00000080  E00A      B           L_13  ; T=0x00000098
   52:             case 1 : IO1SET = 0x07000000;    //0x00380000
 00000082          L_15:
 00000082  4800      LDR         R1,=0x7000000
 00000084  4800      LDR         R0,=0xE0028014
 00000086  6001      STR         R1,[R0,#0x0]
   53:                      break;
 00000088  E006      B           L_13  ; T=0x00000098
   54:             case 2 : IO1SET = 0x0E000000;     //0x00700000    0x0E000000
 0000008A          L_16:
 0000008A  4800      LDR         R1,=0xE000000
 0000008C  4800      LDR         R0,=0xE0028014
 0000008E  6001      STR         R1,[R0,#0x0]
   55:                      break;
 00000090  E002      B           L_13  ; T=0x00000098
   56:             case 3 : IO1SET = 0x0B000000;     //0x00680000
 00000092          L_17:
 00000092  4800      LDR         R1,=0xB000000
 00000094  4800      LDR         R0,=0xE0028014
 00000096  6001      STR         R1,[R0,#0x0]
   58:             }
 00000098          L_13:
   59:             temp2 = IO1PIN;  ////------>  temp2 ====  row .... temp1 = column
 00000098  4800      LDR         R0,=0xE0028010
 0000009A  6802      LDR         R2,[R0,#0x0]
 0000009C  ---- Variable 'temp2' assigned to Register 'R2' ----
   60:             val2 = temp2;
 0000009C  1C15      MOV         R5,R2 ; temp2
   61:             if((val2 & 0xF0000000) != 0xF0000000)
 0000009E  1C28      MOV         R0,R5 ; val2
 000000A0  4800      LDR         R1,=0xF0000000
 000000A2  4008      AND         R0,R1
 000000A4  4800      LDR         R1,=0x10000000
 000000A6  42C8      CMN         R0,R1
 000000A8  D004      BEQ         L_18  ; T=0x000000B4
   63:                        scancode(temp1,temp2);      //temp2 ------> row number
 000000AA  1C20      MOV         R0,R4 ; temp1
 000000AC  1C11      MOV         R1,R2 ; temp2
 000000AE  F7FF      BL          scancode?T  ; T=0x0001  (1)
 000000B0  FFA7      BL          scancode?T  ; T=0x0001  (2)
   64:                     break;
 000000B2  E008      B           L_9  ; T=0x000000C6
   65:                   }
 000000B4          L_18:
   66:             IO1SET = 0xFFFFFFFF;
 000000B4  4800      LDR         R1,=0xFFFFFFFF
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 7   

 000000B6  4800      LDR         R0,=0xE0028014
 000000B8  6001      STR         R1,[R0,#0x0]
   67:             IO1CLR = 0xFFFFFFFF; 
 000000BA  4800      LDR         R0,=0xE002801C
 000000BC  6001      STR         R1,[R0,#0x0]
   68:           }
 000000BE  3601      ADD         R6,#0x1
 000000C0  1C30      MOV         R0,R6 ; i
 000000C2  2804      CMP         R0,#0x4 ; i
 000000C4  D3D0      BCC         L_11  ; T=0x00000068
 000000C6          L_9:
   72:  } 
 000000C6          L_6:
   73: key_delay(50);
 000000C6  2032      MOV         R0,#0x32
 000000C8  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000000CA  FF9A      BL          key_delay?T  ; T=0x0001  (2)
   74: return ch;
 000000CC  4800      LDR         R0,=ch ; ch
 000000CE  7800      LDRB        R0,[R0,#0x0] ; ch
 000000D0            ; SCOPE-END
   75: }
 000000D0  B001      ADD         R13,#0x4
 000000D2  BCF0      POP         {R4-R7}
 000000D4  BC08      POP         {R3}
 000000D6  4718      BX          R3
 000000D8          ENDP ; 'get_key?T'


*** CODE SEGMENT '?PR?scancode?T?key':
   79: void scancode(long temp1,long temp2)    //temp1 = column......temp2 = row......
 00000000  B470      PUSH        {R4-R6}
 00000002  ---- Variable 'temp2' assigned to Register 'R1' ----
 00000002  ---- Variable 'temp1' assigned to Register 'R0' ----
 00000002  B081      SUB         R13,#0x4
   80: {
 00000004            ; SCOPE-START
   82: U16  code1 = 0,code2 = 0, j=0;
 00000004  2600      MOV         R6,#0x0
 00000006  1C32      MOV         R2,R6 ; code1
 00000008  ---- Variable 'code1' assigned to Register 'R2' ----
 00000008  1C33      MOV         R3,R6 ; code2
 0000000A  ---- Variable 'code2' assigned to Register 'R3' ----
 0000000A  1C35      MOV         R5,R6 ; j
 0000000C  ---- Variable 'j' assigned to Register 'R5' ----
   83: U16  val1=0,val2=0;                 //ADDED VARIABLES
 0000000C  AC00      ADD         R4,R13,#0x0
 0000000E  8026      STRH        R6,[R4,#0x0] ; val1
 00000010  1C34      MOV         R4,R6 ; val2
 00000012  ---- Variable 'val2' assigned to Register 'R4' ----
   87: temp1=temp1>>28;                  //col
 00000012  1700      ASR         R0,R0,#0x1C ; temp1
   88: temp2=temp2 & 0x0F000000 ;   //row
 00000014  4800      LDR         R5,=0xF000000
 00000016  4029      AND         R1,R5
   89: temp2=temp2>>24;
 00000018  1609      ASR         R1,R1,#0x18 ; temp2
   92: for(j=0;j<4;j++)
 0000001A  1C35      MOV         R5,R6 ; j
 0000001C  E018      B           L_22  ; T=0x00000050
 0000001E          L_23:
   94: val1 = temp1;                   //ADDED
 0000001E  1C06      MOV         R6,R0 ; temp1
 00000020  0436      LSL         R6,R6,#0x10 ; temp1
 00000022  0C36      LSR         R6,R6,#0x10
 00000024  AA00      ADD         R2,R13,#0x0
 00000026  8016      STRH        R6,[R2,#0x0] ; val1
   95: code1 = val1 & (1<<j);
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 8   

 00000028  1C2A      MOV         R2,R5 ; j
 0000002A  0412      LSL         R2,R2,#0x10 ; j
 0000002C  0C12      LSR         R2,R2,#0x10
 0000002E  2601      MOV         R6,#0x1
 00000030  4096      LSL         R6,R2
 00000032  AA00      ADD         R2,R13,#0x0
 00000034  8812      LDRH        R2,[R2,#0x0] ; val1
 00000036  4032      AND         R2,R6
 00000038  0412      LSL         R2,R2,#0x10
 0000003A  0C12      LSR         R2,R2,#0x10
   96:     if(code1 == 0)
 0000003C  1C16      MOV         R6,R2 ; code1
 0000003E  0436      LSL         R6,R6,#0x10 ; code1
 00000040  0C36      LSR         R6,R6,#0x10
 00000042  2E00      CMP         R6,#0x0
 00000044  D101      BNE         L_20  ; T=0x0000004A
   98:             code1 = j;
 00000046  1C2A      MOV         R2,R5 ; j
   99:             break;
 00000048  E007      B           L_21  ; T=0x0000005A
  103: }
 0000004A          L_20:
 0000004A  3501      ADD         R5,#0x1
 0000004C  042D      LSL         R5,R5,#0x10
 0000004E  0C2D      LSR         R5,R5,#0x10
 00000050          L_22:
 00000050  1C2E      MOV         R6,R5 ; j
 00000052  0436      LSL         R6,R6,#0x10 ; j
 00000054  0C36      LSR         R6,R6,#0x10
 00000056  2E04      CMP         R6,#0x4
 00000058  D3E1      BCC         L_23  ; T=0x0000001E
 0000005A          L_21:
  105: for(j=0;j<4;j++)
 0000005A  2500      MOV         R5,#0x0
 0000005C  E017      B           L_29  ; T=0x0000008E
 0000005E          L_30:
  107: val2=temp2;                     //ADDED
 0000005E  1C0C      MOV         R4,R1 ; temp2
 00000060  0424      LSL         R4,R4,#0x10 ; temp2
 00000062  0C24      LSR         R4,R4,#0x10
  108: code2 = val2 & (1<<j);
 00000064  1C2B      MOV         R3,R5 ; j
 00000066  041B      LSL         R3,R3,#0x10 ; j
 00000068  0C1B      LSR         R3,R3,#0x10
 0000006A  2601      MOV         R6,#0x1
 0000006C  409E      LSL         R6,R3
 0000006E  1C23      MOV         R3,R4 ; val2
 00000070  041B      LSL         R3,R3,#0x10 ; val2
 00000072  0C1B      LSR         R3,R3,#0x10
 00000074  4033      AND         R3,R6
 00000076  041B      LSL         R3,R3,#0x10
 00000078  0C1B      LSR         R3,R3,#0x10
  109:     if(code2 == 0)
 0000007A  1C1E      MOV         R6,R3 ; code2
 0000007C  0436      LSL         R6,R6,#0x10 ; code2
 0000007E  0C36      LSR         R6,R6,#0x10
 00000080  2E00      CMP         R6,#0x0
 00000082  D101      BNE         L_27  ; T=0x00000088
  111:             code2 = j;
 00000084  1C2B      MOV         R3,R5 ; j
  112:             break;
 00000086  E007      B           L_28  ; T=0x00000098
  116: }
 00000088          L_27:
 00000088  3501      ADD         R5,#0x1
 0000008A  042D      LSL         R5,R5,#0x10
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 9   

 0000008C  0C2D      LSR         R5,R5,#0x10
 0000008E          L_29:
 0000008E  1C2E      MOV         R6,R5 ; j
 00000090  0436      LSL         R6,R6,#0x10 ; j
 00000092  0C36      LSR         R6,R6,#0x10
 00000094  2E04      CMP         R6,#0x4
 00000096  D3E2      BCC         L_30  ; T=0x0000005E
 00000098          L_28:
  119: ch = keyboard[code2][code1];
 00000098  1C18      MOV         R0,R3 ; code2
 0000009A  0401      LSL         R1,R0,#0x10 ; code2
 0000009C  0C09      LSR         R1,R1,#0x10
 0000009E  0089      LSL         R1,R1,#0x2
 000000A0  1C10      MOV         R0,R2 ; code1
 000000A2  0400      LSL         R0,R0,#0x10 ; code1
 000000A4  0C00      LSR         R0,R0,#0x10
 000000A6  1809      ADD         R1,R0
 000000A8  4800      LDR         R0,=keyboard ; keyboard
 000000AA  5C41      LDRB        R1,[R0,R1]
 000000AC  4800      LDR         R0,=ch ; ch
 000000AE  7001      STRB        R1,[R0,#0x0] ; ch
  121: temp1 = temp2 = 0;
 000000B0  2000      MOV         R0,#0x0
 000000B2  1C01      MOV         R1,R0 ; temp2
  122: IO1SET=0xFFFFFFFF;
 000000B4  4800      LDR         R1,=0xFFFFFFFF
 000000B6  4800      LDR         R0,=0xE0028014
 000000B8  6001      STR         R1,[R0,#0x0]
  123: IO1CLR = 0xFFFFFFFF;
 000000BA  4800      LDR         R0,=0xE002801C
 000000BC  6001      STR         R1,[R0,#0x0]
 000000BE            ; SCOPE-END
  125: }
 000000BE  B001      ADD         R13,#0x4
 000000C0  BC70      POP         {R4-R6}
 000000C2  4770      BX          R14
 000000C4          ENDP ; 'scancode?T'


*** CODE SEGMENT '?PR?key_usr_ip?T?key':
  129: void key_usr_ip(U8 no_val, U8 *ip_arr, U8 lcd_line, U8 lcd_pos)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C1F      MOV         R7,R3 ; lcd_pos
 00000004  ---- Variable 'lcd_pos' assigned to Register 'R7' ----
 00000004  1C16      MOV         R6,R2 ; lcd_line
 00000006  ---- Variable 'lcd_line' assigned to Register 'R6' ----
 00000006  1C0C      MOV         R4,R1 ; ip_arr
 00000008  ---- Variable 'ip_arr' assigned to Register 'R4' ----
 00000008  1C05      MOV         R5,R0 ; no_val
 0000000A  ---- Variable 'no_val' assigned to Register 'R5' ----
 0000000A  B086      SUB         R13,#0x18
  130: {
 0000000C            ; SCOPE-START
  131:  U8 uc_temp_cnt = 0;
 0000000C  2100      MOV         R1,#0x0
 0000000E  A800      ADD         R0,R13,#0x0
 00000010  7001      STRB        R1,[R0,#0x0] ; uc_temp_cnt
  132:  U8 uc_temp_arr[20] = {"----"};
 00000012  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000014  A801      ADD         R0,R13,#0x4
 00000016  2214      MOV         R2,#0x14
 00000018          L_53:
 00000018  780B      LDRB        R3,[R1,#0x0]
 0000001A  7003      STRB        R3,[R0,#0x0]
 0000001C  1C49      ADD         R1,R1,#0x1
 0000001E  1C40      ADD         R0,R0,#0x1
 00000020  1E52      SUB         R2,R2,#0x1
 00000022  D1F9      BNE         L_53  ; T=0x00000018
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 10  

  133:  ms_delay(5000);
 00000024  4800      LDR         R0,=0x1388
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
  135:  while(uc_temp_cnt < no_val)
 0000002A  E061      B           L_34  ; T=0x000000F0
 0000002C          L_36:
  137:   wdt_feed(0x03ffffff);
 0000002C  4800      LDR         R0,=0x3FFFFFF
 0000002E  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000030  FFE7      BL          wdt_feed?T  ; T=0x0001  (2)
  139:   Uc_key_temp = get_key(1);
 00000032  2001      MOV         R0,#0x1
 00000034  F7FF      BL          get_key?T  ; T=0x0001  (1)
 00000036  FFE4      BL          get_key?T  ; T=0x0001  (2)
 00000038  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000003A  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  140:   if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 0000003C  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000003E  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000040  2830      CMP         R0,#0x30
 00000042  DB01      BLT         L_39  ; T=0x00000048
 00000044  2101      MOV         R1,#0x1
 00000046  E000      B           L_40  ; T=0x0000004A
 00000048          L_39:
 00000048  2100      MOV         R1,#0x0
 0000004A          L_40:
 0000004A  2839      CMP         R0,#0x39
 0000004C  DC01      BGT         L_41  ; T=0x00000052
 0000004E  2001      MOV         R0,#0x1
 00000050  E000      B           L_42  ; T=0x00000054
 00000052          L_41:
 00000052  2000      MOV         R0,#0x0
 00000054          L_42:
 00000054  4008      AND         R0,R1
 00000056  2800      CMP         R0,#0x0
 00000058  D00E      BEQ         L_38  ; T=0x00000078
  142:     uc_temp_arr[uc_temp_cnt] = Uc_key_temp;
 0000005A  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000005C  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000005E  A900      ADD         R1,R13,#0x0
 00000060  7809      LDRB        R1,[R1,#0x0] ; uc_temp_cnt
 00000062  1C0A      MOV         R2,R1
 00000064  A901      ADD         R1,R13,#0x4
 00000066  5488      STRB        R0,[R1,R2]
  143:     uc_temp_cnt += 1;
 00000068  A800      ADD         R0,R13,#0x0
 0000006A  7801      LDRB        R1,[R0,#0x0] ; uc_temp_cnt
 0000006C  3101      ADD         R1,#0x1
 0000006E  7001      STRB        R1,[R0,#0x0] ; uc_temp_cnt
  144:     Uc_key_temp = 0;
 00000070  2100      MOV         R1,#0x0
 00000072  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000074  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
  145:   }
 00000076  E009      B           L_43  ; T=0x0000008C
 00000078          L_38:
  146:   else if(Uc_key_temp == 'A')
 00000078  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000007A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000007C  2841      CMP         R0,#0x41
 0000007E  D105      BNE         L_43  ; T=0x0000008C
  148:     Uc_key_temp = 0;
 00000080  2100      MOV         R1,#0x0
 00000082  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000084  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 11  

  149:     uc_temp_cnt = no_val;
 00000086  1C29      MOV         R1,R5 ; no_val
 00000088  A800      ADD         R0,R13,#0x0
 0000008A  7001      STRB        R1,[R0,#0x0] ; uc_temp_cnt
  150:   }
 0000008C          L_43:
  151:   key_delay(250);
 0000008C  20FA      MOV         R0,#0xFA
 0000008E  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 00000090  FFB7      BL          key_delay?T  ; T=0x0001  (2)
  152:   if(lcd_line == 1)
 00000092  1C30      MOV         R0,R6 ; lcd_line
 00000094  0600      LSL         R0,R0,#0x18 ; lcd_line
 00000096  0E00      LSR         R0,R0,#0x18
 00000098  2801      CMP         R0,#0x1
 0000009A  D106      BNE         L_45  ; T=0x000000AA
  154:    lcd_line1_disp(&uc_temp_arr[0],lcd_pos);
 0000009C  1C38      MOV         R0,R7 ; lcd_pos
 0000009E  0601      LSL         R1,R0,#0x18 ; lcd_pos
 000000A0  0E09      LSR         R1,R1,#0x18
 000000A2  A801      ADD         R0,R13,#0x4
 000000A4  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 000000A6  FFAC      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  155:   }
 000000A8  E022      B           L_34  ; T=0x000000F0
 000000AA          L_45:
  156:   else if(lcd_line == 2)
 000000AA  1C30      MOV         R0,R6 ; lcd_line
 000000AC  0600      LSL         R0,R0,#0x18 ; lcd_line
 000000AE  0E00      LSR         R0,R0,#0x18
 000000B0  2802      CMP         R0,#0x2
 000000B2  D106      BNE         L_47  ; T=0x000000C2
  158:    lcd_line2_disp(&uc_temp_arr[0],lcd_pos);
 000000B4  1C38      MOV         R0,R7 ; lcd_pos
 000000B6  0601      LSL         R1,R0,#0x18 ; lcd_pos
 000000B8  0E09      LSR         R1,R1,#0x18
 000000BA  A801      ADD         R0,R13,#0x4
 000000BC  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 000000BE  FFA0      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  159:   }
 000000C0  E016      B           L_34  ; T=0x000000F0
 000000C2          L_47:
  160:   else if(lcd_line == 3)
 000000C2  1C30      MOV         R0,R6 ; lcd_line
 000000C4  0600      LSL         R0,R0,#0x18 ; lcd_line
 000000C6  0E00      LSR         R0,R0,#0x18
 000000C8  2803      CMP         R0,#0x3
 000000CA  D106      BNE         L_49  ; T=0x000000DA
  162:    lcd_line3_disp(&uc_temp_arr[0],lcd_pos);
 000000CC  1C38      MOV         R0,R7 ; lcd_pos
 000000CE  0601      LSL         R1,R0,#0x18 ; lcd_pos
 000000D0  0E09      LSR         R1,R1,#0x18
 000000D2  A801      ADD         R0,R13,#0x4
 000000D4  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 000000D6  FF94      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  163:   }
 000000D8  E00A      B           L_34  ; T=0x000000F0
 000000DA          L_49:
  164:   else if(lcd_line == 4)
 000000DA  1C30      MOV         R0,R6 ; lcd_line
 000000DC  0600      LSL         R0,R0,#0x18 ; lcd_line
 000000DE  0E00      LSR         R0,R0,#0x18
 000000E0  2804      CMP         R0,#0x4
 000000E2  D105      BNE         L_34  ; T=0x000000F0
  166:    lcd_line4_disp(&uc_temp_arr[0],lcd_pos);
 000000E4  1C38      MOV         R0,R7 ; lcd_pos
ARM COMPILER V2.50a,  key                                                                  22/01/13  14:11:15  PAGE 12  

 000000E6  0601      LSL         R1,R0,#0x18 ; lcd_pos
 000000E8  0E09      LSR         R1,R1,#0x18
 000000EA  A801      ADD         R0,R13,#0x4
 000000EC  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000000EE  FF88      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  168:  }
 000000F0          L_34:
 000000F0  1C28      MOV         R0,R5 ; no_val
 000000F2  0601      LSL         R1,R0,#0x18 ; no_val
 000000F4  0E09      LSR         R1,R1,#0x18
 000000F6  A800      ADD         R0,R13,#0x0
 000000F8  7800      LDRB        R0,[R0,#0x0] ; uc_temp_cnt
 000000FA  4288      CMP         R0,R1
 000000FC  D396      BCC         L_36  ; T=0x0000002C
  169:  str_copy(&uc_temp_arr[0],&ip_arr[0],no_val);
 000000FE  1C28      MOV         R0,R5 ; no_val
 00000100  0602      LSL         R2,R0,#0x18 ; no_val
 00000102  0E12      LSR         R2,R2,#0x18
 00000104  A801      ADD         R0,R13,#0x4
 00000106  1C21      MOV         R1,R4 ; ip_arr
 00000108  F7FF      BL          str_copy?T  ; T=0x0001  (1)
 0000010A  FF7A      BL          str_copy?T  ; T=0x0001  (2)
  170:  ms_delay(5000);
 0000010C  4800      LDR         R0,=0x1388
 0000010E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000110  FF77      BL          ms_delay?T  ; T=0x0001  (2)
 00000112            ; SCOPE-END
  171: }
 00000112  B006      ADD         R13,#0x18
 00000114  BCF0      POP         {R4-R7}
 00000116  BC08      POP         {R3}
 00000118  4718      BX          R3
 0000011A          ENDP ; 'key_usr_ip?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        18
  const size           =        20
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
