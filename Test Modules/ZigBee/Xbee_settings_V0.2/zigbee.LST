ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE zigbee
OBJECT MODULE PLACED IN zigbee.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe zigbee.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"    
    2          
    3          #define RESP_ON_UART0 1
    4          
    5          void ZIGB_cmd_mode();
    6          void ZIGB_wr_cmd();
    7          void ZIGB_exit_cmd();
    8          void ZIGB_dl_wrt(U8*);
    9          void ZIGB_pan_wrt(U8*);
   10          void ZIGB_my_wrt(U8*);
   11          void ZIGB_ch_wrt(U8*);
   12          void ZIGB_setting();
   13          void ZIGB_my_read();
   14          void ZIGB_pan_read();
   15          void ZIGB_ch_read();
   16          void ZIGB_dl_read();
   17          void ZIGB_node_disc();
   18          void ZIGB_write();
   19          void ZIGB_read();
   20          void ZIGB_wr_page();
   21          void ZIGB_menu_page();
   22          
   23          
   24          U8 Uc_zigb_pan[10]  = {"0000"};
   25          U8 Uc_zigb_ch[10]   = {"0C"};
   26          U8 Uc_zigb_my[10]   = {"0000"};
   27          U8 Uc_zigb_dl[10]   = {"0000"};
   28          U8 Uc_zigb_node[50] = {"0"};
   29          
   30          U8 ZIGB_responce(U8, U8*);  
   31          
   32          
   33          
   34          /**********************************************************************************/
   35          /* Function Name: ZIGB_cmd_mode()                                                 */
   36          /* Arguments    : NONE                                                            */
   37          /* Return Types : NONE                                                            */
   38          /* Description  : The function enters into the command mode.                      */
   39          /**********************************************************************************/
   40          
   41          void ZIGB_cmd_mode()
   42          {
   43   1       uart1_send_string("+++");
   44   1       clrscr();
   45   1       lcd_line1_disp("CMD Mode",0);
   46   1      
   47   1       if(ZIGB_responce(3,"OK\r"))
   48   1        {
   49   2         #if RESP_ON_UART0 == 1
   50   2         uart0_send_string("\n\n\rCMD: OK ");
   51   2         #endif
   52   2         ms_delay(10000);
   53   2        }
   54   1       else
   55   1        {
   56   2         #if RESP_ON_UART0 == 1
   57   2         uart0_send_string("\n\n\rCMD: ERROR ");
   58   2         #endif
   59   2         ms_delay(10000);
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 2   

   60   2        }
   61   1      }
   62          
   63          /**********************************************************************************/
   64          /* Function Name: ZIGB_wr_cmd()                                                   */
   65          /* Arguments    : NONE                                                            */
   66          /* Return Types : NONE                                                            */
   67          /* Description  : The function sends wr cmd to ZigBee module.                     */
   68          /**********************************************************************************/
   69          
   70          void ZIGB_wr_cmd()
   71          {
   72   1       uart1_send_string("ATWR\r");
   73   1       if(ZIGB_responce(3,"OK\r"))
   74   1        {
   75   2         #if RESP_ON_UART0 == 1
   76   2          uart0_send_string("\n\n\rWR CMD: OK ");
   77   2         #endif
   78   2         ms_delay(10000);
   79   2        }
   80   1       else
   81   1        {
   82   2         #if RESP_ON_UART0 == 1
   83   2          uart0_send_string("\n\n\rWR CMD: ERROR ");
   84   2         #endif
   85   2         ms_delay(10000);
   86   2        }
   87   1      }
   88           
   89          /**********************************************************************************/
   90          /* Function Name: ZIGB_exit_cmd()                                                 */
   91          /* Arguments    : NONE                                                            */
   92          /* Return Types : NONE                                                            */
   93          /* Description  : The function exits from the command mode.                       */
   94          /**********************************************************************************/
   95          
   96          void ZIGB_exit_cmd()
   97          {
   98   1       uart1_send_string("ATCN\r");
   99   1       if(ZIGB_responce(3,"OK\r"))
  100   1        {
  101   2         #if RESP_ON_UART0 == 1
  102   2         uart0_send_string("\n\n\rExit CMD: OK ");
  103   2         #endif
  104   2         ms_delay(10000);
  105   2        }
  106   1       else
  107   1        {
  108   2         #if RESP_ON_UART0 == 1
  109   2         uart0_send_string("\n\n\rExit CMD: ERROR ");
  110   2         #endif
  111   2         ms_delay(10000);
  112   2        }
  113   1      }
  114          
  115          
  116          /**********************************************************************************/
  117          /* Function Name: ZIGB_dl_wrt()                                                   */
  118          /* Arguments    : U8 *dest_add(pointer to the array which will hold the           */
  119          /*                destination add )                                               */
  120          /* Return Types : NONE                                                            */
  121          /* Description  : The function writes destination add. to ZigBee.                 */
  122          /**********************************************************************************/
  123          
  124          void ZIGB_dl_wrt(U8 *dest_add)
  125          {
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 3   

  126   1        uart1_send_string("ATDL");
  127   1        uart1_send_string(dest_add);
  128   1        uart1_send_byte('\r');
  129   1        if(ZIGB_responce(3,"OK\r"))
  130   1        {
  131   2         #if RESP_ON_UART0 == 1
  132   2         uart0_send_string("\n\n\rDL: OK ");
  133   2         #endif
  134   2         ms_delay(10000);
  135   2        }
  136   1       else
  137   1        {
  138   2         #if RESP_ON_UART0 == 1
  139   2         uart0_send_string("\n\n\rDL: ERROR ");
  140   2         #endif
  141   2         ms_delay(10000);
  142   2        }
  143   1      
  144   1      }
  145          
  146          
  147          /**********************************************************************************/
  148          /* Function Name: ZIGB_pan_wrt()                                                  */
  149          /* Arguments    : U8 *pan_add(pointer to the array which will hold the PAN add )  */                                                      
  150          /* Return Types : NONE                                                            */
  151          /* Description  : The function writes PAN add. to ZigBee.                         */
  152          /**********************************************************************************/
  153          
  154          void ZIGB_pan_wrt(U8 *pan_add)
  155          {
  156   1        uart1_send_string("ATID");
  157   1        uart1_send_string(pan_add);
  158   1        uart1_send_byte('\r');
  159   1      
  160   1         if(ZIGB_responce(3,"OK\r"))
  161   1        {
  162   2         #if RESP_ON_UART0 == 1
  163   2         uart0_send_string("\n\n\rPAN: OK ");
  164   2         #endif
  165   2         ms_delay(10000);
  166   2        }
  167   1       else
  168   1        {
  169   2         #if RESP_ON_UART0 == 1
  170   2         uart0_send_string("\n\n\rPAN: ERROR ");
  171   2         #endif
  172   2         ms_delay(10000);
  173   2        }
  174   1      }
  175          
  176          /**********************************************************************************/
  177          /* Function Name: ZIGB_my_wrt()                                                   */
  178          /* Arguments    : U8 *my_add(pointer to the array which will hold the MY add )    */                                                      
  179          /* Return Types : NONE                                                            */
  180          /* Description  : The function writes MY add. to ZigBee.                          */
  181          /**********************************************************************************/
  182          
  183          void ZIGB_my_wrt(U8 *my_add)
  184          {
  185   1        uart1_send_string("ATMY");
  186   1        uart1_send_string(my_add);
  187   1        uart1_send_byte('\r');
  188   1      
  189   1         if(ZIGB_responce(3,"OK\r"))
  190   1        {
  191   2         #if RESP_ON_UART0 == 1
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 4   

  192   2         uart0_send_string("\n\n\rMY: OK ");
  193   2         #endif
  194   2         ms_delay(10000);
  195   2        }
  196   1       else
  197   1        {
  198   2         #if RESP_ON_UART0 == 1
  199   2         uart0_send_string("\n\n\rMY: ERROR ");
  200   2         #endif
  201   2         ms_delay(10000);                   
  202   2        }
  203   1      }
  204          
  205          
  206          /**********************************************************************************/
  207          /* Function Name: ZIGB_ch_wrt()                                                   */
  208          /* Arguments    : U8 *ch_no(pointer to the array which will hold the MY add )     */                                                      
  209          /* Return Types : NONE                                                            */
  210          /* Description  : The function writes MY add. to ZigBee.                          */
  211          /**********************************************************************************/
  212          
  213          void ZIGB_ch_wrt(U8 *ch_no)
  214          {
  215   1        uart1_send_string("ATCH");
  216   1        uart1_send_string(ch_no);
  217   1        uart1_send_byte('\r');
  218   1      
  219   1         if(ZIGB_responce(3,"OK\r"))
  220   1        {
  221   2         #if RESP_ON_UART0 == 1
  222   2         uart0_send_string("\n\n\rCH: OK ");
  223   2         #endif
  224   2         ms_delay(10000);
  225   2        }
  226   1       else
  227   1        {
  228   2         #if RESP_ON_UART0 == 1
  229   2         uart0_send_string("\n\n\rCH: ERROR ");
  230   2         #endif
  231   2         ms_delay(10000);
  232   2        }
  233   1      }
  234          
  235          /**********************************************************************************/
  236          /* Function Name: ZIGB_responce()                                                 */
  237          /* Arguments    : U8 resp_cnt(defines the responce count)                         */
  238          /*                U8 *resp (pointer to array containning expected responce)       */
  239          /* Return Types : NONE                                                            */
  240          /* Description  : This function waits for ZigBee to respond on the entered        */
  241          /*                AT commands.                                                    */
  242          /**********************************************************************************/
  243          
  244          U8 ZIGB_responce(U8 resp_cnt, U8 *resp)
  245          {
  246   1        U8 temp_arr[20]= "000";
  247   1        U8 temp_cnt ;
  248   1        for(temp_cnt = 0; temp_cnt < resp_cnt; temp_cnt++)
  249   1         {
  250   2          while((U1LSR & 0x01) == 0);
  251   2          temp_arr[temp_cnt] = U1RBR;
  252   2         }    
  253   1        if(str_cmp(&temp_arr[0],resp))
  254   1         {
  255   2           return 1;
  256   2         }
  257   1        else
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 5   

  258   1         {
  259   2          return 0;
  260   2         }
  261   1      }
  262          
  263          /**********************************************************************************/
  264          /* Function Name: ZIGB_setting()                                                  */
  265          /* Arguments    : NONE                                                            */
  266          /* Return Types : NONE                                                            */
  267          /* Description  : This function provides an interface for ZigBee settings through */
  268          /*                AT Commands. This fn is divided into two parts:                 */
  269          /*                a) Read   b) Write                                              */
  270          /**********************************************************************************/
  271          
  272          void ZIGB_setting()
  273          {
  274   1       ZIGB_menu_page();
  275   1       
  276   1       while((Uc_key_temp = get_key(1)) != 'A')
  277   1       {
  278   2        if(Uc_key_temp == '1')
  279   2        {
  280   3          Uc_key_temp = 0;
  281   3      
  282   3          #if RESP_ON_UART0 == 1
  283   3          uart0_send_string("\n\n\rReading ZigBee Parameters...");
  284   3          #endif
  285   3          ZIGB_read();
  286   3          ZIGB_menu_page();
  287   3        }
  288   2        else if(Uc_key_temp == '2')
  289   2        {
  290   3          Uc_key_temp = 0;
  291   3          ms_delay(1000);
  292   3          #if RESP_ON_UART0 == 1
  293   3          uart0_send_string("\n\n\rWritting ZigBee Parameters...");
  294   3          #endif
  295   3          ZIGB_write();
  296   3          ZIGB_menu_page();
  297   3        }
  298   2       }
  299   1      }
  300          
  301          /**********************************************************************************/
  302          /* Function Name: ZIGB_my_read()                                                  */
  303          /* Arguments    : NONE                                                            */
  304          /* Return Types : NONE (Stores MY add. in a Global array Uc_zigb_my[])            */
  305          /* Description  : AT command function to read MY address of ZigBee                */
  306          /*                                                                                */
  307          /**********************************************************************************/
  308          
  309          void ZIGB_my_read()
  310          {
  311   1        U8 temp_cnt;
  312   1        
  313   1        uart1_send_string("ATMY");
  314   1        uart1_send_byte('\r');
  315   1      
  316   1        for(temp_cnt = 0; Uc_zigb_my[temp_cnt - 1] != '\r'; temp_cnt++)
  317   1        {
  318   2          while((U1LSR & 0x01) == 0);
  319   2          Uc_zigb_my[temp_cnt] = U1RBR;
  320   2        }
  321   1      
  322   1        Uc_zigb_my[temp_cnt - 1] = '\0';
  323   1      
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 6   

  324   1        uart0_send_string("\n\n\rMY : ");
  325   1        uart0_send_string(&Uc_zigb_my[0]);
  326   1      }
  327          
  328          
  329          /**********************************************************************************/
  330          /* Function Name: ZIGB_pan_read()                                                 */
  331          /* Arguments    : NONE                                                            */
  332          /* Return Types : NONE (Stores PAN add. in a Global array Uc_zigb_pan[])          */
  333          /* Description  : AT command function to read PAN address of ZigBee               */
  334          /*                                                                                */
  335          /**********************************************************************************/
  336          
  337          void ZIGB_pan_read()
  338          {
  339   1        U8 temp_cnt;
  340   1        
  341   1        uart1_send_string("ATID");
  342   1        uart1_send_byte('\r');
  343   1      
  344   1        for(temp_cnt = 0; Uc_zigb_pan[temp_cnt - 1] != '\r'; temp_cnt++)
  345   1        {
  346   2          while((U1LSR & 0x01) == 0);
  347   2          Uc_zigb_pan[temp_cnt] = U1RBR;
  348   2        }
  349   1      
  350   1        Uc_zigb_pan[temp_cnt - 1] = '\0';
  351   1      
  352   1        uart0_send_string("\n\n\rPAN: ");
  353   1        uart0_send_string(&Uc_zigb_pan[0]);
  354   1      }
  355          
  356          /**********************************************************************************/
  357          /* Function Name: ZIGB_ch_read()                                                  */
  358          /* Arguments    : NONE                                                            */
  359          /* Return Types : NONE (Stores CH no. in a Global array Uc_zigb_ch[])             */
  360          /* Description  : AT command function to read CH no. of ZigBee                    */
  361          /*                                                                                */
  362          /**********************************************************************************/
  363          
  364          void ZIGB_ch_read()
  365          {
  366   1        U8 temp_cnt;
  367   1        
  368   1        uart1_send_string("ATCH");
  369   1        uart1_send_byte('\r');
  370   1      
  371   1        for(temp_cnt = 0; Uc_zigb_ch[temp_cnt - 1] != '\r'; temp_cnt++)
  372   1        {
  373   2          while((U1LSR & 0x01) == 0);
  374   2          Uc_zigb_ch[temp_cnt] = U1RBR;
  375   2        }
  376   1      
  377   1        Uc_zigb_ch[temp_cnt - 1] = '\0';
  378   1      
  379   1        uart0_send_string("\n\n\rCH : ");
  380   1        uart0_send_string(&Uc_zigb_ch[0]);
  381   1      }
  382          
  383          /**********************************************************************************/
  384          /* Function Name: ZIGB_dl_read()                                                  */
  385          /* Arguments    : NONE                                                            */
  386          /* Return Types : NONE (Stores DL add. in a Global array Uc_zigb_dl[])            */
  387          /* Description  : AT command function to read DL add. of ZigBee                   */
  388          /*                                                                                */
  389          /**********************************************************************************/
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 7   

  390          
  391          void ZIGB_dl_read()
  392          {
  393   1        U8 temp_cnt;
  394   1        
  395   1        uart1_send_string("ATDL");
  396   1        uart1_send_byte('\r');
  397   1      
  398   1        for(temp_cnt = 0; Uc_zigb_dl[temp_cnt - 1] != '\r'; temp_cnt++)
  399   1        {
  400   2          while((U1LSR & 0x01) == 0);
  401   2          Uc_zigb_dl[temp_cnt] = U1RBR;
  402   2        }
  403   1      
  404   1        Uc_zigb_dl[temp_cnt - 1] = '\0';
  405   1      
  406   1        uart0_send_string("\n\n\rDL : ");
  407   1        uart0_send_string(&Uc_zigb_dl[0]);
  408   1      }
  409          
  410          /**********************************************************************************/
  411          /* Function Name: ZIGB_node_disc()                                                */
  412          /* Arguments    : NONE                                                            */
  413          /* Return Types : NONE (Discovers Nodes in near range and stores in a Global      */
  414          /*                array Uc_zigb_node[])                                           */
  415          /* Description  : AT command function to read DL add. of ZigBee                   */
  416          /*                                                                                */
  417          /**********************************************************************************/
  418          
  419          void ZIGB_node_disc()
  420          {
  421   1        U32      temp_arr[50]; 
  422   1        ZB_NODE  zb_node1;
  423   1        U8       *temp_ptr;
  424   1        U8       uc_cnt = 0;
  425   1      
  426   1        uart0_send_string("\n\n\rNode Search");
  427   1        LIB_frmt_arr(Uc_recv_data, 100);
  428   1        
  429   1        U1IER = 0x01;
  430   1        
  431   1        uart1_send_string("ATND");
  432   1        uart1_send_byte('\r');
  433   1           
  434   1        ms_delay(100000);
  435   1      
  436   1        U1IER = 0x00;
  437   1        
  438   1        uart0_send_string("\n\n\rND :\n");
  439   1        uart0_send_string(Uc_recv_data);
  440   1       
  441   1        LIB_frag_arr(Uc_recv_data, temp_arr,'\r');
  442   1      
  443   1        
  444   1        str_copy(temp_arr[0], zb_node1.my, '\r');
*** WARNING C40 IN LINE 444 OF ZIGBEE.C: 'unsigned int' converted to pointer
  445   1        uart0_send_string("\n\n\rRemote MY: ");
  446   1        uart0_send_string(zb_node1.my);
  447   1        
  448   1       
  449   1        str_copy(temp_arr[1], zb_node1.serial_high, '\r');
*** WARNING C40 IN LINE 449 OF ZIGBEE.C: 'unsigned int' converted to pointer
  450   1        uart0_send_string("\n\n\rRemote Serial High: ");
  451   1        uart0_send_string(zb_node1.serial_high);
  452   1        
  453   1      
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 8   

  454   1        str_copy(temp_arr[2], zb_node1.serial_low, '\r');
*** WARNING C40 IN LINE 454 OF ZIGBEE.C: 'unsigned int' converted to pointer
  455   1        uart0_send_string("\n\n\rRemote Serial Low: ");
  456   1        uart0_send_string(zb_node1.serial_low);
  457   1       
  458   1        str_copy(temp_arr[3], zb_node1.db, '\r');
*** WARNING C40 IN LINE 458 OF ZIGBEE.C: 'unsigned int' converted to pointer
  459   1        uart0_send_string("\n\n\rDB: ");
  460   1        uart0_send_string(zb_node1.db);
  461   1      
  462   1        
  463   1        Uc_byte_count = 0; 
  464   1      }
*** WARNING C47 IN LINE 423 OF ZIGBEE.C: 'temp_ptr': unreferenced local variable
  465           
  466          /**********************************************************************************/
  467          /* Function Name: ZIGB_read()                                                     */
  468          /* Arguments    : NONE                                                            */
  469          /* Return Types : NONE                                                            */
  470          /* Description  : reads all the basic parameters of Zigbee                        */
  471          /*                                                                                */
  472          /**********************************************************************************/
  473          
  474          void ZIGB_read()
  475          {
  476   1       ZIGB_cmd_mode();
  477   1       ZIGB_my_read(); 
  478   1       ZIGB_pan_read();
  479   1       ZIGB_ch_read();
  480   1       ZIGB_dl_read();
  481   1       ZIGB_node_disc();
  482   1       ZIGB_exit_cmd();
  483   1      }
  484          
  485          
  486          /**********************************************************************************/
  487          /* Function Name: ZIGB_write()                                                    */
  488          /* Arguments    : NONE                                                            */
  489          /* Return Types : NONE                                                            */
  490          /* Description  : writes all the basic parameters of Zigbee                       */
  491          /*                PAN, DL, CH, MY                                                 */
  492          /**********************************************************************************/
  493          
  494          void ZIGB_write()
  495          {
  496   1       ZIGB_read();
  497   1      
  498   1       ZIGB_wr_page();
  499   1       
  500   1       Uc_key_temp = get_key(0);
  501   1       while(Uc_key_temp != 'D')
  502   1       {
  503   2        Uc_key_temp = get_key(0);
  504   2        wdt_feed(0x03ffffff);
  505   2        lcd_line1_disp(&Uc_zigb_pan[0],10);
  506   2        lcd_line2_disp(&Uc_zigb_ch[0],10);
  507   2        lcd_line3_disp(&Uc_zigb_my[0],10);
  508   2        lcd_line4_disp(&Uc_zigb_dl[0],10);
  509   2        
  510   2      
  511   2        if(Uc_key_temp == '1')
  512   2        { 
  513   3          clrscr();
  514   3          lcd_line1_disp("PAN",0);
  515   3          key_usr_ip(4,&Uc_zigb_pan[0],1,10);
  516   3          ZIGB_wr_page();
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 9   

  517   3        }
  518   2        else if(Uc_key_temp == '2')
  519   2         {
  520   3          clrscr();
  521   3          lcd_line1_disp("CH",0);
  522   3          key_usr_ip(2,&Uc_zigb_ch[0],1,10);
  523   3          ZIGB_wr_page();
  524   3         }
  525   2        else if(Uc_key_temp == '3')
  526   2         {
  527   3          clrscr();
  528   3          lcd_line1_disp("MY",0);
  529   3          key_usr_ip(4,&Uc_zigb_my[0],1,10);
  530   3          ZIGB_wr_page();
  531   3         }
  532   2        else if(Uc_key_temp == '4')
  533   2         {
  534   3          clrscr();
  535   3          lcd_line1_disp("DL",0);
  536   3          key_usr_ip(4,&Uc_zigb_dl[0],1,10);
  537   3          ZIGB_wr_page();
  538   3         }
  539   2       }
  540   1      
  541   1       ms_delay(500);
  542   1      
  543   1       // Writing to ZigBee //
  544   1       
  545   1       ZIGB_cmd_mode();
  546   1       
  547   1       ZIGB_dl_wrt(&Uc_zigb_dl[0]);
  548   1       ZIGB_pan_wrt(&Uc_zigb_pan[0]);
  549   1       ZIGB_my_wrt(&Uc_zigb_my[0]);
  550   1       ZIGB_ch_wrt(&Uc_zigb_ch[0]);
  551   1      
  552   1       ZIGB_wr_cmd();
  553   1      
  554   1       ZIGB_exit_cmd();
  555   1      
  556   1      }
  557          
  558          /**********************************************************************************/
  559          /* Function Name: ZIGB_wr_page()                                                  */
  560          /* Arguments    : NONE                                                            */
  561          /* Return Types : NONE                                                            */
  562          /* Description  : Static content displayed on 3rd page for Zigbee settings        */
  563          /*                This page is related  with the Writing to ZigBee                */
  564          /**********************************************************************************/
  565          
  566          void ZIGB_wr_page()
  567          {
  568   1       clrscr();
  569   1       lcd_line1_disp("PAN",0);
  570   1       lcd_line2_disp("CH",0);
  571   1       lcd_line3_disp("MY",0);
  572   1       lcd_line4_disp("DL",0);
  573   1      }
  574          
  575          /**********************************************************************************/
  576          /* Function Name: ZIGB_menu_page()                                                */
  577          /* Arguments    : NONE                                                            */
  578          /* Return Types : NONE                                                            */
  579          /* Description  : Static content displayed on 2nd page for Zigbee settings        */
  580          /*                                                                                */
  581          /**********************************************************************************/
  582          
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 10  

  583          void ZIGB_menu_page()
  584          {
  585   1       clrscr();
  586   1       lcd_line1_disp("ZigBee Settings",2);
  587   1       lcd_line2_disp("Read    [1]",0);
  588   1       lcd_line3_disp("Write   [2]",0);
  589   1       ms_delay(1000);
  590   1      }
  591          
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (uart1_send_byte?T)
 EXTERN CODE16 (uart0_send_string?T)
 EXTERN CODE16 (uart1_send_string?T)
 EXTERN DATA (Uc_recv_data)
 EXTERN DATA (Uc_byte_count)
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (key_usr_ip?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (str_copy?T)
 EXTERN CODE16 (str_cmp?T)
 EXTERN CODE16 (LIB_frmt_arr?T)
 EXTERN CODE16 (LIB_frag_arr?T)



*** PUBLICS:
 PUBLIC         ZIGB_cmd_mode?T
 PUBLIC         ZIGB_exit_cmd?T
 PUBLIC         ZIGB_dl_wrt?T
 PUBLIC         ZIGB_setting?T
 PUBLIC         ZIGB_wr_cmd?T
 PUBLIC         ZIGB_pan_wrt?T
 PUBLIC         ZIGB_my_wrt?T
 PUBLIC         ZIGB_ch_wrt?T
 PUBLIC         ZIGB_my_read?T
 PUBLIC         ZIGB_pan_read?T
 PUBLIC         ZIGB_ch_read?T
 PUBLIC         ZIGB_dl_read?T
 PUBLIC         ZIGB_node_disc?T
 PUBLIC         ZIGB_write?T
 PUBLIC         ZIGB_read?T
 PUBLIC         ZIGB_wr_page?T
 PUBLIC         ZIGB_menu_page?T
 PUBLIC         ZIGB_responce?T
 PUBLIC         Uc_zigb_pan
 PUBLIC         Uc_zigb_ch
 PUBLIC         Uc_zigb_my
 PUBLIC         Uc_zigb_dl
 PUBLIC         Uc_zigb_node



*** DATA SEGMENT '?CON?zigbee':
 00000000          ??S_47:
 00000000            DB          'Write   [2]',0x00
 0000000C          ??S_46:
 0000000C            DB          'Read    [1]',0x00
 00000018          ??S_45:
 00000018            DB          'ZigBee Settings',0x00
 00000028          ??S_44:
 00000028            DB          'DL',0x00
 0000002B          ??S_43:
 0000002B            DB          'MY',0x00
 0000002E          ??S_42:
 0000002E            DB          'CH',0x00
 00000031          ??S_41:
 00000031            DB          'PAN',0x00
 00000035          ??S_40:
 00000035            DB          0x0A,0x0A,0x0D,'DB: ',0x00
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 12  

 0000003D          ??S_39:
 0000003D            DB          0x0A,0x0A,0x0D,'Remote Serial Low: ',0x00
 00000054          ??S_38:
 00000054            DB          0x0A,0x0A,0x0D,'Remote Serial High: ',0x00
 0000006C          ??S_37:
 0000006C            DB          0x0A,0x0A,0x0D,'Remote MY: ',0x00
 0000007B          ??S_36:
 0000007B            DB          0x0A,0x0A,0x0D,'ND :',0x0A,0x00
 00000084          ??S_35:
 00000084            DB          'ATND',0x00
 00000089          ??S_34:
 00000089            DB          0x0A,0x0A,0x0D,'Node Search',0x00
 00000098          ??S_33:
 00000098            DB          0x0A,0x0A,0x0D,'DL : ',0x00
 000000A1          ??S_32:
 000000A1            DB          0x0A,0x0A,0x0D,'CH : ',0x00
 000000AA          ??S_31:
 000000AA            DB          0x0A,0x0A,0x0D,'PAN: ',0x00
 000000B3          ??S_30:
 000000B3            DB          0x0A,0x0A,0x0D,'MY : ',0x00
 000000BC          ??S_29:
 000000BC            DB          0x0A,0x0A,0x0D,'Writting ZigBee Paramet'
 000000D6            DB          'ers...',0x00
 000000DD          ??S_28:
 000000DD            DB          0x0A,0x0A,0x0D,'Reading ZigBee Paramete'
 000000F7            DB          'rs...',0x00
 000000FD          ??S_26:
 000000FD            DB          0x0A,0x0A,0x0D,'CH: ERROR ',0x00
 0000010B          ??S_25:
 0000010B            DB          0x0A,0x0A,0x0D,'CH: OK ',0x00
 00000116          ??S_24:
 00000116            DB          'ATCH',0x00
 0000011B          ??S_23:
 0000011B            DB          0x0A,0x0A,0x0D,'MY: ERROR ',0x00
 00000129          ??S_22:
 00000129            DB          0x0A,0x0A,0x0D,'MY: OK ',0x00
 00000134          ??S_21:
 00000134            DB          'ATMY',0x00
 00000139          ??S_20:
 00000139            DB          0x0A,0x0A,0x0D,'PAN: ERROR ',0x00
 00000148          ??S_19:
 00000148            DB          0x0A,0x0A,0x0D,'PAN: OK ',0x00
 00000154          ??S_18:
 00000154            DB          'ATID',0x00
 00000159          ??S_17:
 00000159            DB          0x0A,0x0A,0x0D,'DL: ERROR ',0x00
 00000167          ??S_16:
 00000167            DB          0x0A,0x0A,0x0D,'DL: OK ',0x00
 00000172          ??S_15:
 00000172            DB          'ATDL',0x00
 00000177          ??S_14:
 00000177            DB          0x0A,0x0A,0x0D,'Exit CMD: ERROR ',0x00
 0000018B          ??S_13:
 0000018B            DB          0x0A,0x0A,0x0D,'Exit CMD: OK ',0x00
 0000019C          ??S_12:
 0000019C            DB          'ATCN',0x0D,0x00
 000001A2          ??S_11:
 000001A2            DB          0x0A,0x0A,0x0D,'WR CMD: ERROR ',0x00
 000001B4          ??S_10:
 000001B4            DB          0x0A,0x0A,0x0D,'WR CMD: OK ',0x00
 000001C3          ??S_9:
 000001C3            DB          'ATWR',0x0D,0x00
 000001C9          ??S_8:
 000001C9            DB          0x0A,0x0A,0x0D,'CMD: ERROR ',0x00
 000001D8          ??S_7:
 000001D8            DB          0x0A,0x0A,0x0D,'CMD: OK ',0x00
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 13  

 000001E4          ??S_6:
 000001E4            DB          'OK',0x0D,0x00
 000001E8          ??S_5:
 000001E8            DB          'CMD Mode',0x00
 000001F1          ??S_4:
 000001F1            DB          '+++',0x00
 000001F5            ALIGN       4
 000001F8          ?tpl?0001:
 000001F8           BEGIN_INIT
 000001F8            DB          '000',0x00
 000001FC            SPACE       16
 0000020C           END_INIT

*** DATA SEGMENT '?DT0?zigbee':
 00000000          Uc_zigb_pan:
 00000000           BEGIN_INIT
 00000000            DB          '0000',0x00
 00000005            SPACE       5
 0000000A           END_INIT
 0000000A          Uc_zigb_ch:
 0000000A           BEGIN_INIT
 0000000A            DB          '0C',0x00
 0000000D            SPACE       7
 00000014           END_INIT
 00000014          Uc_zigb_my:
 00000014           BEGIN_INIT
 00000014            DB          '0000',0x00
 00000019            SPACE       5
 0000001E           END_INIT
 0000001E          Uc_zigb_dl:
 0000001E           BEGIN_INIT
 0000001E            DB          '0000',0x00
 00000023            SPACE       5
 00000028           END_INIT
 00000028          Uc_zigb_node:
 00000028           BEGIN_INIT
 00000028            DB          '0',0x00
 0000002A            SPACE       48
 0000005A           END_INIT



*** CODE SEGMENT '?PR?ZIGB_cmd_mode?T?zigbee':
   41: void ZIGB_cmd_mode()
 00000000  B500      PUSH        {LR}
   43:  uart1_send_string("+++");
 00000002  4800      LDR         R0,=??S_4 ; ??S_4
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
   44:  clrscr();
 00000008  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000000A  FFFA      BL          clrscr?T  ; T=0x0001  (2)
   45:  lcd_line1_disp("CMD Mode",0);
 0000000C  4800      LDR         R0,=??S_5 ; ??S_5
 0000000E  2100      MOV         R1,#0x0
 00000010  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000012  FFF6      BL          lcd_line1_disp?T  ; T=0x0001  (2)
   47:  if(ZIGB_responce(3,"OK\r"))
 00000014  4800      LDR         R1,=??S_6 ; ??S_6
 00000016  2003      MOV         R0,#0x3
 00000018  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001C  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 0000001E  D006      BEQ         L_1  ; T=0x0000002E
   50:    uart0_send_string("\n\n\rCMD: OK ");
 00000020  4800      LDR         R0,=??S_7 ; ??S_7
 00000022  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000024  FFED      BL          uart0_send_string?T  ; T=0x0001  (2)
   52:    ms_delay(10000);
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 14  

 00000026  4800      LDR         R0,=0x2710
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
   53:   }
 0000002C  E005      B           L_2  ; T=0x0000003A
 0000002E          L_1:
   57:    uart0_send_string("\n\n\rCMD: ERROR ");
 0000002E  4800      LDR         R0,=??S_8 ; ??S_8
 00000030  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000032  FFE6      BL          uart0_send_string?T  ; T=0x0001  (2)
   59:    ms_delay(10000);
 00000034  4800      LDR         R0,=0x2710
 00000036  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000038  FFE3      BL          ms_delay?T  ; T=0x0001  (2)
   60:   }
 0000003A          L_2:
   61: }
 0000003A  BC08      POP         {R3}
 0000003C  4718      BX          R3
 0000003E          ENDP ; 'ZIGB_cmd_mode?T'


*** CODE SEGMENT '?PR?ZIGB_wr_cmd?T?zigbee':
   70: void ZIGB_wr_cmd()
 00000000  B500      PUSH        {LR}
   72:  uart1_send_string("ATWR\r");
 00000002  4800      LDR         R0,=??S_9 ; ??S_9
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
   73:  if(ZIGB_responce(3,"OK\r"))
 00000008  4800      LDR         R1,=??S_6 ; ??S_6
 0000000A  2003      MOV         R0,#0x3
 0000000C  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          ZIGB_responce?T  ; T=0x0001  (2)
 00000010  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000012  D006      BEQ         L_3  ; T=0x00000022
   76:      uart0_send_string("\n\n\rWR CMD: OK ");
 00000014  4800      LDR         R0,=??S_10 ; ??S_10
 00000016  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000018  FFF3      BL          uart0_send_string?T  ; T=0x0001  (2)
   78:    ms_delay(10000);
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
   79:   }
 00000020  E005      B           L_4  ; T=0x0000002E
 00000022          L_3:
   83:     uart0_send_string("\n\n\rWR CMD: ERROR ");
 00000022  4800      LDR         R0,=??S_11 ; ??S_11
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
   85:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
   86:   }
 0000002E          L_4:
   87: }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'ZIGB_wr_cmd?T'


*** CODE SEGMENT '?PR?ZIGB_exit_cmd?T?zigbee':
   96: void ZIGB_exit_cmd()
 00000000  B500      PUSH        {LR}
   98:  uart1_send_string("ATCN\r");
 00000002  4800      LDR         R0,=??S_12 ; ??S_12
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 15  

   99:  if(ZIGB_responce(3,"OK\r"))
 00000008  4800      LDR         R1,=??S_6 ; ??S_6
 0000000A  2003      MOV         R0,#0x3
 0000000C  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          ZIGB_responce?T  ; T=0x0001  (2)
 00000010  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000012  D006      BEQ         L_5  ; T=0x00000022
  102:    uart0_send_string("\n\n\rExit CMD: OK ");
 00000014  4800      LDR         R0,=??S_13 ; ??S_13
 00000016  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000018  FFF3      BL          uart0_send_string?T  ; T=0x0001  (2)
  104:    ms_delay(10000);
 0000001A  4800      LDR         R0,=0x2710
 0000001C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          ms_delay?T  ; T=0x0001  (2)
  105:   }
 00000020  E005      B           L_6  ; T=0x0000002E
 00000022          L_5:
  109:    uart0_send_string("\n\n\rExit CMD: ERROR ");
 00000022  4800      LDR         R0,=??S_14 ; ??S_14
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  111:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  112:   }
 0000002E          L_6:
  113: }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'ZIGB_exit_cmd?T'


*** CODE SEGMENT '?PR?ZIGB_dl_wrt?T?zigbee':
  124: void ZIGB_dl_wrt(U8 *dest_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; dest_add
 00000004  ---- Variable 'dest_add' assigned to Register 'R4' ----
  126:   uart1_send_string("ATDL");
 00000004  4800      LDR         R0,=??S_15 ; ??S_15
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  127:   uart1_send_string(dest_add);
 0000000A  1C20      MOV         R0,R4 ; dest_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  128:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  129:   if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_6 ; ??S_6
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_7  ; T=0x00000030
  132:    uart0_send_string("\n\n\rDL: OK ");
 00000022  4800      LDR         R0,=??S_16 ; ??S_16
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  134:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  135:   }
 0000002E  E005      B           L_8  ; T=0x0000003C
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 16  

 00000030          L_7:
  139:    uart0_send_string("\n\n\rDL: ERROR ");
 00000030  4800      LDR         R0,=??S_17 ; ??S_17
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  141:    ms_delay(10000);
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  142:   }
 0000003C          L_8:
  144: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_dl_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_pan_wrt?T?zigbee':
  154: void ZIGB_pan_wrt(U8 *pan_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; pan_add
 00000004  ---- Variable 'pan_add' assigned to Register 'R4' ----
  156:   uart1_send_string("ATID");
 00000004  4800      LDR         R0,=??S_18 ; ??S_18
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  157:   uart1_send_string(pan_add);
 0000000A  1C20      MOV         R0,R4 ; pan_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  158:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  160:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_6 ; ??S_6
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_9  ; T=0x00000030
  163:    uart0_send_string("\n\n\rPAN: OK ");
 00000022  4800      LDR         R0,=??S_19 ; ??S_19
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  165:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  166:   }
 0000002E  E005      B           L_10  ; T=0x0000003C
 00000030          L_9:
  170:    uart0_send_string("\n\n\rPAN: ERROR ");
 00000030  4800      LDR         R0,=??S_20 ; ??S_20
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  172:    ms_delay(10000);
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  173:   }
 0000003C          L_10:
  174: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_pan_wrt?T'

ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 17  


*** CODE SEGMENT '?PR?ZIGB_my_wrt?T?zigbee':
  183: void ZIGB_my_wrt(U8 *my_add)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; my_add
 00000004  ---- Variable 'my_add' assigned to Register 'R4' ----
  185:   uart1_send_string("ATMY");
 00000004  4800      LDR         R0,=??S_21 ; ??S_21
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  186:   uart1_send_string(my_add);
 0000000A  1C20      MOV         R0,R4 ; my_add
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  187:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  189:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_6 ; ??S_6
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_11  ; T=0x00000030
  192:    uart0_send_string("\n\n\rMY: OK ");
 00000022  4800      LDR         R0,=??S_22 ; ??S_22
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  194:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  195:   }
 0000002E  E005      B           L_12  ; T=0x0000003C
 00000030          L_11:
  199:    uart0_send_string("\n\n\rMY: ERROR ");
 00000030  4800      LDR         R0,=??S_23 ; ??S_23
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  201:    ms_delay(10000);                   
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  202:   }
 0000003C          L_12:
  203: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_my_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_ch_wrt?T?zigbee':
  213: void ZIGB_ch_wrt(U8 *ch_no)
 00000000  B510      PUSH        {R4,LR}
 00000002  1C04      MOV         R4,R0 ; ch_no
 00000004  ---- Variable 'ch_no' assigned to Register 'R4' ----
  215:   uart1_send_string("ATCH");
 00000004  4800      LDR         R0,=??S_24 ; ??S_24
 00000006  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart1_send_string?T  ; T=0x0001  (2)
  216:   uart1_send_string(ch_no);
 0000000A  1C20      MOV         R0,R4 ; ch_no
 0000000C  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          uart1_send_string?T  ; T=0x0001  (2)
  217:   uart1_send_byte('\r');
 00000010  200D      MOV         R0,#0xD
 00000012  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 18  

 00000014  FFF5      BL          uart1_send_byte?T  ; T=0x0001  (2)
  219:    if(ZIGB_responce(3,"OK\r"))
 00000016  4800      LDR         R1,=??S_6 ; ??S_6
 00000018  2003      MOV         R0,#0x3
 0000001A  F7FF      BL          ZIGB_responce?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_responce?T  ; T=0x0001  (2)
 0000001E  2800      CMP         R0,#0x0 ; ZIGB_responce?T
 00000020  D006      BEQ         L_13  ; T=0x00000030
  222:    uart0_send_string("\n\n\rCH: OK ");
 00000022  4800      LDR         R0,=??S_25 ; ??S_25
 00000024  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000026  FFEC      BL          uart0_send_string?T  ; T=0x0001  (2)
  224:    ms_delay(10000);
 00000028  4800      LDR         R0,=0x2710
 0000002A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          ms_delay?T  ; T=0x0001  (2)
  225:   }
 0000002E  E005      B           L_14  ; T=0x0000003C
 00000030          L_13:
  229:    uart0_send_string("\n\n\rCH: ERROR ");
 00000030  4800      LDR         R0,=??S_26 ; ??S_26
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  231:    ms_delay(10000);
 00000036  4800      LDR         R0,=0x2710
 00000038  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          ms_delay?T  ; T=0x0001  (2)
  232:   }
 0000003C          L_14:
  233: }
 0000003C  BC10      POP         {R4}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'ZIGB_ch_wrt?T'


*** CODE SEGMENT '?PR?ZIGB_responce?T?zigbee':
  244: U8 ZIGB_responce(U8 resp_cnt, U8 *resp)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C0C      MOV         R4,R1 ; resp
 00000004  ---- Variable 'resp' assigned to Register 'R4' ----
 00000004  1C05      MOV         R5,R0 ; resp_cnt
 00000006  ---- Variable 'resp_cnt' assigned to Register 'R5' ----
 00000006  B085      SUB         R13,#0x14
  245: {
 00000008            ; SCOPE-START
  246:   U8 temp_arr[20]= "000";
 00000008  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 0000000A  A800      ADD         R0,R13,#0x0
 0000000C  2214      MOV         R2,#0x14
 0000000E          L_82:
 0000000E  780B      LDRB        R3,[R1,#0x0]
 00000010  7003      STRB        R3,[R0,#0x0]
 00000012  1C49      ADD         R1,R1,#0x1
 00000014  1C40      ADD         R0,R0,#0x1
 00000016  1E52      SUB         R2,R2,#0x1
 00000018  D1F9      BNE         L_82  ; T=0x0000000E
  248:   for(temp_cnt = 0; temp_cnt < resp_cnt; temp_cnt++)
 0000001A  2100      MOV         R1,#0x0
 0000001C  ---- Variable 'temp_cnt' assigned to Register 'R1' ----
 0000001C  E00E      B           L_17  ; T=0x0000003C
  250:        while((U1LSR & 0x01) == 0);
 0000001E          L_23:
 0000001E          L_20:
 0000001E  4800      LDR         R0,=0xE0010014
 00000020  7800      LDRB        R0,[R0,#0x0]
 00000022  2201      MOV         R2,#0x1
 00000024  4210      TST         R0,R2
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 19  

 00000026  D0FA      BEQ         L_20  ; T=0x0000001E
  251:        temp_arr[temp_cnt] = U1RBR;
 00000028  4800      LDR         R0,=0xE0010000
 0000002A  7800      LDRB        R0,[R0,#0x0]
 0000002C  1C0A      MOV         R2,R1 ; temp_cnt
 0000002E  0613      LSL         R3,R2,#0x18 ; temp_cnt
 00000030  0E1B      LSR         R3,R3,#0x18
 00000032  AA00      ADD         R2,R13,#0x0
 00000034  54D0      STRB        R0,[R2,R3]
  252:    }    
 00000036  3101      ADD         R1,#0x1
 00000038  0609      LSL         R1,R1,#0x18
 0000003A  0E09      LSR         R1,R1,#0x18
 0000003C          L_17:
 0000003C  1C28      MOV         R0,R5 ; resp_cnt
 0000003E  0602      LSL         R2,R0,#0x18 ; resp_cnt
 00000040  0E12      LSR         R2,R2,#0x18
 00000042  1C08      MOV         R0,R1 ; temp_cnt
 00000044  0600      LSL         R0,R0,#0x18 ; temp_cnt
 00000046  0E00      LSR         R0,R0,#0x18
 00000048  4290      CMP         R0,R2
 0000004A  D3E8      BCC         L_23  ; T=0x0000001E
  253:   if(str_cmp(&temp_arr[0],resp))
 0000004C  A800      ADD         R0,R13,#0x0
 0000004E  1C21      MOV         R1,R4 ; resp
 00000050  F7FF      BL          str_cmp?T  ; T=0x0001  (1)
 00000052  FFD6      BL          str_cmp?T  ; T=0x0001  (2)
 00000054  2800      CMP         R0,#0x0 ; str_cmp?T
 00000056  D001      BEQ         L_24  ; T=0x0000005C
  255:      return 1;
 00000058  2001      MOV         R0,#0x1
 0000005A  E000      B           L_25  ; T=0x0000005E
  256:    }
 0000005C          L_24:
  259:     return 0;
 0000005C  2000      MOV         R0,#0x0
  260:    }
 0000005E            ; SCOPE-END
  261: }
 0000005E          L_25:
 0000005E  B005      ADD         R13,#0x14
 00000060  BC30      POP         {R4-R5}
 00000062  BC08      POP         {R3}
 00000064  4718      BX          R3
 00000066          ENDP ; 'ZIGB_responce?T'


*** CODE SEGMENT '?PR?ZIGB_setting?T?zigbee':
  272: void ZIGB_setting()
 00000000  B510      PUSH        {R4,LR}
  274:  ZIGB_menu_page();
 00000002  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000004  FFFD      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
  276:  while((Uc_key_temp = get_key(1)) != 'A')
 00000006  E01E      B           L_27  ; T=0x00000046
 00000008          L_29:
  278:   if(Uc_key_temp == '1')
 00000008  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000000A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000000C  1C04      MOV         R4,R0
 0000000E  2C31      CMP         R4,#0x31
 00000010  D10A      BNE         L_31  ; T=0x00000028
  280:       Uc_key_temp = 0;
 00000012  2100      MOV         R1,#0x0
 00000014  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000016  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
  283:     uart0_send_string("\n\n\rReading ZigBee Parameters...");
 00000018  4800      LDR         R0,=??S_28 ; ??S_28
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 20  

 0000001A  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          uart0_send_string?T  ; T=0x0001  (2)
  285:     ZIGB_read();
 0000001E  F7FF      BL          ZIGB_read?T  ; T=0x0001  (1)
 00000020  FFEF      BL          ZIGB_read?T  ; T=0x0001  (2)
  286:     ZIGB_menu_page();
 00000022  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000024  FFED      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
  287:   }
 00000026  E00E      B           L_27  ; T=0x00000046
 00000028          L_31:
  288:   else if(Uc_key_temp == '2')
 00000028  2C32      CMP         R4,#0x32
 0000002A  D10C      BNE         L_27  ; T=0x00000046
  290:        Uc_key_temp = 0;
 0000002C  2100      MOV         R1,#0x0
 0000002E  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000030  7001      STRB        R1,[R0,#0x0] ; Uc_key_temp
  291:     ms_delay(1000);
 00000032  48FA      LDR         R0,=0x3E8
 00000034  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000036  FFE4      BL          ms_delay?T  ; T=0x0001  (2)
  293:     uart0_send_string("\n\n\rWritting ZigBee Parameters...");
 00000038  4800      LDR         R0,=??S_29 ; ??S_29
 0000003A  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          uart0_send_string?T  ; T=0x0001  (2)
  295:     ZIGB_write();
 0000003E  F7FF      BL          ZIGB_write?T  ; T=0x0001  (1)
 00000040  FFDF      BL          ZIGB_write?T  ; T=0x0001  (2)
  296:     ZIGB_menu_page();
 00000042  F7FF      BL          ZIGB_menu_page?T  ; T=0x0001  (1)
 00000044  FFDD      BL          ZIGB_menu_page?T  ; T=0x0001  (2)
  298:  }
 00000046          L_27:
 00000046  2001      MOV         R0,#0x1
 00000048  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000004A  FFDA      BL          get_key?T  ; T=0x0001  (2)
 0000004C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000004E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 00000050  0600      LSL         R0,R0,#0x18 ; get_key?T
 00000052  0E00      LSR         R0,R0,#0x18
 00000054  2841      CMP         R0,#0x41
 00000056  D1D7      BNE         L_29  ; T=0x00000008
  299: }
 00000058  BC10      POP         {R4}
 0000005A  BC08      POP         {R3}
 0000005C  4718      BX          R3
 0000005E          ENDP ; 'ZIGB_setting?T'


*** CODE SEGMENT '?PR?ZIGB_my_read?T?zigbee':
  309: void ZIGB_my_read()
 00000000  B500      PUSH        {LR}
  310: {
 00000002            ; SCOPE-START
  313:   uart1_send_string("ATMY");
 00000002  4800      LDR         R0,=??S_21 ; ??S_21
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
  314:   uart1_send_byte('\r');
 00000008  200D      MOV         R0,#0xD
 0000000A  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          uart1_send_byte?T  ; T=0x0001  (2)
  316:   for(temp_cnt = 0; Uc_zigb_my[temp_cnt - 1] != '\r'; temp_cnt++)
 0000000E  2200      MOV         R2,#0x0
 00000010  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000010  E00E      B           L_36  ; T=0x00000030
  318:        while((U1LSR & 0x01) == 0);
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 21  

 00000012          L_42:
 00000012          L_39:
 00000012  4800      LDR         R0,=0xE0010014
 00000014  7800      LDRB        R0,[R0,#0x0]
 00000016  2101      MOV         R1,#0x1
 00000018  4208      TST         R0,R1
 0000001A  D0FA      BEQ         L_39  ; T=0x00000012
  319:        Uc_zigb_my[temp_cnt] = U1RBR;
 0000001C  4800      LDR         R0,=0xE0010000
 0000001E  7800      LDRB        R0,[R0,#0x0]
 00000020  1C11      MOV         R1,R2 ; temp_cnt
 00000022  060B      LSL         R3,R1,#0x18 ; temp_cnt
 00000024  0E1B      LSR         R3,R3,#0x18
 00000026  4800      LDR         R1,=Uc_zigb_my ; Uc_zigb_my
 00000028  54C8      STRB        R0,[R1,R3]
  320:   }
 0000002A  3201      ADD         R2,#0x1
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030          L_36:
 00000030  1C10      MOV         R0,R2 ; temp_cnt
 00000032  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000034  0E09      LSR         R1,R1,#0x18
 00000036  4800      LDR         R0,=Uc_zigb_my + 0xFFFFFFFF ; Uc_zigb_my-1
 00000038  5C40      LDRB        R0,[R0,R1]
 0000003A  280D      CMP         R0,#0xD
 0000003C  D1E9      BNE         L_42  ; T=0x00000012
  322:   Uc_zigb_my[temp_cnt - 1] = '\0';
 0000003E  2000      MOV         R0,#0x0
 00000040  1C11      MOV         R1,R2 ; temp_cnt
 00000042  060A      LSL         R2,R1,#0x18 ; temp_cnt
 00000044  0E12      LSR         R2,R2,#0x18
 00000046  4800      LDR         R1,=Uc_zigb_my + 0xFFFFFFFF ; Uc_zigb_my-1
 00000048  5488      STRB        R0,[R1,R2]
  324:   uart0_send_string("\n\n\rMY : ");
 0000004A  4800      LDR         R0,=??S_30 ; ??S_30
 0000004C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          uart0_send_string?T  ; T=0x0001  (2)
  325:   uart0_send_string(&Uc_zigb_my[0]);
 00000050  4800      LDR         R0,=Uc_zigb_my ; Uc_zigb_my
 00000052  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000054  FFD5      BL          uart0_send_string?T  ; T=0x0001  (2)
 00000056            ; SCOPE-END
  326: }
 00000056  BC08      POP         {R3}
 00000058  4718      BX          R3
 0000005A          ENDP ; 'ZIGB_my_read?T'


*** CODE SEGMENT '?PR?ZIGB_pan_read?T?zigbee':
  337: void ZIGB_pan_read()
 00000000  B500      PUSH        {LR}
  338: {
 00000002            ; SCOPE-START
  341:   uart1_send_string("ATID");
 00000002  4800      LDR         R0,=??S_18 ; ??S_18
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
  342:   uart1_send_byte('\r');
 00000008  200D      MOV         R0,#0xD
 0000000A  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          uart1_send_byte?T  ; T=0x0001  (2)
  344:   for(temp_cnt = 0; Uc_zigb_pan[temp_cnt - 1] != '\r'; temp_cnt++)
 0000000E  2200      MOV         R2,#0x0
 00000010  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000010  E00E      B           L_45  ; T=0x00000030
  346:        while((U1LSR & 0x01) == 0);
 00000012          L_51:
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 22  

 00000012          L_48:
 00000012  4800      LDR         R0,=0xE0010014
 00000014  7800      LDRB        R0,[R0,#0x0]
 00000016  2101      MOV         R1,#0x1
 00000018  4208      TST         R0,R1
 0000001A  D0FA      BEQ         L_48  ; T=0x00000012
  347:        Uc_zigb_pan[temp_cnt] = U1RBR;
 0000001C  4800      LDR         R0,=0xE0010000
 0000001E  7800      LDRB        R0,[R0,#0x0]
 00000020  1C11      MOV         R1,R2 ; temp_cnt
 00000022  060B      LSL         R3,R1,#0x18 ; temp_cnt
 00000024  0E1B      LSR         R3,R3,#0x18
 00000026  4800      LDR         R1,=Uc_zigb_pan ; Uc_zigb_pan
 00000028  54C8      STRB        R0,[R1,R3]
  348:   }
 0000002A  3201      ADD         R2,#0x1
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030          L_45:
 00000030  1C10      MOV         R0,R2 ; temp_cnt
 00000032  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000034  0E09      LSR         R1,R1,#0x18
 00000036  4800      LDR         R0,=Uc_zigb_pan + 0xFFFFFFFF ; Uc_zigb_pan-1
 00000038  5C40      LDRB        R0,[R0,R1]
 0000003A  280D      CMP         R0,#0xD
 0000003C  D1E9      BNE         L_51  ; T=0x00000012
  350:   Uc_zigb_pan[temp_cnt - 1] = '\0';
 0000003E  2000      MOV         R0,#0x0
 00000040  1C11      MOV         R1,R2 ; temp_cnt
 00000042  060A      LSL         R2,R1,#0x18 ; temp_cnt
 00000044  0E12      LSR         R2,R2,#0x18
 00000046  4800      LDR         R1,=Uc_zigb_pan + 0xFFFFFFFF ; Uc_zigb_pan-1
 00000048  5488      STRB        R0,[R1,R2]
  352:   uart0_send_string("\n\n\rPAN: ");
 0000004A  4800      LDR         R0,=??S_31 ; ??S_31
 0000004C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          uart0_send_string?T  ; T=0x0001  (2)
  353:   uart0_send_string(&Uc_zigb_pan[0]);
 00000050  4800      LDR         R0,=Uc_zigb_pan ; Uc_zigb_pan
 00000052  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000054  FFD5      BL          uart0_send_string?T  ; T=0x0001  (2)
 00000056            ; SCOPE-END
  354: }
 00000056  BC08      POP         {R3}
 00000058  4718      BX          R3
 0000005A          ENDP ; 'ZIGB_pan_read?T'


*** CODE SEGMENT '?PR?ZIGB_ch_read?T?zigbee':
  364: void ZIGB_ch_read()
 00000000  B500      PUSH        {LR}
  365: {
 00000002            ; SCOPE-START
  368:   uart1_send_string("ATCH");
 00000002  4800      LDR         R0,=??S_24 ; ??S_24
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
  369:   uart1_send_byte('\r');
 00000008  200D      MOV         R0,#0xD
 0000000A  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          uart1_send_byte?T  ; T=0x0001  (2)
  371:   for(temp_cnt = 0; Uc_zigb_ch[temp_cnt - 1] != '\r'; temp_cnt++)
 0000000E  2200      MOV         R2,#0x0
 00000010  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000010  E00E      B           L_54  ; T=0x00000030
  373:        while((U1LSR & 0x01) == 0);
 00000012          L_60:
 00000012          L_57:
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 23  

 00000012  4800      LDR         R0,=0xE0010014
 00000014  7800      LDRB        R0,[R0,#0x0]
 00000016  2101      MOV         R1,#0x1
 00000018  4208      TST         R0,R1
 0000001A  D0FA      BEQ         L_57  ; T=0x00000012
  374:        Uc_zigb_ch[temp_cnt] = U1RBR;
 0000001C  4800      LDR         R0,=0xE0010000
 0000001E  7800      LDRB        R0,[R0,#0x0]
 00000020  1C11      MOV         R1,R2 ; temp_cnt
 00000022  060B      LSL         R3,R1,#0x18 ; temp_cnt
 00000024  0E1B      LSR         R3,R3,#0x18
 00000026  4800      LDR         R1,=Uc_zigb_ch ; Uc_zigb_ch
 00000028  54C8      STRB        R0,[R1,R3]
  375:   }
 0000002A  3201      ADD         R2,#0x1
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030          L_54:
 00000030  1C10      MOV         R0,R2 ; temp_cnt
 00000032  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000034  0E09      LSR         R1,R1,#0x18
 00000036  4800      LDR         R0,=Uc_zigb_ch + 0xFFFFFFFF ; Uc_zigb_ch-1
 00000038  5C40      LDRB        R0,[R0,R1]
 0000003A  280D      CMP         R0,#0xD
 0000003C  D1E9      BNE         L_60  ; T=0x00000012
  377:   Uc_zigb_ch[temp_cnt - 1] = '\0';
 0000003E  2000      MOV         R0,#0x0
 00000040  1C11      MOV         R1,R2 ; temp_cnt
 00000042  060A      LSL         R2,R1,#0x18 ; temp_cnt
 00000044  0E12      LSR         R2,R2,#0x18
 00000046  4800      LDR         R1,=Uc_zigb_ch + 0xFFFFFFFF ; Uc_zigb_ch-1
 00000048  5488      STRB        R0,[R1,R2]
  379:   uart0_send_string("\n\n\rCH : ");
 0000004A  4800      LDR         R0,=??S_32 ; ??S_32
 0000004C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          uart0_send_string?T  ; T=0x0001  (2)
  380:   uart0_send_string(&Uc_zigb_ch[0]);
 00000050  4800      LDR         R0,=Uc_zigb_ch ; Uc_zigb_ch
 00000052  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000054  FFD5      BL          uart0_send_string?T  ; T=0x0001  (2)
 00000056            ; SCOPE-END
  381: }
 00000056  BC08      POP         {R3}
 00000058  4718      BX          R3
 0000005A          ENDP ; 'ZIGB_ch_read?T'


*** CODE SEGMENT '?PR?ZIGB_dl_read?T?zigbee':
  391: void ZIGB_dl_read()
 00000000  B500      PUSH        {LR}
  392: {
 00000002            ; SCOPE-START
  395:   uart1_send_string("ATDL");
 00000002  4800      LDR         R0,=??S_15 ; ??S_15
 00000004  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
 00000006  FFFC      BL          uart1_send_string?T  ; T=0x0001  (2)
  396:   uart1_send_byte('\r');
 00000008  200D      MOV         R0,#0xD
 0000000A  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          uart1_send_byte?T  ; T=0x0001  (2)
  398:   for(temp_cnt = 0; Uc_zigb_dl[temp_cnt - 1] != '\r'; temp_cnt++)
 0000000E  2200      MOV         R2,#0x0
 00000010  ---- Variable 'temp_cnt' assigned to Register 'R2' ----
 00000010  E00E      B           L_63  ; T=0x00000030
  400:        while((U1LSR & 0x01) == 0);
 00000012          L_69:
 00000012          L_66:
 00000012  4800      LDR         R0,=0xE0010014
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 24  

 00000014  7800      LDRB        R0,[R0,#0x0]
 00000016  2101      MOV         R1,#0x1
 00000018  4208      TST         R0,R1
 0000001A  D0FA      BEQ         L_66  ; T=0x00000012
  401:        Uc_zigb_dl[temp_cnt] = U1RBR;
 0000001C  4800      LDR         R0,=0xE0010000
 0000001E  7800      LDRB        R0,[R0,#0x0]
 00000020  1C11      MOV         R1,R2 ; temp_cnt
 00000022  060B      LSL         R3,R1,#0x18 ; temp_cnt
 00000024  0E1B      LSR         R3,R3,#0x18
 00000026  4800      LDR         R1,=Uc_zigb_dl ; Uc_zigb_dl
 00000028  54C8      STRB        R0,[R1,R3]
  402:   }
 0000002A  3201      ADD         R2,#0x1
 0000002C  0612      LSL         R2,R2,#0x18
 0000002E  0E12      LSR         R2,R2,#0x18
 00000030          L_63:
 00000030  1C10      MOV         R0,R2 ; temp_cnt
 00000032  0601      LSL         R1,R0,#0x18 ; temp_cnt
 00000034  0E09      LSR         R1,R1,#0x18
 00000036  4800      LDR         R0,=Uc_zigb_dl + 0xFFFFFFFF ; Uc_zigb_dl-1
 00000038  5C40      LDRB        R0,[R0,R1]
 0000003A  280D      CMP         R0,#0xD
 0000003C  D1E9      BNE         L_69  ; T=0x00000012
  404:   Uc_zigb_dl[temp_cnt - 1] = '\0';
 0000003E  2000      MOV         R0,#0x0
 00000040  1C11      MOV         R1,R2 ; temp_cnt
 00000042  060A      LSL         R2,R1,#0x18 ; temp_cnt
 00000044  0E12      LSR         R2,R2,#0x18
 00000046  4800      LDR         R1,=Uc_zigb_dl + 0xFFFFFFFF ; Uc_zigb_dl-1
 00000048  5488      STRB        R0,[R1,R2]
  406:   uart0_send_string("\n\n\rDL : ");
 0000004A  4800      LDR         R0,=??S_33 ; ??S_33
 0000004C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          uart0_send_string?T  ; T=0x0001  (2)
  407:   uart0_send_string(&Uc_zigb_dl[0]);
 00000050  4800      LDR         R0,=Uc_zigb_dl ; Uc_zigb_dl
 00000052  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000054  FFD5      BL          uart0_send_string?T  ; T=0x0001  (2)
 00000056            ; SCOPE-END
  408: }
 00000056  BC08      POP         {R3}
 00000058  4718      BX          R3
 0000005A          ENDP ; 'ZIGB_dl_read?T'


*** CODE SEGMENT '?PR?ZIGB_node_disc?T?zigbee':
  419: void ZIGB_node_disc()
 00000000  B500      PUSH        {LR}
 00000002  B0BF      SUB         R13,#0xFC
  420: {
 00000004            ; SCOPE-START
  426:   uart0_send_string("\n\n\rNode Search");
 00000004  4800      LDR         R0,=??S_34 ; ??S_34
 00000006  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000008  FFFB      BL          uart0_send_string?T  ; T=0x0001  (2)
  427:   LIB_frmt_arr(Uc_recv_data, 100);
 0000000A  4800      LDR         R0,=Uc_recv_data ; Uc_recv_data
 0000000C  2164      MOV         R1,#0x64
 0000000E  F7FF      BL          LIB_frmt_arr?T  ; T=0x0001  (1)
 00000010  FFF7      BL          LIB_frmt_arr?T  ; T=0x0001  (2)
  429:   U1IER = 0x01;
 00000012  2101      MOV         R1,#0x1
 00000014  4800      LDR         R0,=0xE0010004
 00000016  6001      STR         R1,[R0,#0x0]
  431:   uart1_send_string("ATND");
 00000018  4800      LDR         R0,=??S_35 ; ??S_35
 0000001A  F7FF      BL          uart1_send_string?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 25  

 0000001C  FFF1      BL          uart1_send_string?T  ; T=0x0001  (2)
  432:   uart1_send_byte('\r');
 0000001E  200D      MOV         R0,#0xD
 00000020  F7FF      BL          uart1_send_byte?T  ; T=0x0001  (1)
 00000022  FFEE      BL          uart1_send_byte?T  ; T=0x0001  (2)
  434:   ms_delay(100000);
 00000024  4800      LDR         R0,=0x186A0
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
  436:   U1IER = 0x00;
 0000002A  2100      MOV         R1,#0x0
 0000002C  4800      LDR         R0,=0xE0010004
 0000002E  6001      STR         R1,[R0,#0x0]
  438:   uart0_send_string("\n\n\rND :\n");
 00000030  4800      LDR         R0,=??S_36 ; ??S_36
 00000032  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000034  FFE5      BL          uart0_send_string?T  ; T=0x0001  (2)
  439:   uart0_send_string(Uc_recv_data);
 00000036  4800      LDR         R0,=Uc_recv_data ; Uc_recv_data
 00000038  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          uart0_send_string?T  ; T=0x0001  (2)
  441:   LIB_frag_arr(Uc_recv_data, temp_arr,'\r');
 0000003C  4800      LDR         R0,=Uc_recv_data ; Uc_recv_data
 0000003E  A900      ADD         R1,R13,#0x0
 00000040  220D      MOV         R2,#0xD
 00000042  F7FF      BL          LIB_frag_arr?T  ; T=0x0001  (1)
 00000044  FFDD      BL          LIB_frag_arr?T  ; T=0x0001  (2)
  444:   str_copy(temp_arr[0], zb_node1.my, '\r');
 00000046  9800      LDR         R0,[R13,#0x0] ; temp_arr
 00000048  A932      ADD         R1,R13,#0xC8
 0000004A  220D      MOV         R2,#0xD
 0000004C  F7FF      BL          str_copy?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          str_copy?T  ; T=0x0001  (2)
  445:   uart0_send_string("\n\n\rRemote MY: ");
 00000050  4800      LDR         R0,=??S_37 ; ??S_37
 00000052  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000054  FFD5      BL          uart0_send_string?T  ; T=0x0001  (2)
  446:   uart0_send_string(zb_node1.my);
 00000056  A832      ADD         R0,R13,#0xC8
 00000058  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000005A  FFD2      BL          uart0_send_string?T  ; T=0x0001  (2)
  449:   str_copy(temp_arr[1], zb_node1.serial_high, '\r');
 0000005C  9801      LDR         R0,[R13,#0x4] ; temp_arr
 0000005E  21CE      MOV         R1,#0xCE
 00000060  4469      ADD         R1,R13
 00000062  220D      MOV         R2,#0xD
 00000064  F7FF      BL          str_copy?T  ; T=0x0001  (1)
 00000066  FFCC      BL          str_copy?T  ; T=0x0001  (2)
  450:   uart0_send_string("\n\n\rRemote Serial High: ");
 00000068  4800      LDR         R0,=??S_38 ; ??S_38
 0000006A  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000006C  FFC9      BL          uart0_send_string?T  ; T=0x0001  (2)
  451:   uart0_send_string(zb_node1.serial_high);
 0000006E  20CE      MOV         R0,#0xCE
 00000070  4468      ADD         R0,R13
 00000072  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000074  FFC5      BL          uart0_send_string?T  ; T=0x0001  (2)
  454:   str_copy(temp_arr[2], zb_node1.serial_low, '\r');
 00000076  9802      LDR         R0,[R13,#0x8] ; temp_arr
 00000078  21E2      MOV         R1,#0xE2
 0000007A  4469      ADD         R1,R13
 0000007C  220D      MOV         R2,#0xD
 0000007E  F7FF      BL          str_copy?T  ; T=0x0001  (1)
 00000080  FFBF      BL          str_copy?T  ; T=0x0001  (2)
  455:   uart0_send_string("\n\n\rRemote Serial Low: ");
 00000082  4800      LDR         R0,=??S_39 ; ??S_39
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 26  

 00000084  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 00000086  FFBC      BL          uart0_send_string?T  ; T=0x0001  (2)
  456:   uart0_send_string(zb_node1.serial_low);
 00000088  20E2      MOV         R0,#0xE2
 0000008A  4468      ADD         R0,R13
 0000008C  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          uart0_send_string?T  ; T=0x0001  (2)
  458:   str_copy(temp_arr[3], zb_node1.db, '\r');
 00000090  9803      LDR         R0,[R13,#0xC] ; temp_arr
 00000092  21F6      MOV         R1,#0xF6
 00000094  4469      ADD         R1,R13
 00000096  220D      MOV         R2,#0xD
 00000098  F7FF      BL          str_copy?T  ; T=0x0001  (1)
 0000009A  FFB2      BL          str_copy?T  ; T=0x0001  (2)
  459:   uart0_send_string("\n\n\rDB: ");
 0000009C  4800      LDR         R0,=??S_40 ; ??S_40
 0000009E  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 000000A0  FFAF      BL          uart0_send_string?T  ; T=0x0001  (2)
  460:   uart0_send_string(zb_node1.db);
 000000A2  20F6      MOV         R0,#0xF6
 000000A4  4468      ADD         R0,R13
 000000A6  F7FF      BL          uart0_send_string?T  ; T=0x0001  (1)
 000000A8  FFAB      BL          uart0_send_string?T  ; T=0x0001  (2)
  463:   Uc_byte_count = 0; 
 000000AA  2100      MOV         R1,#0x0
 000000AC  4800      LDR         R0,=Uc_byte_count ; Uc_byte_count
 000000AE  7001      STRB        R1,[R0,#0x0] ; Uc_byte_count
 000000B0            ; SCOPE-END
  464: }
 000000B0  B03F      ADD         R13,#0xFC
 000000B2  BC08      POP         {R3}
 000000B4  4718      BX          R3
 000000B6          ENDP ; 'ZIGB_node_disc?T'


*** CODE SEGMENT '?PR?ZIGB_read?T?zigbee':
  474: void ZIGB_read()
 00000000  B500      PUSH        {LR}
  476:  ZIGB_cmd_mode();
 00000002  F7FF      BL          ZIGB_cmd_mode?T  ; T=0x0001  (1)
 00000004  FFFD      BL          ZIGB_cmd_mode?T  ; T=0x0001  (2)
  477:  ZIGB_my_read(); 
 00000006  F7FF      BL          ZIGB_my_read?T  ; T=0x0001  (1)
 00000008  FFFB      BL          ZIGB_my_read?T  ; T=0x0001  (2)
  478:  ZIGB_pan_read();
 0000000A  F7FF      BL          ZIGB_pan_read?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ZIGB_pan_read?T  ; T=0x0001  (2)
  479:  ZIGB_ch_read();
 0000000E  F7FF      BL          ZIGB_ch_read?T  ; T=0x0001  (1)
 00000010  FFF7      BL          ZIGB_ch_read?T  ; T=0x0001  (2)
  480:  ZIGB_dl_read();
 00000012  F7FF      BL          ZIGB_dl_read?T  ; T=0x0001  (1)
 00000014  FFF5      BL          ZIGB_dl_read?T  ; T=0x0001  (2)
  481:  ZIGB_node_disc();
 00000016  F7FF      BL          ZIGB_node_disc?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ZIGB_node_disc?T  ; T=0x0001  (2)
  482:  ZIGB_exit_cmd();
 0000001A  F7FF      BL          ZIGB_exit_cmd?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          ZIGB_exit_cmd?T  ; T=0x0001  (2)
  483: }
 0000001E  BC08      POP         {R3}
 00000020  4718      BX          R3
 00000022          ENDP ; 'ZIGB_read?T'


*** CODE SEGMENT '?PR?ZIGB_write?T?zigbee':
  494: void ZIGB_write()
 00000000  B510      PUSH        {R4,LR}
  496:  ZIGB_read();
 00000002  F7FF      BL          ZIGB_read?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 27  

 00000004  FFFD      BL          ZIGB_read?T  ; T=0x0001  (2)
  498:  ZIGB_wr_page();
 00000006  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 00000008  FFFB      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  500:  Uc_key_temp = get_key(0);
 0000000A  2000      MOV         R0,#0x0
 0000000C  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000000E  FFF8      BL          get_key?T  ; T=0x0001  (2)
 00000010  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000012  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  501:  while(Uc_key_temp != 'D')
 00000014  E05D      B           L_70  ; T=0x000000D2
 00000016          L_72:
  503:   Uc_key_temp = get_key(0);
 00000016  2000      MOV         R0,#0x0
 00000018  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          get_key?T  ; T=0x0001  (2)
 0000001C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000001E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  504:   wdt_feed(0x03ffffff);
 00000020  4800      LDR         R0,=0x3FFFFFF
 00000022  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000024  FFED      BL          wdt_feed?T  ; T=0x0001  (2)
  505:   lcd_line1_disp(&Uc_zigb_pan[0],10);
 00000026  4800      LDR         R0,=Uc_zigb_pan ; Uc_zigb_pan
 00000028  210A      MOV         R1,#0xA
 0000002A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  506:   lcd_line2_disp(&Uc_zigb_ch[0],10);
 0000002E  4800      LDR         R0,=Uc_zigb_ch ; Uc_zigb_ch
 00000030  210A      MOV         R1,#0xA
 00000032  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000034  FFE5      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  507:   lcd_line3_disp(&Uc_zigb_my[0],10);
 00000036  4800      LDR         R0,=Uc_zigb_my ; Uc_zigb_my
 00000038  210A      MOV         R1,#0xA
 0000003A  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  508:   lcd_line4_disp(&Uc_zigb_dl[0],10);
 0000003E  4800      LDR         R0,=Uc_zigb_dl ; Uc_zigb_dl
 00000040  210A      MOV         R1,#0xA
 00000042  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000044  FFDD      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  511:   if(Uc_key_temp == '1')
 00000046  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000048  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000004A  1C04      MOV         R4,R0
 0000004C  2C31      CMP         R4,#0x31
 0000004E  D10E      BNE         L_74  ; T=0x0000006E
  513:      clrscr();
 00000050  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000052  FFD6      BL          clrscr?T  ; T=0x0001  (2)
  514:     lcd_line1_disp("PAN",0);
 00000054  4800      LDR         R0,=??S_41 ; ??S_41
 00000056  2100      MOV         R1,#0x0
 00000058  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000005A  FFD2      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  515:      key_usr_ip(4,&Uc_zigb_pan[0],1,10);
 0000005C  4800      LDR         R1,=Uc_zigb_pan ; Uc_zigb_pan
 0000005E  2004      MOV         R0,#0x4
 00000060  2201      MOV         R2,#0x1
 00000062  230A      MOV         R3,#0xA
 00000064  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 00000066  FFCC      BL          key_usr_ip?T  ; T=0x0001  (2)
  516:     ZIGB_wr_page();
 00000068  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 28  

 0000006A  FFCA      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  517:   }
 0000006C  E031      B           L_70  ; T=0x000000D2
 0000006E          L_74:
  518:   else if(Uc_key_temp == '2')
 0000006E  2C32      CMP         R4,#0x32
 00000070  D10E      BNE         L_76  ; T=0x00000090
  520:     clrscr();
 00000072  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000074  FFC5      BL          clrscr?T  ; T=0x0001  (2)
  521:     lcd_line1_disp("CH",0);
 00000076  4800      LDR         R0,=??S_42 ; ??S_42
 00000078  2100      MOV         R1,#0x0
 0000007A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  522:     key_usr_ip(2,&Uc_zigb_ch[0],1,10);
 0000007E  4800      LDR         R1,=Uc_zigb_ch ; Uc_zigb_ch
 00000080  2002      MOV         R0,#0x2
 00000082  2201      MOV         R2,#0x1
 00000084  230A      MOV         R3,#0xA
 00000086  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 00000088  FFBB      BL          key_usr_ip?T  ; T=0x0001  (2)
  523:     ZIGB_wr_page();
 0000008A  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 0000008C  FFB9      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  524:    }
 0000008E  E020      B           L_70  ; T=0x000000D2
 00000090          L_76:
  525:   else if(Uc_key_temp == '3')
 00000090  2C33      CMP         R4,#0x33
 00000092  D10E      BNE         L_78  ; T=0x000000B2
  527:      clrscr();
 00000094  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000096  FFB4      BL          clrscr?T  ; T=0x0001  (2)
  528:     lcd_line1_disp("MY",0);
 00000098  4800      LDR         R0,=??S_43 ; ??S_43
 0000009A  2100      MOV         R1,#0x0
 0000009C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000009E  FFB0      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  529:      key_usr_ip(4,&Uc_zigb_my[0],1,10);
 000000A0  4800      LDR         R1,=Uc_zigb_my ; Uc_zigb_my
 000000A2  2004      MOV         R0,#0x4
 000000A4  2201      MOV         R2,#0x1
 000000A6  230A      MOV         R3,#0xA
 000000A8  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 000000AA  FFAA      BL          key_usr_ip?T  ; T=0x0001  (2)
  530:     ZIGB_wr_page();
 000000AC  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 000000AE  FFA8      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  531:    }
 000000B0  E00F      B           L_70  ; T=0x000000D2
 000000B2          L_78:
  532:   else if(Uc_key_temp == '4')
 000000B2  2C34      CMP         R4,#0x34
 000000B4  D10D      BNE         L_70  ; T=0x000000D2
  534:      clrscr();
 000000B6  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000000B8  FFA3      BL          clrscr?T  ; T=0x0001  (2)
  535:     lcd_line1_disp("DL",0);
 000000BA  4800      LDR         R0,=??S_44 ; ??S_44
 000000BC  2100      MOV         R1,#0x0
 000000BE  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 000000C0  FF9F      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  536:      key_usr_ip(4,&Uc_zigb_dl[0],1,10);
 000000C2  4800      LDR         R1,=Uc_zigb_dl ; Uc_zigb_dl
 000000C4  2004      MOV         R0,#0x4
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 29  

 000000C6  2201      MOV         R2,#0x1
 000000C8  230A      MOV         R3,#0xA
 000000CA  F7FF      BL          key_usr_ip?T  ; T=0x0001  (1)
 000000CC  FF99      BL          key_usr_ip?T  ; T=0x0001  (2)
  537:     ZIGB_wr_page();
 000000CE  F7FF      BL          ZIGB_wr_page?T  ; T=0x0001  (1)
 000000D0  FF97      BL          ZIGB_wr_page?T  ; T=0x0001  (2)
  539:  }
 000000D2          L_70:
 000000D2  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000D4  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000D6  2844      CMP         R0,#0x44
 000000D8  D19D      BNE         L_72  ; T=0x00000016
  541:  ms_delay(500);
 000000DA  487D      LDR         R0,=0x1F4
 000000DC  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 000000DE  FF90      BL          ms_delay?T  ; T=0x0001  (2)
  545:  ZIGB_cmd_mode();
 000000E0  F7FF      BL          ZIGB_cmd_mode?T  ; T=0x0001  (1)
 000000E2  FF8E      BL          ZIGB_cmd_mode?T  ; T=0x0001  (2)
  547:  ZIGB_dl_wrt(&Uc_zigb_dl[0]);
 000000E4  4800      LDR         R0,=Uc_zigb_dl ; Uc_zigb_dl
 000000E6  F7FF      BL          ZIGB_dl_wrt?T  ; T=0x0001  (1)
 000000E8  FF8B      BL          ZIGB_dl_wrt?T  ; T=0x0001  (2)
  548:  ZIGB_pan_wrt(&Uc_zigb_pan[0]);
 000000EA  4800      LDR         R0,=Uc_zigb_pan ; Uc_zigb_pan
 000000EC  F7FF      BL          ZIGB_pan_wrt?T  ; T=0x0001  (1)
 000000EE  FF88      BL          ZIGB_pan_wrt?T  ; T=0x0001  (2)
  549:  ZIGB_my_wrt(&Uc_zigb_my[0]);
 000000F0  4800      LDR         R0,=Uc_zigb_my ; Uc_zigb_my
 000000F2  F7FF      BL          ZIGB_my_wrt?T  ; T=0x0001  (1)
 000000F4  FF85      BL          ZIGB_my_wrt?T  ; T=0x0001  (2)
  550:  ZIGB_ch_wrt(&Uc_zigb_ch[0]);
 000000F6  4800      LDR         R0,=Uc_zigb_ch ; Uc_zigb_ch
 000000F8  F7FF      BL          ZIGB_ch_wrt?T  ; T=0x0001  (1)
 000000FA  FF82      BL          ZIGB_ch_wrt?T  ; T=0x0001  (2)
  552:  ZIGB_wr_cmd();
 000000FC  F7FF      BL          ZIGB_wr_cmd?T  ; T=0x0001  (1)
 000000FE  FF80      BL          ZIGB_wr_cmd?T  ; T=0x0001  (2)
  554:  ZIGB_exit_cmd();
 00000100  F7FF      BL          ZIGB_exit_cmd?T  ; T=0x0001  (1)
 00000102  FF7E      BL          ZIGB_exit_cmd?T  ; T=0x0001  (2)
  556: }
 00000104  BC10      POP         {R4}
 00000106  BC08      POP         {R3}
 00000108  4718      BX          R3
 0000010A          ENDP ; 'ZIGB_write?T'


*** CODE SEGMENT '?PR?ZIGB_wr_page?T?zigbee':
  566: void ZIGB_wr_page()
 00000000  B500      PUSH        {LR}
  568:  clrscr();
 00000002  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000004  FFFD      BL          clrscr?T  ; T=0x0001  (2)
  569:  lcd_line1_disp("PAN",0);
 00000006  4800      LDR         R0,=??S_41 ; ??S_41
 00000008  2100      MOV         R1,#0x0
 0000000A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  570:  lcd_line2_disp("CH",0);
 0000000E  4800      LDR         R0,=??S_42 ; ??S_42
 00000010  2100      MOV         R1,#0x0
 00000012  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000014  FFF5      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  571:  lcd_line3_disp("MY",0);
 00000016  4800      LDR         R0,=??S_43 ; ??S_43
 00000018  2100      MOV         R1,#0x0
ARM COMPILER V2.50a,  zigbee                                                               22/01/13  14:11:17  PAGE 30  

 0000001A  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  572:  lcd_line4_disp("DL",0);
 0000001E  4800      LDR         R0,=??S_44 ; ??S_44
 00000020  2100      MOV         R1,#0x0
 00000022  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000024  FFED      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  573: }
 00000026  BC08      POP         {R3}
 00000028  4718      BX          R3
 0000002A          ENDP ; 'ZIGB_wr_page?T'


*** CODE SEGMENT '?PR?ZIGB_menu_page?T?zigbee':
  583: void ZIGB_menu_page()
 00000000  B500      PUSH        {LR}
  585:  clrscr();
 00000002  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000004  FFFD      BL          clrscr?T  ; T=0x0001  (2)
  586:  lcd_line1_disp("ZigBee Settings",2);
 00000006  4800      LDR         R0,=??S_45 ; ??S_45
 00000008  2102      MOV         R1,#0x2
 0000000A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  587:  lcd_line2_disp("Read    [1]",0);
 0000000E  4800      LDR         R0,=??S_46 ; ??S_46
 00000010  2100      MOV         R1,#0x0
 00000012  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000014  FFF5      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  588:  lcd_line3_disp("Write   [2]",0);
 00000016  4800      LDR         R0,=??S_47 ; ??S_47
 00000018  2100      MOV         R1,#0x0
 0000001A  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  589:  ms_delay(1000);
 0000001E  48FA      LDR         R0,=0x3E8
 00000020  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000022  FFEE      BL          ms_delay?T  ; T=0x0001  (2)
  590: }
 00000024  BC08      POP         {R3}
 00000026  4718      BX          R3
 00000028          ENDP ; 'ZIGB_menu_page?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        90
  const size           =       524
End of Module Information.


ARM COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
