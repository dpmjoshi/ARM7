ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE app
OBJECT MODULE PLACED IN app.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe app.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          #define NO_RECV_BYTE     22
    3          #define NO_OF_SAMPLE     05
    4          #define COOLER_ON        1<<19
    5          #define HEATER_ON        1<<20
    6          #define SSR_ON           1<<21
    7          #define BUZZER           1<<22
    8          //**********************************************//
    9          U8 strgcmp(U8 *src,U8 *cmp);
   10          void irq_init(void);
   11          void uart0_ISR(void)__irq;
   12          void uart1_ISR(void)__irq;
   13          void default_page(void);
   14          void get_user_time(void);
   15          void temp_ctrl(void);
   16          void adc_val_conv(U32, U32, U32, U32, U32, U8);
   17          
   18          void user_time_conv(void);
   19          void user_temp_conv(void);
   20          
   21          
   22          //**********************************************//
   23          U8  space[400]             = {"                                                                          
             -                                                                                                                        
             -                   "};
   24          U8  Uc_cr_lf[3]            = {"\n\r"};
   25          U8  Uc_temp_low_lcd[5]    = {"Low "};
   26          U8  Uc_temp_high_lcd[5]   = {"High"};
   27          
   28          U8  Uc_dec_arr[11]         = {"00000"};
   29          U8  Uc_set_user_time[10]   = {"00:00:00"};
   30          U8  Uc_set_temp[7]         = {"000"};
   31          
   32          U8  ascii_arr[100];
   33          U8  node_addr_arr[2];
   34          U8  node_ascii_arr[5];
   35          U8  Uc_recv_data[110];
   36          
   37          U8  Uc_byte_count = 0;
   38          U8  frame_chk_cnt = 0;
   39          U8  Uc_temp_high  = 0; 
   40          U8  Uc_adc_time_out_flag = 0;
   41          U32 Ui_temp_set_val = 0;
   42          U8  Uc_user_dwn_hr  = 0;
   43          U8  Uc_user_dwn_min = 0;
   44          U8  Uc_user_dwn_sec = 0;
   45          
   46          //***************************************************
   47          //Initialisation of ISR
   48          //***************************************************
   49          
   50          void irq_init(void)
   51          {
   52   1        
   53   1        VICVectAddr0 = (U32)&uart0_ISR;
   54   1        VICVectCntl0 = 0x20 | 6;
   55   1        VICIntEnable = 1 << 6;    
   56   1        U0IER=0x1; 
   57   1      
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 2   

   58   1        VICVectAddr1 = (U32)&uart1_ISR;
   59   1        VICVectCntl1 = 0x20 | 7;
   60   1        VICIntEnable = 1 << 7;    
   61   1        U1IER=0x1;
   62   1      
   63   1      }
   64          //***************************************************
   65          // ISR for UART0
   66          //***************************************************
   67          void uart0_ISR(void)__irq
   68          {
   69   1          
   70   1         VICVectAddr   = 0x00;
   71   1      }  
   72          //***************************************************
   73          // ISR for UART1
   74          //***************************************************
   75          
   76          void uart1_ISR(void)__irq
   77          {   
   78   1         Uc_recv_data[Uc_byte_count] = U1RBR;
   79   1         if(Uc_recv_data[Uc_byte_count] == '\r')
   80   1          {
   81   2             Uc_byte_count++;
   82   2             Uc_recv_data[Uc_byte_count] = '\n';
   83   2             Uc_byte_count++;
   84   2          }
   85   1         else
   86   1          {
   87   2           Uc_byte_count++;
   88   2          }
   89   1         
   90   1       VICVectAddr = 0x00;
   91   1      }
   92          //***************************************************
   93          // default page to be displayed in SYSTEM mode
   94          //***************************************************
   95          void default_page(void)
   96          {
   97   1        clrscr();
   98   1        lcd_line1_disp("ZigBee Test",0);
   99   1        lcd_line4_disp("Press 1 to continue",0);
  100   1      }
  101          //***************************************************
  102          // function to get time duration from user
  103          //***************************************************
  104          void get_user_time(void)
  105          {
  106   1        U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
  107   1        U8 uc_lcd_data_user_temp[30] = {"Enter Temp: "};
  108   1        U8 sc_set_time_count = 0;
  109   1        U8 uc_set_temp_count = 0;
  110   1      
  111   1        clrscr();
  112   1        lcd_line1_disp(&uc_lcd_data_user_time[0],0);
  113   1        lcd_line1_disp(&Uc_set_user_time[0],12);
  114   1       
  115   1        while(sc_set_time_count < 8)                   //uc_set_time_count < 9
  116   1        {
  117   2          wdt_feed(0x03ffffff);
  118   2          Uc_key_temp = get_key(1);
  119   2          pwm5_pulse_width(5000, 100);
  120   2          //pwm_enable();
  121   2      
  122   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  123   2          {
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 3   

  124   3              if(sc_set_time_count == 0)
  125   3              {
  126   4                  
  127   4                  if(Uc_key_temp < '3')
  128   4                  {
  129   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  130   5                      sc_set_time_count += 1;
  131   5                  }
  132   4              }
  133   3              else if(sc_set_time_count == 1)
  134   3              {
  135   4                 if((Uc_set_user_time[0] - 0x30) == 2)
  136   4                 {
  137   5                  if(Uc_key_temp < '4')
  138   5                  {
  139   6                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  140   6                      sc_set_time_count += 2;
  141   6                  }
  142   5                 }
  143   4                 else
  144   4                 {
  145   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  146   5                      sc_set_time_count += 2;
  147   5                 }
  148   4              }
  149   3              else if(sc_set_time_count == 3)
  150   3              {
  151   4                  
  152   4                  if(Uc_key_temp < '6')
  153   4                  {
  154   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  155   5                      sc_set_time_count += 1;
  156   5                  }
  157   4              }
  158   3              else if(sc_set_time_count == 4)
  159   3              {
  160   4                  
  161   4                  Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  162   4                  sc_set_time_count += 2;
  163   4                  
  164   4              }
  165   3              else if(sc_set_time_count == 6)
  166   3              {
  167   4                  
  168   4                  if(Uc_key_temp < '6')
  169   4                  {
  170   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  171   5                      sc_set_time_count += 1;
  172   5                  }
  173   4              }
  174   3              else if(sc_set_time_count == 7)
  175   3              {
  176   4                  
  177   4                  if(Uc_key_temp < 'A')
  178   4                  {
  179   5                      Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
  180   5                      sc_set_time_count += 1;
  181   5                  }
  182   4              }
  183   3      
  184   3          }
  185   2      
  186   2          if(Uc_key_temp == 'A')
  187   2          {       
  188   3                lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
  189   3                lcd_line2_disp(&Uc_set_temp[0],12);
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 4   

  190   3                sc_set_time_count = 8;
  191   3                uc_set_temp_count = 3;
  192   3          }
  193   2          //*********************************************//
  194   2        
  195   2          if(sc_set_time_count == 0)
  196   2          {
  197   3              lcd_line4_disp("Range 0-2",11);
  198   3          }
  199   2          if(sc_set_time_count == 1)
  200   2          {
  201   3              lcd_line4_disp("Range 0-3",11);
  202   3          }
  203   2          if(sc_set_time_count == 3)
  204   2          {
  205   3              lcd_line4_disp("Range 0-5",11);
  206   3          }
  207   2          if(sc_set_time_count == 4)
  208   2          {
  209   3              lcd_line4_disp("Range 0-9",11);
  210   3          }
  211   2          if(sc_set_time_count == 6)
  212   2          {
  213   3              lcd_line4_disp("Range 0-5",11);
  214   3          }
  215   2          if(sc_set_time_count == 7)
  216   2          {
  217   3              lcd_line4_disp("Range 0-9",11);
  218   3          }
  219   2          //*********************************************//
  220   2          lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
  221   2          //Uc_set_user_time[sc_set_time_count + 1] = '\0';
  222   2          key_delay(250);     // do not remove it
  223   2          lcd_line1_disp(&Uc_set_user_time[0],12);
  224   2          pwm_disable();
  225   2        }
  226   1        
  227   1      
  228   1      //---------------------------------------------------------------------------------
  229   1      //------------------------------get temp from User---------------------------------
  230   1      //---------------------------------------------------------------------------------
  231   1        lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
  232   1        while(uc_set_temp_count < 3)
  233   1        {
  234   2          wdt_feed(0x03ffffff);
  235   2          Uc_key_temp = get_key(1);
  236   2          
  237   2          pwm5_pulse_width(5000, 100);
  238   2      
  239   2          if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  240   2          {
  241   3               if(uc_set_temp_count == 0)
  242   3               {
  243   4                  if(Uc_key_temp <= '3')
  244   4                  {
  245   5                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  246   5                      uc_set_temp_count++; 
  247   5      
  248   5                  }
  249   4               }
  250   3               else 
  251   3               {
  252   4                      Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
  253   4                      uc_set_temp_count++; 
  254   4      
  255   4               }
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 5   

  256   3      
  257   3          }
  258   2          if(Uc_key_temp == 'A')
  259   2          {
  260   3               uc_set_temp_count = 3;
  261   3          }
  262   2          lcd_line2_disp(&Uc_set_temp[0],12);
  263   2          key_delay(250);     // do not remove it
  264   2          //*************range of no*****************//
  265   2          if(uc_set_temp_count == 0)
  266   2          {
  267   3              lcd_line4_disp("Range 0-3",11);
  268   3          }
  269   2          if(uc_set_temp_count == 1)
  270   2          {
  271   3              lcd_line4_disp("Range 0-9",11);
  272   3          }
  273   2          if(uc_set_temp_count == 2)
  274   2          {
  275   3              lcd_line4_disp("Range 0-9",11);
  276   3          }
  277   2          //****************************************//
  278   2          pwm_disable();
  279   2        } 
  280   1        
  281   1        lcd_line4_disp("Press Start",9);                                                           
  282   1        while((Uc_key_temp = get_key(1)) != 'D');
  283   1        Uc_alrm = 3;
  284   1        user_time_conv();   // to convert the time entered by USER
  285   1        user_temp_conv();   // to convert the temp entered by USER
  286   1      
  287   1        clrscr();
  288   1        default_page();    // Displaying default PAGE while leaving from USER MODE.
  289   1      }
  290          //***************************************************
  291          // function to convert user time in to hex
  292          //***************************************************
  293          
  294          void user_time_conv(void)
  295          {   
  296   1          U8 uc_user_hr  = 0;
  297   1          U8 uc_user_min = 0;
  298   1          U8 uc_user_sec = 0;
  299   1      
  300   1          uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
  301   1          uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
  302   1          uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
  303   1          uc_user_min += (Uc_set_user_time[4] - 0x30);
  304   1          uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
  305   1          uc_user_sec += (Uc_set_user_time[7] - 0x30);
  306   1      
  307   1          Uc_user_dwn_hr  = uc_user_hr;
  308   1          Uc_user_dwn_min = uc_user_min;
  309   1          Uc_user_dwn_sec = uc_user_sec;
  310   1          
  311   1          set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
  312   1      }
  313          //**********************************************************************************//
  314          // Function Name: function to convert User Temp in to hex                           //
  315          // Arguments    : NONE                                                              //
  316          // Return Types : NONE                                                              //
  317          // Description  : Converts Ui_temp_set_val to HEX and the conversion is placed into //
  318          //                Uc_set_temp[] array                                               //
  319          //**********************************************************************************//
  320          void user_temp_conv(void)
  321          {   
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 6   

  322   1          Ui_temp_set_val   =  0;
  323   1          Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
  324   1          Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
  325   1          Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
  326   1          
  327   1      }
  328          //**********************************************************************************//
  329          // Function Name: function to control SSR and SOLENOID                              //
  330          // Arguments    : NONE                                                              //
  331          // Return Types : NONE                                                              //
  332          // Description  : Depending on Uc_temp_high  HEATER and COOLER are controlled       //
  333          //**********************************************************************************//
  334          void temp_ctrl(void)
  335          {
  336   1          if(Uc_temp_high == 1)
  337   1           {
  338   2              IO0SET = COOLER_ON; 
  339   2              IO0CLR = HEATER_ON; 
  340   2              IO0CLR = SSR_ON;
  341   2           }
  342   1          else
  343   1           {
  344   2              IO0SET = HEATER_ON; 
  345   2              IO0CLR = COOLER_ON;
  346   2              IO0SET = SSR_ON;
  347   2           }
  348   1      }
  349          //**********************************************************************************//
  350          // Description : function to convert ADC hex value into DEC                         //
  351          // Argument    : U32 (5 samples)                                                    //
  352          // Return Type : NONE                                                               //
  353          //**********************************************************************************//
  354          void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
  355          {
  356   1       U8 a = 0;
  357   1       U32 adc_temp;
  358   1       U32 adc_val;
  359   1      //*****************************************
  360   1      // Taking AVG of 3 samples
  361   1      //*****************************************
  362   1       adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
  363   1       if(condition == 1)
  364   1       {
  365   2          if(adc_val < 4)
  366   2          {
  367   3              lcd_line3_disp("Sensor Open", 9);
  368   3           }
  369   2          else
  370   2          {
  371   3              lcd_line3_disp("           ", 9);
  372   3          }
  373   2       }
  374   1      //*****************************************
  375   1      // calibrating ADC hex data
  376   1      //*****************************************
  377   1       adc_val *= 3300;   
  378   1       adc_val >>= 10;
  379   1      
  380   1      
  381   1       if(condition == 0)
  382   1       {
  383   2          adc_val *= 2;
  384   2      //  adc_val /= 700;
  385   2       }
  386   1      
  387   1       if(condition == 1)
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 7   

  388   1       {
  389   2          if(adc_val > 10)
  390   2          {
  391   3              adc_val -= 10;
  392   3          }
  393   2       }
  394   1       
  395   1       adc_temp = adc_val;
  396   1      //*****************************************
  397   1      // Temp Control
  398   1      //*****************************************
  399   1      if(condition == 1)
  400   1      {
  401   2       if( adc_val  > Ui_temp_set_val)
  402   2         {
  403   3              Uc_temp_high = 1;
  404   3         }
  405   2       else
  406   2         {
  407   3              Uc_temp_high = 0;
  408   3         }
  409   2      
  410   2      }
  411   1      //*****************************************
  412   1      // HEX to DEC conversion 
  413   1      //*****************************************
  414   1       Uc_dec_arr[a]  = adc_temp/10000;   
  415   1       Uc_dec_arr[a] += 0x30;
  416   1       adc_temp       = adc_temp%10000;
  417   1       a++;
  418   1      //--------------------------------------
  419   1       Uc_dec_arr[a]  = adc_temp/1000;    
  420   1       Uc_dec_arr[a] += 0x30;
  421   1       adc_temp       = adc_temp%1000;
  422   1       a++;
  423   1      //--------------------------------------
  424   1       Uc_dec_arr[a]  = adc_temp/100;
  425   1       Uc_dec_arr[a] += 0x30;
  426   1       adc_temp       = adc_temp%100;
  427   1       a++;
  428   1      //--------------------------------------
  429   1       Uc_dec_arr[a]  = adc_temp/10;
  430   1       Uc_dec_arr[a] += 0x30;
  431   1       adc_temp       = adc_temp%10;
  432   1       a++;
  433   1       Uc_dec_arr[a]  = adc_temp + 0x30;
  434   1      
  435   1      }
  436           
  437          
  438          
  439          
  440          
  441          
  442          
  443            
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (lcd_line4_disp?T)
 EXTERN CODE16 (lcd_line1_ch_disp?T)
 EXTERN DATA (Uc_alrm)
 EXTERN CODE16 (set_alarm?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (pwm5_pulse_width?T)
 EXTERN CODE16 (pwm_disable?T)
 EXTERN CODE16 (wdt_feed?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         uart0_ISR?A
 PUBLIC         uart1_ISR?A
 PUBLIC         irq_init?T
 PUBLIC         default_page?T
 PUBLIC         get_user_time?T
 PUBLIC         user_temp_conv?T
 PUBLIC         temp_ctrl?T
 PUBLIC         adc_val_conv?T
 PUBLIC         user_time_conv?T
 PUBLIC         Uc_dec_arr
 PUBLIC         Uc_set_user_time
 PUBLIC         space
 PUBLIC         Uc_recv_data
 PUBLIC         Uc_user_dwn_hr
 PUBLIC         Uc_user_dwn_min
 PUBLIC         Uc_user_dwn_sec
 PUBLIC         Uc_byte_count
 PUBLIC         Uc_adc_time_out_flag
 PUBLIC         Uc_cr_lf
 PUBLIC         Uc_temp_low_lcd
 PUBLIC         Uc_temp_high_lcd
 PUBLIC         Uc_set_temp
 PUBLIC         ascii_arr
 PUBLIC         node_addr_arr
 PUBLIC         node_ascii_arr
 PUBLIC         frame_chk_cnt
 PUBLIC         Uc_temp_high
 PUBLIC         Ui_temp_set_val



*** DATA SEGMENT '?CON?app':
 00000000          ??S_18:
 00000000            DB          '           ',0x00
 0000000C          ??S_17:
 0000000C            DB          'Sensor Open',0x00
 00000018          ??S_16:
 00000018            DB          'Press Start',0x00
 00000024          ??S_15:
 00000024            DB          'Range 0-9',0x00
 0000002E          ??S_14:
 0000002E            DB          'Range 0-5',0x00
 00000038          ??S_13:
 00000038            DB          'Range 0-3',0x00
 00000042          ??S_12:
 00000042            DB          'Range 0-2',0x00
 0000004C          ??S_9:
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 9   

 0000004C            DB          'Press 1 to continue',0x00
 00000060          ??S_8:
 00000060            DB          'ZigBee Test',0x00
 0000006C          ?tpl?0001:
 0000006C           BEGIN_INIT
 0000006C            DB          'Enter Time: ',0x00
 00000079            SPACE       17
 0000008A           END_INIT
 0000008A            ALIGN       4
 0000008C          ?tpl?0002:
 0000008C           BEGIN_INIT
 0000008C            DB          'Enter Temp: ',0x00
 00000099            SPACE       17
 000000AA           END_INIT

*** DATA SEGMENT '?DT0?app':
 00000000          Ui_temp_set_val:
 00000000           BEGIN_INIT
 00000000  00000000  DD          0x0
 00000004           END_INIT
 00000004          Uc_dec_arr:
 00000004           BEGIN_INIT
 00000004            DB          '00000',0x00
 0000000A            SPACE       5
 0000000F           END_INIT
 0000000F          Uc_set_user_time:
 0000000F           BEGIN_INIT
 0000000F            DB          '00:00:00',0x00
 00000018            SPACE       1
 00000019           END_INIT
 00000019          space:
 00000019           BEGIN_INIT
 00000019            DB          '                                      '
 0000003F            DB          '                                      '
 00000065            DB          '                                      '
 0000008B            DB          '                                      '
 000000B1            DB          '                                      '
 000000D7            DB          '                       ',0x00
 000000EF            SPACE       186
 000001A9           END_INIT
 000001A9          Uc_recv_data:
 000001A9            DS          110
 00000217          Uc_user_dwn_hr:
 00000217           BEGIN_INIT
 00000217  00        DB          0x0
 00000218           END_INIT
 00000218          Uc_user_dwn_min:
 00000218           BEGIN_INIT
 00000218  00        DB          0x0
 00000219           END_INIT
 00000219          Uc_user_dwn_sec:
 00000219           BEGIN_INIT
 00000219  00        DB          0x0
 0000021A           END_INIT
 0000021A          Uc_byte_count:
 0000021A           BEGIN_INIT
 0000021A  00        DB          0x0
 0000021B           END_INIT
 0000021B          Uc_adc_time_out_flag:
 0000021B           BEGIN_INIT
 0000021B  00        DB          0x0
 0000021C           END_INIT
 0000021C          Uc_cr_lf:
 0000021C           BEGIN_INIT
 0000021C            DB          0x0A,0x0D,0x00
 0000021F           END_INIT
 0000021F          Uc_temp_low_lcd:
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 10  

 0000021F           BEGIN_INIT
 0000021F            DB          'Low ',0x00
 00000224           END_INIT
 00000224          Uc_temp_high_lcd:
 00000224           BEGIN_INIT
 00000224            DB          'High',0x00
 00000229           END_INIT
 00000229          Uc_set_temp:
 00000229           BEGIN_INIT
 00000229            DB          '000',0x00
 0000022D            SPACE       3
 00000230           END_INIT
 00000230          ascii_arr:
 00000230            DS          100
 00000294          node_addr_arr:
 00000294            DS          2
 00000296          node_ascii_arr:
 00000296            DS          5
 0000029B          frame_chk_cnt:
 0000029B           BEGIN_INIT
 0000029B  00        DB          0x0
 0000029C           END_INIT
 0000029C          Uc_temp_high:
 0000029C           BEGIN_INIT
 0000029C  00        DB          0x0
 0000029D           END_INIT



*** CODE SEGMENT '?PR?irq_init?T?app':
   53:   VICVectAddr0 = (U32)&uart0_ISR;
 00000000  4900      LDR         R1,=uart0_ISR?A ; uart0_ISR?A
 00000002  4800      LDR         R0,=0xFFFFF100
 00000004  6001      STR         R1,[R0,#0x0]
   54:   VICVectCntl0 = 0x20 | 6;
 00000006  2126      MOV         R1,#0x26
 00000008  4800      LDR         R0,=0xFFFFF200
 0000000A  6001      STR         R1,[R0,#0x0]
   55:   VICIntEnable = 1 << 6;    
 0000000C  2140      MOV         R1,#0x40
 0000000E  4800      LDR         R0,=0xFFFFF010
 00000010  6001      STR         R1,[R0,#0x0]
   56:   U0IER=0x1; 
 00000012  2101      MOV         R1,#0x1
 00000014  4800      LDR         R0,=0xE000C004
 00000016  6001      STR         R1,[R0,#0x0]
   58:   VICVectAddr1 = (U32)&uart1_ISR;
 00000018  4A00      LDR         R2,=uart1_ISR?A ; uart1_ISR?A
 0000001A  4800      LDR         R0,=0xFFFFF104
 0000001C  6002      STR         R2,[R0,#0x0]
   59:   VICVectCntl1 = 0x20 | 7;
 0000001E  2227      MOV         R2,#0x27
 00000020  4800      LDR         R0,=0xFFFFF204
 00000022  6002      STR         R2,[R0,#0x0]
   60:   VICIntEnable = 1 << 7;    
 00000024  2280      MOV         R2,#0x80
 00000026  4800      LDR         R0,=0xFFFFF010
 00000028  6002      STR         R2,[R0,#0x0]
   61:   U1IER=0x1;
 0000002A  4800      LDR         R0,=0xE0010004
 0000002C  6001      STR         R1,[R0,#0x0]
   63: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'irq_init?T'


*** CODE SEGMENT '?PR?uart0_ISR?A?app':
   67: void uart0_ISR(void)__irq
 00000000  E92D0003  STMDB       R13!,{R0-R1}
   70:    VICVectAddr   = 0x00;
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 11  

 00000004  E3A01000  MOV         R1,#0x0
 00000008  E5100000  LDR         R0,=0xFFFFF030
 0000000C  E5801000  STR         R1,[R0,#0x0]
   71: }  
 00000010  E8BD0003  LDMIA       R13!,{R0-R1}
 00000014  E25EF004  SUBS        R15,R14,#0x0004
 00000018          ENDP ; 'uart0_ISR?A'


*** CODE SEGMENT '?PR?uart1_ISR?A?app':
   76: void uart1_ISR(void)__irq
 00000000  E92D001F  STMDB       R13!,{R0-R4}
   78:    Uc_recv_data[Uc_byte_count] = U1RBR;
 00000004  E5100000  LDR         R0,=0xE0010000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E5101000  LDR         R1,=Uc_byte_count ; Uc_byte_count
 00000010  E5D11000  LDRB        R1,[R1,#0x0] ; Uc_byte_count
 00000014  E1A02001  MOV         R2,R1
 00000018  E5103000  LDR         R3,=Uc_recv_data ; Uc_recv_data
 0000001C  E7C30002  STRB        R0,[R3,+R2]
   79:    if(Uc_recv_data[Uc_byte_count] == '\r')
 00000020  E5100000  LDR         R0,=Uc_recv_data ; Uc_recv_data
 00000024  E7D00002  LDRB        R0,[R0,+R2]
 00000028  E350000D  CMP         R0,#0x000D
 0000002C  1A00000C  BNE         L_1  ; Targ=0x64
   81:        Uc_byte_count++;
 00000030  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000034  E2812001  ADD         R2,R1,#0x0001
 00000038  E5C02000  STRB        R2,[R0,#0x0] ; Uc_byte_count
   82:        Uc_recv_data[Uc_byte_count] = '\n';
 0000003C  E3A0000A  MOV         R0,#0xA
 00000040  E5102000  LDR         R2,=Uc_byte_count ; Uc_byte_count
 00000044  E5D22000  LDRB        R2,[R2,#0x0] ; Uc_byte_count
 00000048  E1A04002  MOV         R4,R2
 0000004C  E5103000  LDR         R3,=Uc_recv_data ; Uc_recv_data
 00000050  E7C30004  STRB        R0,[R3,+R4]
   83:        Uc_byte_count++;
 00000054  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000058  E2822001  ADD         R2,R2,#0x0001
 0000005C  E5C02000  STRB        R2,[R0,#0x0] ; Uc_byte_count
   84:     }
 00000060  EA000002  B           L_2  ; Targ=0x70
 00000064          L_1:
   87:      Uc_byte_count++;
 00000064  E5100000  LDR         R0,=Uc_byte_count ; Uc_byte_count
 00000068  E2811001  ADD         R1,R1,#0x0001
 0000006C  E5C01000  STRB        R1,[R0,#0x0] ; Uc_byte_count
   88:     }
 00000070          L_2:
   90:  VICVectAddr = 0x00;
 00000070  E3A01000  MOV         R1,#0x0
 00000074  E5100000  LDR         R0,=0xFFFFF030
 00000078  E5801000  STR         R1,[R0,#0x0]
   91: }
 0000007C  E8BD001F  LDMIA       R13!,{R0-R4}
 00000080  E25EF004  SUBS        R15,R14,#0x0004
 00000084          ENDP ; 'uart1_ISR?A'


*** CODE SEGMENT '?PR?default_page?T?app':
   95: void default_page(void)
 00000000  B500      PUSH        {LR}
   97:   clrscr();
 00000002  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000004  FFFD      BL          clrscr?T  ; T=0x0001  (2)
   98:   lcd_line1_disp("ZigBee Test",0);
 00000006  4800      LDR         R0,=??S_8 ; ??S_8
 00000008  2100      MOV         R1,#0x0
 0000000A  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          lcd_line1_disp?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 12  

   99:   lcd_line4_disp("Press 1 to continue",0);
 0000000E  4800      LDR         R0,=??S_9 ; ??S_9
 00000010  2100      MOV         R1,#0x0
 00000012  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000014  FFF5      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  100: }
 00000016  BC08      POP         {R3}
 00000018  4718      BX          R3
 0000001A          ENDP ; 'default_page?T'


*** CODE SEGMENT '?PR?get_user_time?T?app':
  104: void get_user_time(void)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  B090      SUB         R13,#0x40
  105: {
 00000004            ; SCOPE-START
  106:   U8 uc_lcd_data_user_time[30] = {"Enter Time: "};
 00000004  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000006  A800      ADD         R0,R13,#0x0
 00000008  221E      MOV         R2,#0x1E
 0000000A          L_70:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_70  ; T=0x0000000A
  107:   U8 uc_lcd_data_user_temp[30] = {"Enter Temp: "};
 00000016  4800      LDR         R1,=?tpl?0002 ; ?tpl?0002
 00000018  A808      ADD         R0,R13,#0x20
 0000001A  221E      MOV         R2,#0x1E
 0000001C          L_71:
 0000001C  780B      LDRB        R3,[R1,#0x0]
 0000001E  7003      STRB        R3,[R0,#0x0]
 00000020  1C49      ADD         R1,R1,#0x1
 00000022  1C40      ADD         R0,R0,#0x1
 00000024  1E52      SUB         R2,R2,#0x1
 00000026  D1F9      BNE         L_71  ; T=0x0000001C
  108:   U8 sc_set_time_count = 0;
 00000028  2400      MOV         R4,#0x0
 0000002A  1C25      MOV         R5,R4 ; sc_set_time_count
 0000002C  ---- Variable 'sc_set_time_count' assigned to Register 'R5' ----
  109:   U8 uc_set_temp_count = 0;
 0000002C  ---- Variable 'uc_set_temp_count' assigned to Register 'R4' ----
  111:   clrscr();
 0000002C  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          clrscr?T  ; T=0x0001  (2)
  112:   lcd_line1_disp(&uc_lcd_data_user_time[0],0);
 00000030  A800      ADD         R0,R13,#0x0
 00000032  2100      MOV         R1,#0x0
 00000034  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 00000036  FFE4      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  113:   lcd_line1_disp(&Uc_set_user_time[0],12);
 00000038  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 0000003A  210C      MOV         R1,#0xC
 0000003C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000003E  FFE0      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  115:   while(sc_set_time_count < 8)                   //uc_set_time_count < 9
 00000040  E0DA      B           L_3  ; T=0x000001F8
 00000042          L_5:
  117:       wdt_feed(0x03ffffff);
 00000042  4800      LDR         R0,=0x3FFFFFF
 00000044  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000046  FFDC      BL          wdt_feed?T  ; T=0x0001  (2)
  118:     Uc_key_temp = get_key(1);
 00000048  2001      MOV         R0,#0x1
 0000004A  F7FF      BL          get_key?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 13  

 0000004C  FFD9      BL          get_key?T  ; T=0x0001  (2)
 0000004E  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000050  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  119:     pwm5_pulse_width(5000, 100);
 00000052  4800      LDR         R0,=0x1388
 00000054  2164      MOV         R1,#0x64
 00000056  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000058  FFD3      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  122:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 0000005A  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000005C  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000005E  1C01      MOV         R1,R0
 00000060  2930      CMP         R1,#0x30
 00000062  DB01      BLT         L_8  ; T=0x00000068
 00000064  2301      MOV         R3,#0x1
 00000066  E000      B           L_9  ; T=0x0000006A
 00000068          L_8:
 00000068  2300      MOV         R3,#0x0
 0000006A          L_9:
 0000006A  2939      CMP         R1,#0x39
 0000006C  DC01      BGT         L_10  ; T=0x00000072
 0000006E  2201      MOV         R2,#0x1
 00000070  E000      B           L_11  ; T=0x00000074
 00000072          L_10:
 00000072  2200      MOV         R2,#0x0
 00000074          L_11:
 00000074  401A      AND         R2,R3
 00000076  2A00      CMP         R2,#0x0
 00000078  D06A      BEQ         L_7  ; T=0x00000150
  124:         if(sc_set_time_count == 0)
 0000007A  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000007C  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000007E  0E12      LSR         R2,R2,#0x18
 00000080  2A00      CMP         R2,#0x0
 00000082  D10A      BNE         L_12  ; T=0x0000009A
  127:             if(Uc_key_temp < '3')
 00000084  2933      CMP         R1,#0x33
 00000086  DA63      BGE         L_7  ; T=0x00000150
  129:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000088  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000008A  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 0000008C  0E1B      LSR         R3,R3,#0x18
 0000008E  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000090  54D0      STRB        R0,[R2,R3]
  130:                 sc_set_time_count += 1;
 00000092  3501      ADD         R5,#0x1
 00000094  062D      LSL         R5,R5,#0x18
 00000096  0E2D      LSR         R5,R5,#0x18
  132:         }
 00000098  E05A      B           L_7  ; T=0x00000150
 0000009A          L_12:
  133:         else if(sc_set_time_count == 1)
 0000009A  1C2A      MOV         R2,R5 ; sc_set_time_count
 0000009C  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 0000009E  0E12      LSR         R2,R2,#0x18
 000000A0  2A01      CMP         R2,#0x1
 000000A2  D118      BNE         L_15  ; T=0x000000D6
  135:            if((Uc_set_user_time[0] - 0x30) == 2)
 000000A4  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000A6  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time
 000000A8  3A30      SUB         R2,#0x30
 000000AA  2A02      CMP         R2,#0x2
 000000AC  D10A      BNE         L_16  ; T=0x000000C4
  137:             if(Uc_key_temp < '4')
 000000AE  2934      CMP         R1,#0x34
 000000B0  DA4E      BGE         L_7  ; T=0x00000150
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 14  

  139:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000B2  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000B4  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000B6  0E1B      LSR         R3,R3,#0x18
 000000B8  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000BA  54D0      STRB        R0,[R2,R3]
  140:                 sc_set_time_count += 2;
 000000BC  3502      ADD         R5,#0x2
 000000BE  062D      LSL         R5,R5,#0x18
 000000C0  0E2D      LSR         R5,R5,#0x18
  142:            }
 000000C2  E045      B           L_7  ; T=0x00000150
 000000C4          L_16:
  145:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000C4  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000C6  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000C8  0E1B      LSR         R3,R3,#0x18
 000000CA  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000CC  54D0      STRB        R0,[R2,R3]
  146:                 sc_set_time_count += 2;
 000000CE  3502      ADD         R5,#0x2
 000000D0  062D      LSL         R5,R5,#0x18
 000000D2  0E2D      LSR         R5,R5,#0x18
  148:         }
 000000D4  E03C      B           L_7  ; T=0x00000150
 000000D6          L_15:
  149:         else if(sc_set_time_count == 3)
 000000D6  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000D8  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000DA  0E12      LSR         R2,R2,#0x18
 000000DC  2A03      CMP         R2,#0x3
 000000DE  D10A      BNE         L_20  ; T=0x000000F6
  152:             if(Uc_key_temp < '6')
 000000E0  2936      CMP         R1,#0x36
 000000E2  DA35      BGE         L_7  ; T=0x00000150
  154:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 000000E4  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000E6  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 000000E8  0E1B      LSR         R3,R3,#0x18
 000000EA  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 000000EC  54D0      STRB        R0,[R2,R3]
  155:                 sc_set_time_count += 1;
 000000EE  3501      ADD         R5,#0x1
 000000F0  062D      LSL         R5,R5,#0x18
 000000F2  0E2D      LSR         R5,R5,#0x18
  157:         }
 000000F4  E02C      B           L_7  ; T=0x00000150
 000000F6          L_20:
  158:         else if(sc_set_time_count == 4)
 000000F6  1C2A      MOV         R2,R5 ; sc_set_time_count
 000000F8  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 000000FA  0E12      LSR         R2,R2,#0x18
 000000FC  2A04      CMP         R2,#0x4
 000000FE  D108      BNE         L_23  ; T=0x00000112
  161:             Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000100  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000102  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000104  0E1B      LSR         R3,R3,#0x18
 00000106  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000108  54D0      STRB        R0,[R2,R3]
  162:             sc_set_time_count += 2;
 0000010A  3502      ADD         R5,#0x2
 0000010C  062D      LSL         R5,R5,#0x18
 0000010E  0E2D      LSR         R5,R5,#0x18
  164:         }
 00000110  E01E      B           L_7  ; T=0x00000150
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 15  

 00000112          L_23:
  165:         else if(sc_set_time_count == 6)
 00000112  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000114  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000116  0E12      LSR         R2,R2,#0x18
 00000118  2A06      CMP         R2,#0x6
 0000011A  D10A      BNE         L_25  ; T=0x00000132
  168:             if(Uc_key_temp < '6')
 0000011C  2936      CMP         R1,#0x36
 0000011E  DA17      BGE         L_7  ; T=0x00000150
  170:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000120  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000122  0613      LSL         R3,R2,#0x18 ; sc_set_time_count
 00000124  0E1B      LSR         R3,R3,#0x18
 00000126  4800      LDR         R2,=Uc_set_user_time ; Uc_set_user_time
 00000128  54D0      STRB        R0,[R2,R3]
  171:                 sc_set_time_count += 1;
 0000012A  3501      ADD         R5,#0x1
 0000012C  062D      LSL         R5,R5,#0x18
 0000012E  0E2D      LSR         R5,R5,#0x18
  173:         }
 00000130  E00E      B           L_7  ; T=0x00000150
 00000132          L_25:
  174:         else if(sc_set_time_count == 7)
 00000132  1C2A      MOV         R2,R5 ; sc_set_time_count
 00000134  0612      LSL         R2,R2,#0x18 ; sc_set_time_count
 00000136  0E12      LSR         R2,R2,#0x18
 00000138  2A07      CMP         R2,#0x7
 0000013A  D109      BNE         L_7  ; T=0x00000150
  177:             if(Uc_key_temp < 'A')
 0000013C  2941      CMP         R1,#0x41
 0000013E  DA07      BGE         L_7  ; T=0x00000150
  179:                 Uc_set_user_time[sc_set_time_count] = Uc_key_temp;
 00000140  1C29      MOV         R1,R5 ; sc_set_time_count
 00000142  060A      LSL         R2,R1,#0x18 ; sc_set_time_count
 00000144  0E12      LSR         R2,R2,#0x18
 00000146  4800      LDR         R1,=Uc_set_user_time ; Uc_set_user_time
 00000148  5488      STRB        R0,[R1,R2]
  180:                 sc_set_time_count += 1;
 0000014A  3501      ADD         R5,#0x1
 0000014C  062D      LSL         R5,R5,#0x18
 0000014E  0E2D      LSR         R5,R5,#0x18
  184:     }
 00000150          L_7:
  186:     if(Uc_key_temp == 'A')
 00000150  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000152  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000154  2841      CMP         R0,#0x41
 00000156  D109      BNE         L_30  ; T=0x0000016C
  188:           lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
 00000158  A808      ADD         R0,R13,#0x20
 0000015A  2100      MOV         R1,#0x0
 0000015C  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000015E  FF50      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  189:           lcd_line2_disp(&Uc_set_temp[0],12);
 00000160  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000162  210C      MOV         R1,#0xC
 00000164  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000166  FF4C      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  190:           sc_set_time_count = 8;
 00000168  2508      MOV         R5,#0x8
  191:           uc_set_temp_count = 3;
 0000016A  2403      MOV         R4,#0x3
  192:     }
 0000016C          L_30:
  195:       if(sc_set_time_count == 0)
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 16  

 0000016C  1C28      MOV         R0,R5 ; sc_set_time_count
 0000016E  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000170  0E00      LSR         R0,R0,#0x18
 00000172  2800      CMP         R0,#0x0
 00000174  D103      BNE         L_31  ; T=0x0000017E
  197:         lcd_line4_disp("Range 0-2",11);
 00000176  4800      LDR         R0,=??S_12 ; ??S_12
 00000178  210B      MOV         R1,#0xB
 0000017A  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000017C  FF41      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  198:     }
 0000017E          L_31:
  199:     if(sc_set_time_count == 1)
 0000017E  1C28      MOV         R0,R5 ; sc_set_time_count
 00000180  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000182  0E00      LSR         R0,R0,#0x18
 00000184  2801      CMP         R0,#0x1
 00000186  D103      BNE         L_32  ; T=0x00000190
  201:         lcd_line4_disp("Range 0-3",11);
 00000188  4800      LDR         R0,=??S_13 ; ??S_13
 0000018A  210B      MOV         R1,#0xB
 0000018C  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 0000018E  FF38      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  202:     }
 00000190          L_32:
  203:     if(sc_set_time_count == 3)
 00000190  1C28      MOV         R0,R5 ; sc_set_time_count
 00000192  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 00000194  0E00      LSR         R0,R0,#0x18
 00000196  2803      CMP         R0,#0x3
 00000198  D103      BNE         L_33  ; T=0x000001A2
  205:         lcd_line4_disp("Range 0-5",11);
 0000019A  4800      LDR         R0,=??S_14 ; ??S_14
 0000019C  210B      MOV         R1,#0xB
 0000019E  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001A0  FF2F      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  206:     }
 000001A2          L_33:
  207:     if(sc_set_time_count == 4)
 000001A2  1C28      MOV         R0,R5 ; sc_set_time_count
 000001A4  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001A6  0E00      LSR         R0,R0,#0x18
 000001A8  2804      CMP         R0,#0x4
 000001AA  D103      BNE         L_34  ; T=0x000001B4
  209:         lcd_line4_disp("Range 0-9",11);
 000001AC  4800      LDR         R0,=??S_15 ; ??S_15
 000001AE  210B      MOV         R1,#0xB
 000001B0  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001B2  FF26      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  210:     }
 000001B4          L_34:
  211:     if(sc_set_time_count == 6)
 000001B4  1C28      MOV         R0,R5 ; sc_set_time_count
 000001B6  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001B8  0E00      LSR         R0,R0,#0x18
 000001BA  2806      CMP         R0,#0x6
 000001BC  D103      BNE         L_35  ; T=0x000001C6
  213:         lcd_line4_disp("Range 0-5",11);
 000001BE  4800      LDR         R0,=??S_14 ; ??S_14
 000001C0  210B      MOV         R1,#0xB
 000001C2  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001C4  FF1D      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  214:     }
 000001C6          L_35:
  215:     if(sc_set_time_count == 7)
 000001C6  1C28      MOV         R0,R5 ; sc_set_time_count
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 17  

 000001C8  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001CA  0E00      LSR         R0,R0,#0x18
 000001CC  2807      CMP         R0,#0x7
 000001CE  D103      BNE         L_36  ; T=0x000001D8
  217:         lcd_line4_disp("Range 0-9",11);
 000001D0  4800      LDR         R0,=??S_15 ; ??S_15
 000001D2  210B      MOV         R1,#0xB
 000001D4  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000001D6  FF14      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  218:     }
 000001D8          L_36:
  220:     lcd_line1_ch_disp(' ',((sc_set_time_count+12)-1));
 000001D8  1C28      MOV         R0,R5 ; sc_set_time_count
 000001DA  0601      LSL         R1,R0,#0x18 ; sc_set_time_count
 000001DC  0E09      LSR         R1,R1,#0x18
 000001DE  310B      ADD         R1,#0xB
 000001E0  2020      MOV         R0,#0x20
 000001E2  F7FF      BL          lcd_line1_ch_disp?T  ; T=0x0001  (1)
 000001E4  FF0D      BL          lcd_line1_ch_disp?T  ; T=0x0001  (2)
  222:     key_delay(250);     // do not remove it
 000001E6  20FA      MOV         R0,#0xFA
 000001E8  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 000001EA  FF0A      BL          key_delay?T  ; T=0x0001  (2)
  223:     lcd_line1_disp(&Uc_set_user_time[0],12);
 000001EC  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 000001EE  210C      MOV         R1,#0xC
 000001F0  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 000001F2  FF06      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  224:     pwm_disable();
 000001F4  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000001F6  FF04      BL          pwm_disable?T  ; T=0x0001  (2)
  225:   }
 000001F8          L_3:
 000001F8  1C28      MOV         R0,R5 ; sc_set_time_count
 000001FA  0600      LSL         R0,R0,#0x18 ; sc_set_time_count
 000001FC  0E00      LSR         R0,R0,#0x18
 000001FE  2808      CMP         R0,#0x8
 00000200  DA00      BLT         $+4
 00000202  E71E      B           L_5  ; T=0x00000042
  231:   lcd_line2_disp(&uc_lcd_data_user_temp[0],0);
 00000206  A808      ADD         R0,R13,#0x20
 00000208  2100      MOV         R1,#0x0
 0000020A  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000020C  FEF9      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  232:   while(uc_set_temp_count < 3)
 0000020E  E05B      B           L_37  ; T=0x000002C8
 00000210          L_39:
  234:       wdt_feed(0x03ffffff);
 00000210  4800      LDR         R0,=0x3FFFFFF
 00000212  F7FF      BL          wdt_feed?T  ; T=0x0001  (1)
 00000214  FEF5      BL          wdt_feed?T  ; T=0x0001  (2)
  235:     Uc_key_temp = get_key(1);
 00000216  2001      MOV         R0,#0x1
 00000218  F7FF      BL          get_key?T  ; T=0x0001  (1)
 0000021A  FEF2      BL          get_key?T  ; T=0x0001  (2)
 0000021C  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 0000021E  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  237:     pwm5_pulse_width(5000, 100);
 00000220  4800      LDR         R0,=0x1388
 00000222  2164      MOV         R1,#0x64
 00000224  F7FF      BL          pwm5_pulse_width?T  ; T=0x0001  (1)
 00000226  FEEC      BL          pwm5_pulse_width?T  ; T=0x0001  (2)
  239:     if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 00000228  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000022A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000022C  1C01      MOV         R1,R0
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 18  

 0000022E  2930      CMP         R1,#0x30
 00000230  DB00      BLT         L_42  ; T=0x00000234
 00000232  2301      MOV         R3,#0x1
 00000234  E7FF      B           L_43  ; T=0x00000236
 00000236          L_42:
 00000236  2300      MOV         R3,#0x0
 00000238          L_43:
 00000238  2939      CMP         R1,#0x39
 0000023A  DC00      BGT         L_44  ; T=0x0000023E
 0000023C  2201      MOV         R2,#0x1
 0000023E  E7FF      B           L_45  ; T=0x00000240
 00000240          L_44:
 00000240  2200      MOV         R2,#0x0
 00000242          L_45:
 00000242  401A      AND         R2,R3
 00000244  2A00      CMP         R2,#0x0
 00000246  D016      BEQ         L_41  ; T=0x00000276
  241:          if(uc_set_temp_count == 0)
 00000248  1C22      MOV         R2,R4 ; uc_set_temp_count
 0000024A  0612      LSL         R2,R2,#0x18 ; uc_set_temp_count
 0000024C  0E12      LSR         R2,R2,#0x18
 0000024E  2A00      CMP         R2,#0x0
 00000250  D109      BNE         L_46  ; T=0x00000266
  243:             if(Uc_key_temp <= '3')
 00000252  2933      CMP         R1,#0x33
 00000254  DC0F      BGT         L_41  ; T=0x00000276
  245:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000256  1C21      MOV         R1,R4 ; uc_set_temp_count
 00000258  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 0000025A  0E12      LSR         R2,R2,#0x18
 0000025C  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 0000025E  5488      STRB        R0,[R1,R2]
  246:                 uc_set_temp_count++; 
 00000260  3401      ADD         R4,#0x1
 00000262  0624      LSL         R4,R4,#0x18
 00000264  0E24      LSR         R4,R4,#0x18
  249:          }
 00000266  E006      B           L_41  ; T=0x00000276
 00000268          L_46:
  252:                 Uc_set_temp[uc_set_temp_count] =  Uc_key_temp;
 00000268  1C21      MOV         R1,R4 ; uc_set_temp_count
 0000026A  060A      LSL         R2,R1,#0x18 ; uc_set_temp_count
 0000026C  0E12      LSR         R2,R2,#0x18
 0000026E  4800      LDR         R1,=Uc_set_temp ; Uc_set_temp
 00000270  5488      STRB        R0,[R1,R2]
  253:                 uc_set_temp_count++; 
 00000272  3401      ADD         R4,#0x1
 00000274  0624      LSL         R4,R4,#0x18
 00000276  0E24      LSR         R4,R4,#0x18
  257:     }
 00000278          L_41:
  258:     if(Uc_key_temp == 'A')
 00000278  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000027A  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000027C  2841      CMP         R0,#0x41
 0000027E  D1FF      BNE         L_49  ; T=0x00000280
  260:          uc_set_temp_count = 3;
 00000280  2403      MOV         R4,#0x3
  261:     }
 00000282          L_49:
  262:     lcd_line2_disp(&Uc_set_temp[0],12);
 00000282  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000284  210C      MOV         R1,#0xC
 00000286  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 00000288  FEBB      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  263:     key_delay(250);     // do not remove it
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 19  

 0000028A  20FA      MOV         R0,#0xFA
 0000028C  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 0000028E  FEB8      BL          key_delay?T  ; T=0x0001  (2)
  265:     if(uc_set_temp_count == 0)
 00000290  1C20      MOV         R0,R4 ; uc_set_temp_count
 00000292  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 00000294  0E00      LSR         R0,R0,#0x18
 00000296  2800      CMP         R0,#0x0
 00000298  D102      BNE         L_50  ; T=0x000002A0
  267:         lcd_line4_disp("Range 0-3",11);
 0000029A  4800      LDR         R0,=??S_13 ; ??S_13
 0000029C  210B      MOV         R1,#0xB
 0000029E  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002A0  FEAF      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  268:     }
 000002A2          L_50:
  269:     if(uc_set_temp_count == 1)
 000002A2  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002A4  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002A6  0E00      LSR         R0,R0,#0x18
 000002A8  2801      CMP         R0,#0x1
 000002AA  D102      BNE         L_51  ; T=0x000002B2
  271:         lcd_line4_disp("Range 0-9",11);
 000002AC  4800      LDR         R0,=??S_15 ; ??S_15
 000002AE  210B      MOV         R1,#0xB
 000002B0  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002B2  FEA6      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  272:     }
 000002B4          L_51:
  273:     if(uc_set_temp_count == 2)
 000002B4  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002B6  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002B8  0E00      LSR         R0,R0,#0x18
 000002BA  2802      CMP         R0,#0x2
 000002BC  D102      BNE         L_52  ; T=0x000002C4
  275:         lcd_line4_disp("Range 0-9",11);
 000002BE  4800      LDR         R0,=??S_15 ; ??S_15
 000002C0  210B      MOV         R1,#0xB
 000002C2  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002C4  FE9D      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  276:     }
 000002C6          L_52:
  278:     pwm_disable();
 000002C6  F7FF      BL          pwm_disable?T  ; T=0x0001  (1)
 000002C8  FE9B      BL          pwm_disable?T  ; T=0x0001  (2)
  279:   }    
 000002CA          L_37:
 000002CA  1C20      MOV         R0,R4 ; uc_set_temp_count
 000002CC  0600      LSL         R0,R0,#0x18 ; uc_set_temp_count
 000002CE  0E00      LSR         R0,R0,#0x18
 000002D0  2803      CMP         R0,#0x3
 000002D2  DB9D      BLT         L_39  ; T=0x00000210
  281:   lcd_line4_disp("Press Start",9);                                                           
 000002D4  4800      LDR         R0,=??S_16 ; ??S_16
 000002D6  2109      MOV         R1,#0x9
 000002D8  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 000002DA  FE92      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  282:   while((Uc_key_temp = get_key(1)) != 'D');
 000002DC          L_53:
 000002DC  2001      MOV         R0,#0x1
 000002DE  F7FF      BL          get_key?T  ; T=0x0001  (1)
 000002E0  FE8F      BL          get_key?T  ; T=0x0001  (2)
 000002E2  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 000002E4  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 000002E6  0600      LSL         R0,R0,#0x18 ; get_key?T
 000002E8  0E00      LSR         R0,R0,#0x18
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 20  

 000002EA  2844      CMP         R0,#0x44
 000002EC  D1F6      BNE         L_53  ; T=0x000002DC
  283:   Uc_alrm = 3;
 000002EE  2103      MOV         R1,#0x3
 000002F0  4800      LDR         R0,=Uc_alrm ; Uc_alrm
 000002F2  7001      STRB        R1,[R0,#0x0] ; Uc_alrm
  284:   user_time_conv();   // to convert the time entered by USER
 000002F4  F7FF      BL          user_time_conv?T  ; T=0x0001  (1)
 000002F6  FE84      BL          user_time_conv?T  ; T=0x0001  (2)
  285:   user_temp_conv();   // to convert the temp entered by USER
 000002F8  F7FF      BL          user_temp_conv?T  ; T=0x0001  (1)
 000002FA  FE82      BL          user_temp_conv?T  ; T=0x0001  (2)
  287:   clrscr();
 000002FC  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 000002FE  FE80      BL          clrscr?T  ; T=0x0001  (2)
  288:   default_page();    // Displaying default PAGE while leaving from USER MODE.
 00000300  F7FF      BL          default_page?T  ; T=0x0001  (1)
 00000302  FE7E      BL          default_page?T  ; T=0x0001  (2)
 00000304            ; SCOPE-END
  289: }
 00000304  B010      ADD         R13,#0x40
 00000306  BC30      POP         {R4-R5}
 00000308  BC08      POP         {R3}
 0000030A  4718      BX          R3
 0000030C          ENDP ; 'get_user_time?T'


*** CODE SEGMENT '?PR?user_time_conv?T?app':
  294: void user_time_conv(void)
 00000000  B510      PUSH        {R4,LR}
  295: {    
 00000002            ; SCOPE-START
  296:     U8 uc_user_hr  = 0;
 00000002  2300      MOV         R3,#0x0
 00000004  1C19      MOV         R1,R3 ; uc_user_hr
 00000006  ---- Variable 'uc_user_hr' assigned to Register 'R1' ----
  297:     U8 uc_user_min = 0;
 00000006  1C1A      MOV         R2,R3 ; uc_user_min
 00000008  ---- Variable 'uc_user_min' assigned to Register 'R2' ----
  298:     U8 uc_user_sec = 0;
 00000008  ---- Variable 'uc_user_sec' assigned to Register 'R3' ----
  300:     uc_user_hr   = ((Uc_set_user_time[0] - 0x30) * 10);     
 00000008  4800      LDR         R0,=Uc_set_user_time ; Uc_set_user_time
 0000000A  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time
 0000000C  1C01      MOV         R1,R0
 0000000E  3930      SUB         R1,#0x30
 00000010  200A      MOV         R0,#0xA
 00000012  4341      MUL         R1,R0
 00000014  0609      LSL         R1,R1,#0x18
 00000016  0E09      LSR         R1,R1,#0x18
  301:     uc_user_hr  += (Uc_set_user_time[1] - 0x30);    
 00000018  4800      LDR         R2,=Uc_set_user_time + 0x1 ; Uc_set_user_time+1
 0000001A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+1
 0000001C  3A30      SUB         R2,#0x30
 0000001E  0612      LSL         R2,R2,#0x18
 00000020  0E12      LSR         R2,R2,#0x18
 00000022  1889      ADD         R1,R2 ; uc_user_hr
 00000024  0609      LSL         R1,R1,#0x18
 00000026  0E09      LSR         R1,R1,#0x18
  302:     uc_user_min  = ((Uc_set_user_time[3] - 0x30) * 10); 
 00000028  4800      LDR         R2,=Uc_set_user_time + 0x3 ; Uc_set_user_time+3
 0000002A  7812      LDRB        R2,[R2,#0x0] ; Uc_set_user_time+3
 0000002C  3A30      SUB         R2,#0x30
 0000002E  4342      MUL         R2,R0
 00000030  0612      LSL         R2,R2,#0x18
 00000032  0E12      LSR         R2,R2,#0x18
  303:     uc_user_min += (Uc_set_user_time[4] - 0x30);
 00000034  4800      LDR         R3,=Uc_set_user_time + 0x4 ; Uc_set_user_time+4
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 21  

 00000036  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+4
 00000038  3B30      SUB         R3,#0x30
 0000003A  061B      LSL         R3,R3,#0x18
 0000003C  0E1B      LSR         R3,R3,#0x18
 0000003E  18D2      ADD         R2,R3 ; uc_user_min
 00000040  0612      LSL         R2,R2,#0x18
 00000042  0E12      LSR         R2,R2,#0x18
  304:     uc_user_sec  = ((Uc_set_user_time[6] - 0x30) * 10); 
 00000044  4800      LDR         R3,=Uc_set_user_time + 0x6 ; Uc_set_user_time+6
 00000046  781B      LDRB        R3,[R3,#0x0] ; Uc_set_user_time+6
 00000048  3B30      SUB         R3,#0x30
 0000004A  4343      MUL         R3,R0
 0000004C  061B      LSL         R3,R3,#0x18
 0000004E  0E1B      LSR         R3,R3,#0x18
  305:     uc_user_sec += (Uc_set_user_time[7] - 0x30);
 00000050  4800      LDR         R0,=Uc_set_user_time + 0x7 ; Uc_set_user_time+7
 00000052  7800      LDRB        R0,[R0,#0x0] ; Uc_set_user_time+7
 00000054  3830      SUB         R0,#0x30
 00000056  0600      LSL         R0,R0,#0x18
 00000058  0E00      LSR         R0,R0,#0x18
 0000005A  181B      ADD         R3,R0 ; uc_user_sec
 0000005C  061B      LSL         R3,R3,#0x18
 0000005E  0E1B      LSR         R3,R3,#0x18
  307:     Uc_user_dwn_hr  = uc_user_hr;
 00000060  1C0C      MOV         R4,R1 ; uc_user_hr
 00000062  4800      LDR         R0,=Uc_user_dwn_hr ; Uc_user_dwn_hr
 00000064  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_hr
  308:     Uc_user_dwn_min = uc_user_min;
 00000066  1C14      MOV         R4,R2 ; uc_user_min
 00000068  4800      LDR         R0,=Uc_user_dwn_min ; Uc_user_dwn_min
 0000006A  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_min
  309:     Uc_user_dwn_sec = uc_user_sec;
 0000006C  1C1C      MOV         R4,R3 ; uc_user_sec
 0000006E  4800      LDR         R0,=Uc_user_dwn_sec ; Uc_user_dwn_sec
 00000070  7004      STRB        R4,[R0,#0x0] ; Uc_user_dwn_sec
  311:     set_alarm(uc_user_hr,uc_user_min,uc_user_sec);
 00000072  1C08      MOV         R0,R1 ; uc_user_hr
 00000074  0600      LSL         R0,R0,#0x18 ; uc_user_hr
 00000076  0E00      LSR         R0,R0,#0x18
 00000078  1C11      MOV         R1,R2 ; uc_user_min
 0000007A  0609      LSL         R1,R1,#0x18 ; uc_user_min
 0000007C  0E09      LSR         R1,R1,#0x18
 0000007E  1C1A      MOV         R2,R3 ; uc_user_sec
 00000080  0612      LSL         R2,R2,#0x18 ; uc_user_sec
 00000082  0E12      LSR         R2,R2,#0x18
 00000084  F7FF      BL          set_alarm?T  ; T=0x0001  (1)
 00000086  FFBC      BL          set_alarm?T  ; T=0x0001  (2)
 00000088            ; SCOPE-END
  312: }
 00000088  BC10      POP         {R4}
 0000008A  BC08      POP         {R3}
 0000008C  4718      BX          R3
 0000008E          ENDP ; 'user_time_conv?T'


*** CODE SEGMENT '?PR?user_temp_conv?T?app':
  322:     Ui_temp_set_val   =  0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000004  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  323:     Ui_temp_set_val   = ((Uc_set_temp[0] - 0x30) * 1000);   
 00000006  4800      LDR         R0,=Uc_set_temp ; Uc_set_temp
 00000008  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp
 0000000A  1C01      MOV         R1,R0
 0000000C  3930      SUB         R1,#0x30
 0000000E  48FA      LDR         R0,=0x3E8
 00000010  4341      MUL         R1,R0
 00000012  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 22  

 00000014  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  324:     Ui_temp_set_val  += ((Uc_set_temp[1] - 0x30) *  100);   
 00000016  4800      LDR         R0,=Uc_set_temp + 0x1 ; Uc_set_temp+1
 00000018  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+1
 0000001A  1C02      MOV         R2,R0
 0000001C  3A30      SUB         R2,#0x30
 0000001E  2064      MOV         R0,#0x64
 00000020  4342      MUL         R2,R0
 00000022  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000024  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 00000026  1889      ADD         R1,R2
 00000028  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  325:     Ui_temp_set_val  += ((Uc_set_temp[2] - 0x30) *   10); 
 0000002A  4800      LDR         R0,=Uc_set_temp + 0x2 ; Uc_set_temp+2
 0000002C  7800      LDRB        R0,[R0,#0x0] ; Uc_set_temp+2
 0000002E  1C02      MOV         R2,R0
 00000030  3A30      SUB         R2,#0x30
 00000032  200A      MOV         R0,#0xA
 00000034  4342      MUL         R2,R0
 00000036  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 00000038  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000003A  1889      ADD         R1,R2
 0000003C  6001      STR         R1,[R0,#0x0] ; Ui_temp_set_val
  327: }
 0000003E  4770      BX          R14
 00000040          ENDP ; 'user_temp_conv?T'


*** CODE SEGMENT '?PR?temp_ctrl?T?app':
  336:     if(Uc_temp_high == 1)
 00000000  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000002  7800      LDRB        R0,[R0,#0x0] ; Uc_temp_high
 00000004  2801      CMP         R0,#0x1
 00000006  D109      BNE         L_57  ; T=0x0000001C
  338:         IO0SET = COOLER_ON; 
 00000008  4800      LDR         R1,=0x80000
 0000000A  4800      LDR         R0,=0xE0028004
 0000000C  6001      STR         R1,[R0,#0x0]
  339:         IO0CLR = HEATER_ON; 
 0000000E  4800      LDR         R1,=0x100000
 00000010  4800      LDR         R0,=0xE002800C
 00000012  6001      STR         R1,[R0,#0x0]
  340:         IO0CLR = SSR_ON;
 00000014  4800      LDR         R1,=0x200000
 00000016  4800      LDR         R0,=0xE002800C
 00000018  6001      STR         R1,[R0,#0x0]
  341:      }
 0000001A  E008      B           L_58  ; T=0x0000002E
 0000001C          L_57:
  344:         IO0SET = HEATER_ON; 
 0000001C  4800      LDR         R1,=0x100000
 0000001E  4800      LDR         R0,=0xE0028004
 00000020  6001      STR         R1,[R0,#0x0]
  345:         IO0CLR = COOLER_ON;
 00000022  4800      LDR         R1,=0x80000
 00000024  4800      LDR         R0,=0xE002800C
 00000026  6001      STR         R1,[R0,#0x0]
  346:         IO0SET = SSR_ON;
 00000028  4800      LDR         R1,=0x200000
 0000002A  4800      LDR         R0,=0xE0028004
 0000002C  6001      STR         R1,[R0,#0x0]
  347:      }
 0000002E          L_58:
  348: }
 0000002E  4770      BX          R14
 00000030          ENDP ; 'temp_ctrl?T'


*** CODE SEGMENT '?PR?adc_val_conv?T?app':
  354: void adc_val_conv(U32 sample1, U32 sample2, U32 sample3, U32 sample4, U32 sample5, U8 condition)
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 23  

 00000000  B570      PUSH        {R4-R6,LR}
 00000002  ---- Variable 'sample4' assigned to Register 'R3' ----
 00000002  ---- Variable 'sample3' assigned to Register 'R2' ----
 00000002  1C0E      MOV         R6,R1 ; sample2
 00000004  ---- Variable 'sample2' assigned to Register 'R6' ----
 00000004  1C05      MOV         R5,R0 ; sample1
 00000006  ---- Variable 'sample1' assigned to Register 'R5' ----
  355: {
 00000006            ; SCOPE-START
  356:  U8 a = 0;
 00000006  2400      MOV         R4,#0x0
 00000008  ---- Variable 'a' assigned to Register 'R4' ----
  362:  adc_val = (sample1 + sample2 + sample3 + sample4 + sample5)/5;
 00000008  1C31      MOV         R1,R6 ; sample2
 0000000A  1C28      MOV         R0,R5 ; sample1
 0000000C  1840      ADD         R0,R1 ; sample1
 0000000E  1C11      MOV         R1,R2 ; sample3
 00000010  1840      ADD         R0,R1 ; sample3
 00000012  1C19      MOV         R1,R3 ; sample4
 00000014  1840      ADD         R0,R1 ; sample4
 00000016  9900      LDR         R1,[R13,#0x0] ; sample5
 00000018  1840      ADD         R0,R1
 0000001A  2105      MOV         R1,#0x5
 0000001C  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000001E  FFF0      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000020  1C08      MOV         R0,R1
 00000022  1C05      MOV         R5,R0 ; adc_val
 00000024  ---- Variable 'adc_val' assigned to Register 'R5' ----
  363:  if(condition == 1)
 00000024  A801      ADD         R0,R13,#0x4
 00000026  7800      LDRB        R0,[R0,#0x0] ; condition
 00000028  2801      CMP         R0,#0x1
 0000002A  D10B      BNE         L_59  ; T=0x00000044
  365:      if(adc_val < 4)
 0000002C  1C28      MOV         R0,R5 ; adc_val
 0000002E  2804      CMP         R0,#0x4 ; adc_val
 00000030  D204      BCS         L_60  ; T=0x0000003C
  367:          lcd_line3_disp("Sensor Open", 9);
 00000032  4800      LDR         R0,=??S_17 ; ??S_17
 00000034  2109      MOV         R1,#0x9
 00000036  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000038  FFE3      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  368:      }
 0000003A  E003      B           L_59  ; T=0x00000044
 0000003C          L_60:
  371:          lcd_line3_disp("           ", 9);
 0000003C  4800      LDR         R0,=??S_18 ; ??S_18
 0000003E  2109      MOV         R1,#0x9
 00000040  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 00000042  FFDE      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  373:  }
 00000044          L_59:
  377:  adc_val *= 3300;   
 00000044  4800      LDR         R0,=0xCE4
 00000046  4345      MUL         R5,R0
  378:  adc_val >>= 10;
 00000048  0AAD      LSR         R5,R5,#0xA ; adc_val
  381:  if(condition == 0)
 0000004A  A801      ADD         R0,R13,#0x4
 0000004C  7800      LDRB        R0,[R0,#0x0] ; condition
 0000004E  2800      CMP         R0,#0x0
 00000050  D101      BNE         L_62  ; T=0x00000056
  383:       adc_val *= 2;
 00000052  2102      MOV         R1,#0x2
 00000054  434D      MUL         R5,R1
  385:  }
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 24  

 00000056          L_62:
  387:  if(condition == 1)
 00000056  2801      CMP         R0,#0x1
 00000058  D103      BNE         L_63  ; T=0x00000062
  389:      if(adc_val > 10)
 0000005A  1C29      MOV         R1,R5 ; adc_val
 0000005C  290A      CMP         R1,#0xA ; adc_val
 0000005E  D900      BLS         L_63  ; T=0x00000062
  391:          adc_val -= 10;
 00000060  3D0A      SUB         R5,#0xA
  393:  }
 00000062          L_63:
  395:  adc_temp = adc_val;
 00000062  1C2A      MOV         R2,R5 ; adc_val
 00000064  ---- Variable 'adc_temp' assigned to Register 'R2' ----
  399: if(condition == 1)
 00000064  2801      CMP         R0,#0x1
 00000066  D10B      BNE         L_65  ; T=0x00000080
  401:  if( adc_val  > Ui_temp_set_val)
 00000068  4800      LDR         R0,=Ui_temp_set_val ; Ui_temp_set_val
 0000006A  6801      LDR         R1,[R0,#0x0] ; Ui_temp_set_val
 0000006C  1C28      MOV         R0,R5 ; adc_val
 0000006E  4288      CMP         R0,R1 ; adc_val
 00000070  D903      BLS         L_66  ; T=0x0000007A
  403:            Uc_temp_high = 1;
 00000072  2101      MOV         R1,#0x1
 00000074  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 00000076  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  404:    }
 00000078  E002      B           L_65  ; T=0x00000080
 0000007A          L_66:
  407:            Uc_temp_high = 0;
 0000007A  2100      MOV         R1,#0x0
 0000007C  4800      LDR         R0,=Uc_temp_high ; Uc_temp_high
 0000007E  7001      STRB        R1,[R0,#0x0] ; Uc_temp_high
  410: }
 00000080          L_65:
  414:  Uc_dec_arr[a]  = adc_temp/10000;   
 00000080  1C10      MOV         R0,R2 ; adc_temp
 00000082  4800      LDR         R3,=0x2710
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000088  FFBB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000008A  1C08      MOV         R0,R1
 0000008C  0600      LSL         R0,R0,#0x18
 0000008E  0E00      LSR         R0,R0,#0x18
 00000090  1C21      MOV         R1,R4 ; a
 00000092  060D      LSL         R5,R1,#0x18 ; a
 00000094  0E2D      LSR         R5,R5,#0x18
 00000096  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000098  5548      STRB        R0,[R1,R5]
  415:  Uc_dec_arr[a] += 0x30;
 0000009A  1C20      MOV         R0,R4 ; a
 0000009C  0601      LSL         R1,R0,#0x18 ; a
 0000009E  0E09      LSR         R1,R1,#0x18
 000000A0  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000A2  1840      ADD         R0,R1 ; Uc_dec_arr
 000000A4  7801      LDRB        R1,[R0,#0x0]
 000000A6  3130      ADD         R1,#0x30
 000000A8  7001      STRB        R1,[R0,#0x0]
  416:  adc_temp       = adc_temp%10000;
 000000AA  1C10      MOV         R0,R2 ; adc_temp
 000000AC  1C19      MOV         R1,R3
 000000AE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000B0  FFA7      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000B2  1C01      MOV         R1,R0
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 25  

 000000B4  1C0A      MOV         R2,R1 ; adc_temp
  417:  a++;
 000000B6  3401      ADD         R4,#0x1
 000000B8  0624      LSL         R4,R4,#0x18
 000000BA  0E24      LSR         R4,R4,#0x18
  419:  Uc_dec_arr[a]  = adc_temp/1000;    
 000000BC  1C10      MOV         R0,R2 ; adc_temp
 000000BE  4BFA      LDR         R3,=0x3E8
 000000C0  1C19      MOV         R1,R3
 000000C2  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000C4  FF9D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000C6  1C08      MOV         R0,R1
 000000C8  0600      LSL         R0,R0,#0x18
 000000CA  0E00      LSR         R0,R0,#0x18
 000000CC  1C21      MOV         R1,R4 ; a
 000000CE  060D      LSL         R5,R1,#0x18 ; a
 000000D0  0E2D      LSR         R5,R5,#0x18
 000000D2  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 000000D4  5548      STRB        R0,[R1,R5]
  420:  Uc_dec_arr[a] += 0x30;
 000000D6  1C20      MOV         R0,R4 ; a
 000000D8  0601      LSL         R1,R0,#0x18 ; a
 000000DA  0E09      LSR         R1,R1,#0x18
 000000DC  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 000000DE  1840      ADD         R0,R1 ; Uc_dec_arr
 000000E0  7801      LDRB        R1,[R0,#0x0]
 000000E2  3130      ADD         R1,#0x30
 000000E4  7001      STRB        R1,[R0,#0x0]
  421:  adc_temp       = adc_temp%1000;
 000000E6  1C10      MOV         R0,R2 ; adc_temp
 000000E8  1C19      MOV         R1,R3
 000000EA  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000EC  FF89      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000EE  1C01      MOV         R1,R0
 000000F0  1C0A      MOV         R2,R1 ; adc_temp
  422:  a++;
 000000F2  3401      ADD         R4,#0x1
 000000F4  0624      LSL         R4,R4,#0x18
 000000F6  0E24      LSR         R4,R4,#0x18
  424:  Uc_dec_arr[a]  = adc_temp/100;
 000000F8  1C10      MOV         R0,R2 ; adc_temp
 000000FA  2364      MOV         R3,#0x64
 000000FC  1C19      MOV         R1,R3
 000000FE  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000100  FF7F      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000102  1C08      MOV         R0,R1
 00000104  0600      LSL         R0,R0,#0x18
 00000106  0E00      LSR         R0,R0,#0x18
 00000108  1C21      MOV         R1,R4 ; a
 0000010A  060D      LSL         R5,R1,#0x18 ; a
 0000010C  0E2D      LSR         R5,R5,#0x18
 0000010E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000110  5548      STRB        R0,[R1,R5]
  425:  Uc_dec_arr[a] += 0x30;
 00000112  1C20      MOV         R0,R4 ; a
 00000114  0601      LSL         R1,R0,#0x18 ; a
 00000116  0E09      LSR         R1,R1,#0x18
 00000118  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 0000011A  1840      ADD         R0,R1 ; Uc_dec_arr
 0000011C  7801      LDRB        R1,[R0,#0x0]
 0000011E  3130      ADD         R1,#0x30
 00000120  7001      STRB        R1,[R0,#0x0]
  426:  adc_temp       = adc_temp%100;
 00000122  1C10      MOV         R0,R2 ; adc_temp
 00000124  1C19      MOV         R1,R3
 00000126  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
ARM COMPILER V2.50a,  app                                                                  22/01/13  14:11:15  PAGE 26  

 00000128  FF6B      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000012A  1C01      MOV         R1,R0
 0000012C  1C0A      MOV         R2,R1 ; adc_temp
  427:  a++;
 0000012E  3401      ADD         R4,#0x1
 00000130  0624      LSL         R4,R4,#0x18
 00000132  0E24      LSR         R4,R4,#0x18
  429:  Uc_dec_arr[a]  = adc_temp/10;
 00000134  1C10      MOV         R0,R2 ; adc_temp
 00000136  230A      MOV         R3,#0xA
 00000138  1C19      MOV         R1,R3
 0000013A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000013C  FF61      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000013E  1C08      MOV         R0,R1
 00000140  0600      LSL         R0,R0,#0x18
 00000142  0E00      LSR         R0,R0,#0x18
 00000144  1C21      MOV         R1,R4 ; a
 00000146  060D      LSL         R5,R1,#0x18 ; a
 00000148  0E2D      LSR         R5,R5,#0x18
 0000014A  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 0000014C  5548      STRB        R0,[R1,R5]
  430:  Uc_dec_arr[a] += 0x30;
 0000014E  1C20      MOV         R0,R4 ; a
 00000150  0601      LSL         R1,R0,#0x18 ; a
 00000152  0E09      LSR         R1,R1,#0x18
 00000154  4800      LDR         R0,=Uc_dec_arr ; Uc_dec_arr
 00000156  1840      ADD         R0,R1 ; Uc_dec_arr
 00000158  7801      LDRB        R1,[R0,#0x0]
 0000015A  3130      ADD         R1,#0x30
 0000015C  7001      STRB        R1,[R0,#0x0]
  431:  adc_temp       = adc_temp%10;
 0000015E  1C10      MOV         R0,R2 ; adc_temp
 00000160  1C19      MOV         R1,R3
 00000162  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000164  FF4D      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000166  1C01      MOV         R1,R0
 00000168  1C0A      MOV         R2,R1 ; adc_temp
  432:  a++;
 0000016A  3401      ADD         R4,#0x1
 0000016C  0624      LSL         R4,R4,#0x18
 0000016E  0E24      LSR         R4,R4,#0x18
  433:  Uc_dec_arr[a]  = adc_temp + 0x30;
 00000170  1C10      MOV         R0,R2 ; adc_temp
 00000172  3030      ADD         R0,#0x30
 00000174  0600      LSL         R0,R0,#0x18
 00000176  0E00      LSR         R0,R0,#0x18
 00000178  1C21      MOV         R1,R4 ; a
 0000017A  060A      LSL         R2,R1,#0x18 ; a
 0000017C  0E12      LSR         R2,R2,#0x18
 0000017E  4800      LDR         R1,=Uc_dec_arr ; Uc_dec_arr
 00000180  5488      STRB        R0,[R1,R2]
 00000182            ; SCOPE-END
  435: }
 00000182  BC70      POP         {R4-R6}
 00000184  BC08      POP         {R3}
 00000186  4718      BX          R3
 00000188          ENDP ; 'adc_val_conv?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =       669
  const size           =       170
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
