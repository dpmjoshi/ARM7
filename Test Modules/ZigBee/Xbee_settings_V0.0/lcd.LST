ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE lcd
OBJECT MODULE PLACED IN lcd.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe lcd.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          #include <stdio.h>
    3          
    4          #define radd 0x40005000
    5          
    6          void lcd_init();
    7          void delay();
    8          void datar();
    9          void comdr();
   10          void cursur_on();
   11          void cursur_off();
   12          void display();
   13          void clrscr();
   14          
   15          
   16          unsigned char k,data_ptr;
   17          int *p,*s;
   18          
   19          void lcd_init()
   20          {
   21   1         //comdr(0x30);
   22   1      
   23   1         comdr(0x38);  //2 line,5*7 matrix
   24   1         ms_delay(25);
   25   1         comdr(0x01); //clear display
   26   1         ms_delay(25);
   27   1         comdr(0x06); //automatic rt shift cursor
   28   1         ms_delay(25);
   29   1         comdr(0x0C); //display on cursor on
   30   1         ms_delay(25);
   31   1      }
   32          
   33          
   34          void datar(unsigned char data)
   35           {
   36   1         IO1CLR=0X00FF0000;
   37   1         IO1SET=data<<16;
   38   1         IO0SET=0X00000800;       //RS=1
   39   1         IO0SET=0X00000400;       //EN=1
   40   1         ms_delay(5);
   41   1         IO0CLR=0X00000400;       //EN=0
   42   1      
   43   1       }
   44               
   45           void comdr(unsigned char comd)
   46           {  
   47   1         IO1CLR=0X00FF0000;       
   48   1         IO1SET=comd<<16;
   49   1         IO0CLR=0X00000800;       //RS=0
   50   1         IO0SET=0X00000400;       //EN=1
   51   1         ms_delay(5);
   52   1         IO0CLR=0X00000400;        //EN=0
   53   1         
   54   1       }
   55          
   56          void cursur_on()
   57          {
   58   1          comdr(0x0F);    //display on cursor on
   59   1          ms_delay(25);
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 2   

   60   1      }
   61          
   62          void cursur_off()
   63          {
   64   1          comdr(0x0C);    //display on cursor on
   65   1          ms_delay(25);
   66   1      }
   67          
   68          
   69          
   70          void lcd_line1_disp(unsigned char *line1_data, unsigned char position)
   71          {
   72   1       unsigned char l;
   73   1       position += 0x80;
   74   1       comdr(position);
   75   1       ms_delay(15);
   76   1       for(l=0; *line1_data!='\0'; l++)
   77   1       {      
   78   2        datar(*line1_data);
   79   2        ms_delay(10);
   80   2        line1_data++;
   81   2       } 
   82   1      }
   83          
   84          
   85          
   86           void lcd_line2_disp(unsigned char *line2_data, unsigned char position)
   87          {
   88   1       unsigned char l;
   89   1       position += 0xc0;
   90   1       comdr(position);
   91   1       ms_delay(5);
   92   1       for(l=0; *line2_data!='\0'; l++)
   93   1       {      
   94   2        datar(*line2_data);
   95   2        ms_delay(1);
   96   2        line2_data++;
   97   2       } 
   98   1      }
   99          void lcd_line3_disp(unsigned char *line3_data, unsigned char position)
  100          {
  101   1       unsigned char l;
  102   1       position += 0x94;
  103   1       comdr(position);
  104   1       ms_delay(5);
  105   1       for(l=0; *line3_data!='\0'; l++)
  106   1       {      
  107   2        datar(*line3_data);
  108   2        ms_delay(1);
  109   2        line3_data++;
  110   2       } 
  111   1      }
  112          
  113          void lcd_line4_disp(unsigned char *line4_data, unsigned char position)
  114          {
  115   1       unsigned char l;
  116   1       position += 0xd4;
  117   1       comdr(position);
  118   1       ms_delay(5);
  119   1       for(l=0; *line4_data!='\0'; l++)
  120   1       {      
  121   2        datar(*line4_data);
  122   2        ms_delay(1);
  123   2        line4_data++;
  124   2       } 
  125   1      }
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 3   

  126          
  127           void lcd_line1_ch_disp(unsigned char line1_data, unsigned char position)
  128          {
  129   1       position += 0x80;
  130   1       comdr(position);
  131   1       ms_delay(5);
  132   1       datar(line1_data);
  133   1       ms_delay(1);
  134   1      }
  135          
  136          
  137           void lcd_line2_ch_disp(unsigned char line2_data, unsigned char position)
  138          {
  139   1       position += 0xc0;
  140   1       comdr(position);
  141   1       ms_delay(5);
  142   1       datar(line2_data);
  143   1       ms_delay(1);
  144   1      }
  145          
  146           void lcd_line3_ch_disp(unsigned char line3_data, unsigned char position)
  147          {
  148   1       position += 0x94;
  149   1       comdr(position);
  150   1       ms_delay(5);
  151   1       datar(line3_data);
  152   1       ms_delay(1);
  153   1      }
  154          
  155          void lcd_line4_ch_disp(unsigned char line4_data, unsigned char position)
  156          {
  157   1       position += 0xd4;
  158   1       comdr(position);
  159   1       ms_delay(5);
  160   1       datar(line4_data);
  161   1       ms_delay(1);
  162   1      }
  163          
  164          
  165          
  166          
  167          void lcd_scroll_disp(unsigned char *scroll_data,  unsigned char position)
  168          {
  169   1       unsigned char i, j, *d;
  170   1       
  171   1      
  172   1       position += 0x80;
  173   1       d = scroll_data;       
  174   1       comdr(position);
  175   1       for(j = 15; j>0 ; j--)
  176   1       {
  177   2        position = j + 0x80;
  178   2        comdr(position);
  179   2        ms_delay(5);
  180   2        for(i=0; *d!='\0'; i++)
  181   2        {
  182   3         datar(*d);
  183   3         ms_delay(1);
  184   3         d++;
  185   3        }
  186   2        d = scroll_data++;
  187   2        rtc_get_time();  //--------------
  188   2        lcd_line4_disp(&Uc_real_time[0],12); //------------------
  189   2        ms_delay(9000);
  190   2        clrscr();
  191   2       }
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 4   

  192   1      }
  193          
  194          
  195          
  196          
  197             
  198          void clrscr()
  199          {
  200   1        comdr(0x01); //clear display
  201   1        ms_delay(5);
  202   1      }  
  203          
  204          
  205          void display_dots()
  206          {
  207   1       U8 b,m;
  208   1        for(b=0;b<5;b++)
  209   1          {
  210   2          for(m=0;m<3;m++)
  211   2              {
  212   3                  comdr(0x8c+m);
  213   3                  datar('.');
  214   3                  ms_delay(1000);
  215   3              }
  216   2          for(m=0;m<3;m++)
  217   2              {
  218   3                  comdr(0x8e-m);
  219   3                  datar(' ');
  220   3                  ms_delay(9);
  221   3              }
  222   2          ms_delay(50);
  223   2          }
  224   1      }
  225          
  226          
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (rtc_get_time?T)
 EXTERN DATA (Uc_real_time)



*** PUBLICS:
 PUBLIC         lcd_init?T
 PUBLIC         clrscr?T
 PUBLIC         datar?T
 PUBLIC         comdr?T
 PUBLIC         cursur_on?T
 PUBLIC         cursur_off?T
 PUBLIC         lcd_line1_disp?T
 PUBLIC         lcd_line2_disp?T
 PUBLIC         lcd_line3_disp?T
 PUBLIC         lcd_line4_disp?T
 PUBLIC         lcd_line1_ch_disp?T
 PUBLIC         lcd_line2_ch_disp?T
 PUBLIC         lcd_line3_ch_disp?T
 PUBLIC         lcd_line4_ch_disp?T
 PUBLIC         lcd_scroll_disp?T
 PUBLIC         display_dots?T
 PUBLIC         k
 PUBLIC         data_ptr
 PUBLIC         p
 PUBLIC         s



*** DATA SEGMENT '?DT0?lcd':
 00000000          p:
 00000000            DS          4
 00000004          s:
 00000004            DS          4
 00000008          k:
 00000008            DS          1
 00000009          data_ptr:
 00000009            DS          1



*** CODE SEGMENT '?PR?lcd_init?T?lcd':
   19: void lcd_init()
 00000000  B500      PUSH        {LR}
   23:    comdr(0x38);  //2 line,5*7 matrix
 00000002  2038      MOV         R0,#0x38
 00000004  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000006  FFFC      BL          comdr?T  ; T=0x0001  (2)
   24:    ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   25:    comdr(0x01); //clear display
 0000000E  2001      MOV         R0,#0x1
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
   26:    ms_delay(25);
 00000014  2019      MOV         R0,#0x19
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
   27:    comdr(0x06); //automatic rt shift cursor
 0000001A  2006      MOV         R0,#0x6
 0000001C  F7FF      BL          comdr?T  ; T=0x0001  (1)
 0000001E  FFF0      BL          comdr?T  ; T=0x0001  (2)
   28:    ms_delay(25);
 00000020  2019      MOV         R0,#0x19
 00000022  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 6   

 00000024  FFED      BL          ms_delay?T  ; T=0x0001  (2)
   29:    comdr(0x0C); //display on cursor on
 00000026  200C      MOV         R0,#0xC
 00000028  F7FF      BL          comdr?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          comdr?T  ; T=0x0001  (2)
   30:    ms_delay(25);
 0000002C  2019      MOV         R0,#0x19
 0000002E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000030  FFE7      BL          ms_delay?T  ; T=0x0001  (2)
   31: }
 00000032  BC08      POP         {R3}
 00000034  4718      BX          R3
 00000036          ENDP ; 'lcd_init?T'


*** CODE SEGMENT '?PR?datar?T?lcd':
   34: void datar(unsigned char data)
 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; data
 00000004  ---- Variable 'data' assigned to Register 'R1' ----
   36:    IO1CLR=0X00FF0000;
 00000004  4800      LDR         R2,=0xFF0000
 00000006  4800      LDR         R0,=0xE002801C
 00000008  6002      STR         R2,[R0,#0x0]
   37:    IO1SET=data<<16;
 0000000A  1C08      MOV         R0,R1 ; data
 0000000C  0601      LSL         R1,R0,#0x18 ; data
 0000000E  0E09      LSR         R1,R1,#0x18
 00000010  0409      LSL         R1,R1,#0x10
 00000012  4800      LDR         R0,=0xE0028014
 00000014  6001      STR         R1,[R0,#0x0]
   38:    IO0SET=0X00000800;       //RS=1
 00000016  4800      LDR         R1,=0x800
 00000018  4800      LDR         R0,=0xE0028004
 0000001A  6001      STR         R1,[R0,#0x0]
   39:    IO0SET=0X00000400;       //EN=1
 0000001C  4800      LDR         R1,=0x400
 0000001E  4800      LDR         R0,=0xE0028004
 00000020  6001      STR         R1,[R0,#0x0]
   40:    ms_delay(5);
 00000022  2005      MOV         R0,#0x5
 00000024  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000026  FFEC      BL          ms_delay?T  ; T=0x0001  (2)
   41:    IO0CLR=0X00000400;       //EN=0
 00000028  4800      LDR         R1,=0x400
 0000002A  4800      LDR         R0,=0xE002800C
 0000002C  6001      STR         R1,[R0,#0x0]
   43:  }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'datar?T'


*** CODE SEGMENT '?PR?comdr?T?lcd':
   45:  void comdr(unsigned char comd)
 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; comd
 00000004  ---- Variable 'comd' assigned to Register 'R1' ----
   47:    IO1CLR=0X00FF0000;       
 00000004  4800      LDR         R2,=0xFF0000
 00000006  4800      LDR         R0,=0xE002801C
 00000008  6002      STR         R2,[R0,#0x0]
   48:    IO1SET=comd<<16;
 0000000A  1C08      MOV         R0,R1 ; comd
 0000000C  0601      LSL         R1,R0,#0x18 ; comd
 0000000E  0E09      LSR         R1,R1,#0x18
 00000010  0409      LSL         R1,R1,#0x10
 00000012  4800      LDR         R0,=0xE0028014
 00000014  6001      STR         R1,[R0,#0x0]
   49:    IO0CLR=0X00000800;       //RS=0
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 7   

 00000016  4800      LDR         R1,=0x800
 00000018  4800      LDR         R0,=0xE002800C
 0000001A  6001      STR         R1,[R0,#0x0]
   50:    IO0SET=0X00000400;       //EN=1
 0000001C  4800      LDR         R1,=0x400
 0000001E  4800      LDR         R0,=0xE0028004
 00000020  6001      STR         R1,[R0,#0x0]
   51:    ms_delay(5);
 00000022  2005      MOV         R0,#0x5
 00000024  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000026  FFEC      BL          ms_delay?T  ; T=0x0001  (2)
   52:    IO0CLR=0X00000400;        //EN=0
 00000028  4800      LDR         R1,=0x400
 0000002A  4800      LDR         R0,=0xE002800C
 0000002C  6001      STR         R1,[R0,#0x0]
   54:  }
 0000002E  BC08      POP         {R3}
 00000030  4718      BX          R3
 00000032          ENDP ; 'comdr?T'


*** CODE SEGMENT '?PR?cursur_on?T?lcd':
   56: void cursur_on()
 00000000  B500      PUSH        {LR}
   58:     comdr(0x0F);    //display on cursor on
 00000002  200F      MOV         R0,#0xF
 00000004  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000006  FFFC      BL          comdr?T  ; T=0x0001  (2)
   59:       ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   60: }
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'cursur_on?T'


*** CODE SEGMENT '?PR?cursur_off?T?lcd':
   62: void cursur_off()
 00000000  B500      PUSH        {LR}
   64:     comdr(0x0C);    //display on cursor on
 00000002  200C      MOV         R0,#0xC
 00000004  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000006  FFFC      BL          comdr?T  ; T=0x0001  (2)
   65:       ms_delay(25);
 00000008  2019      MOV         R0,#0x19
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
   66: }
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'cursur_off?T'


*** CODE SEGMENT '?PR?lcd_line1_disp?T?lcd':
   70: void lcd_line1_disp(unsigned char *line1_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line1_data
 00000004  ---- Variable 'line1_data' assigned to Register 'R5' ----
   71: {
 00000004            ; SCOPE-START
   73:  position += 0x80;
 00000004  3180      ADD         R1,#0x80
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
   74:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 8   

 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
   75:  ms_delay(15);
 00000014  200F      MOV         R0,#0xF
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
   76:  for(l=0; *line1_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_3  ; T=0x00000034
 0000001E          L_4:
   78:   datar(*line1_data);
 0000001E  1C28      MOV         R0,R5 ; line1_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line1_data
 00000022  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000024  FFED      BL          datar?T  ; T=0x0001  (2)
   79:   ms_delay(10);
 00000026  200A      MOV         R0,#0xA
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
   80:   line1_data++;
 0000002C  3501      ADD         R5,#0x1
   81:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_3:
 00000034  1C28      MOV         R0,R5 ; line1_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line1_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_4  ; T=0x0000001E
 0000003C            ; SCOPE-END
   82: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line1_disp?T'


*** CODE SEGMENT '?PR?lcd_line2_disp?T?lcd':
   86:  void lcd_line2_disp(unsigned char *line2_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line2_data
 00000004  ---- Variable 'line2_data' assigned to Register 'R5' ----
   87: {
 00000004            ; SCOPE-START
   89:  position += 0xc0;
 00000004  31C0      ADD         R1,#0xC0
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
   90:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
   91:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
   92:  for(l=0; *line2_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_8  ; T=0x00000034
 0000001E          L_9:
   94:   datar(*line2_data);
 0000001E  1C28      MOV         R0,R5 ; line2_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line2_data
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 9   

 00000022  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000024  FFED      BL          datar?T  ; T=0x0001  (2)
   95:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
   96:   line2_data++;
 0000002C  3501      ADD         R5,#0x1
   97:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_8:
 00000034  1C28      MOV         R0,R5 ; line2_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line2_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_9  ; T=0x0000001E
 0000003C            ; SCOPE-END
   98: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line2_disp?T'


*** CODE SEGMENT '?PR?lcd_line3_disp?T?lcd':
   99: void lcd_line3_disp(unsigned char *line3_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line3_data
 00000004  ---- Variable 'line3_data' assigned to Register 'R5' ----
  100: {
 00000004            ; SCOPE-START
  102:  position += 0x94;
 00000004  3194      ADD         R1,#0x94
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  103:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  104:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  105:  for(l=0; *line3_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_13  ; T=0x00000034
 0000001E          L_14:
  107:   datar(*line3_data);
 0000001E  1C28      MOV         R0,R5 ; line3_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line3_data
 00000022  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000024  FFED      BL          datar?T  ; T=0x0001  (2)
  108:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  109:   line3_data++;
 0000002C  3501      ADD         R5,#0x1
  110:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_13:
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 10  

 00000034  1C28      MOV         R0,R5 ; line3_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line3_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_14  ; T=0x0000001E
 0000003C            ; SCOPE-END
  111: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line3_disp?T'


*** CODE SEGMENT '?PR?lcd_line4_disp?T?lcd':
  113: void lcd_line4_disp(unsigned char *line4_data, unsigned char position)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C05      MOV         R5,R0 ; line4_data
 00000004  ---- Variable 'line4_data' assigned to Register 'R5' ----
  114: {
 00000004            ; SCOPE-START
  116:  position += 0xd4;
 00000004  31D4      ADD         R1,#0xD4
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  117:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  118:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  119:  for(l=0; *line4_data!='\0'; l++)
 0000001A  2400      MOV         R4,#0x0
 0000001C  ---- Variable 'l' assigned to Register 'R4' ----
 0000001C  E00A      B           L_18  ; T=0x00000034
 0000001E          L_19:
  121:   datar(*line4_data);
 0000001E  1C28      MOV         R0,R5 ; line4_data
 00000020  7800      LDRB        R0,[R0,#0x0] ; line4_data
 00000022  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000024  FFED      BL          datar?T  ; T=0x0001  (2)
  122:   ms_delay(1);
 00000026  2001      MOV         R0,#0x1
 00000028  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000002A  FFEA      BL          ms_delay?T  ; T=0x0001  (2)
  123:   line4_data++;
 0000002C  3501      ADD         R5,#0x1
  124:  } 
 0000002E  3401      ADD         R4,#0x1
 00000030  0624      LSL         R4,R4,#0x18
 00000032  0E24      LSR         R4,R4,#0x18
 00000034          L_18:
 00000034  1C28      MOV         R0,R5 ; line4_data
 00000036  7800      LDRB        R0,[R0,#0x0] ; line4_data
 00000038  2800      CMP         R0,#0x0
 0000003A  D1F0      BNE         L_19  ; T=0x0000001E
 0000003C            ; SCOPE-END
  125: }
 0000003C  BC30      POP         {R4-R5}
 0000003E  BC08      POP         {R3}
 00000040  4718      BX          R3
 00000042          ENDP ; 'lcd_line4_disp?T'


*** CODE SEGMENT '?PR?lcd_line1_ch_disp?T?lcd':
  127:  void lcd_line1_ch_disp(unsigned char line1_data, unsigned char position)
 00000000  B510      PUSH        {R4,LR}
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 11  

 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C04      MOV         R4,R0 ; line1_data
 00000004  ---- Variable 'line1_data' assigned to Register 'R4' ----
  129:  position += 0x80;
 00000004  3180      ADD         R1,#0x80
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  130:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  131:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  132:  datar(line1_data);
 0000001A  1C20      MOV         R0,R4 ; line1_data
 0000001C  0600      LSL         R0,R0,#0x18 ; line1_data
 0000001E  0E00      LSR         R0,R0,#0x18
 00000020  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000022  FFEE      BL          datar?T  ; T=0x0001  (2)
  133:  ms_delay(1);
 00000024  2001      MOV         R0,#0x1
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
  134: }
 0000002A  BC10      POP         {R4}
 0000002C  BC08      POP         {R3}
 0000002E  4718      BX          R3
 00000030          ENDP ; 'lcd_line1_ch_disp?T'


*** CODE SEGMENT '?PR?lcd_line2_ch_disp?T?lcd':
  137:  void lcd_line2_ch_disp(unsigned char line2_data, unsigned char position)
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C04      MOV         R4,R0 ; line2_data
 00000004  ---- Variable 'line2_data' assigned to Register 'R4' ----
  139:  position += 0xc0;
 00000004  31C0      ADD         R1,#0xC0
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  140:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  141:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  142:  datar(line2_data);
 0000001A  1C20      MOV         R0,R4 ; line2_data
 0000001C  0600      LSL         R0,R0,#0x18 ; line2_data
 0000001E  0E00      LSR         R0,R0,#0x18
 00000020  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000022  FFEE      BL          datar?T  ; T=0x0001  (2)
  143:  ms_delay(1);
 00000024  2001      MOV         R0,#0x1
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
  144: }
 0000002A  BC10      POP         {R4}
 0000002C  BC08      POP         {R3}
 0000002E  4718      BX          R3
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 12  

 00000030          ENDP ; 'lcd_line2_ch_disp?T'


*** CODE SEGMENT '?PR?lcd_line3_ch_disp?T?lcd':
  146:  void lcd_line3_ch_disp(unsigned char line3_data, unsigned char position)
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C04      MOV         R4,R0 ; line3_data
 00000004  ---- Variable 'line3_data' assigned to Register 'R4' ----
  148:  position += 0x94;
 00000004  3194      ADD         R1,#0x94
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  149:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  150:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  151:  datar(line3_data);
 0000001A  1C20      MOV         R0,R4 ; line3_data
 0000001C  0600      LSL         R0,R0,#0x18 ; line3_data
 0000001E  0E00      LSR         R0,R0,#0x18
 00000020  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000022  FFEE      BL          datar?T  ; T=0x0001  (2)
  152:  ms_delay(1);
 00000024  2001      MOV         R0,#0x1
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
  153: }
 0000002A  BC10      POP         {R4}
 0000002C  BC08      POP         {R3}
 0000002E  4718      BX          R3
 00000030          ENDP ; 'lcd_line3_ch_disp?T'


*** CODE SEGMENT '?PR?lcd_line4_ch_disp?T?lcd':
  155: void lcd_line4_ch_disp(unsigned char line4_data, unsigned char position)
 00000000  B510      PUSH        {R4,LR}
 00000002  ---- Variable 'position' assigned to Register 'R1' ----
 00000002  1C04      MOV         R4,R0 ; line4_data
 00000004  ---- Variable 'line4_data' assigned to Register 'R4' ----
  157:  position += 0xd4;
 00000004  31D4      ADD         R1,#0xD4
 00000006  0609      LSL         R1,R1,#0x18
 00000008  0E09      LSR         R1,R1,#0x18
  158:  comdr(position);
 0000000A  1C08      MOV         R0,R1 ; position
 0000000C  0600      LSL         R0,R0,#0x18 ; position
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000012  FFF6      BL          comdr?T  ; T=0x0001  (2)
  159:  ms_delay(5);
 00000014  2005      MOV         R0,#0x5
 00000016  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000018  FFF3      BL          ms_delay?T  ; T=0x0001  (2)
  160:  datar(line4_data);
 0000001A  1C20      MOV         R0,R4 ; line4_data
 0000001C  0600      LSL         R0,R0,#0x18 ; line4_data
 0000001E  0E00      LSR         R0,R0,#0x18
 00000020  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000022  FFEE      BL          datar?T  ; T=0x0001  (2)
  161:  ms_delay(1);
 00000024  2001      MOV         R0,#0x1
 00000026  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000028  FFEB      BL          ms_delay?T  ; T=0x0001  (2)
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 13  

  162: }
 0000002A  BC10      POP         {R4}
 0000002C  BC08      POP         {R3}
 0000002E  4718      BX          R3
 00000030          ENDP ; 'lcd_line4_ch_disp?T'


*** CODE SEGMENT '?PR?lcd_scroll_disp?T?lcd':
  167: void lcd_scroll_disp(unsigned char *scroll_data,  unsigned char position)
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  1C0F      MOV         R7,R1 ; position
 00000004  ---- Variable 'position' assigned to Register 'R7' ----
 00000004  1C06      MOV         R6,R0 ; scroll_data
 00000006  ---- Variable 'scroll_data' assigned to Register 'R6' ----
 00000006  B081      SUB         R13,#0x4
  168: {
 00000008            ; SCOPE-START
  172:  position += 0x80;
 00000008  3780      ADD         R7,#0x80
 0000000A  063F      LSL         R7,R7,#0x18
 0000000C  0E3F      LSR         R7,R7,#0x18
  173:  d = scroll_data;       
 0000000E  1C35      MOV         R5,R6 ; scroll_data
 00000010  ---- Variable 'd' assigned to Register 'R5' ----
  174:  comdr(position);
 00000010  1C38      MOV         R0,R7 ; position
 00000012  0600      LSL         R0,R0,#0x18 ; position
 00000014  0E00      LSR         R0,R0,#0x18
 00000016  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000018  FFF3      BL          comdr?T  ; T=0x0001  (2)
  175:  for(j = 15; j>0 ; j--)
 0000001A  240F      MOV         R4,#0xF
 0000001C  ---- Variable 'j' assigned to Register 'R4' ----
 0000001C  E031      B           L_23  ; T=0x00000082
 0000001E          L_24:
  177:   position = j + 0x80;
 0000001E  1C20      MOV         R0,R4 ; j
 00000020  0607      LSL         R7,R0,#0x18 ; j
 00000022  0E3F      LSR         R7,R7,#0x18
 00000024  3780      ADD         R7,#0x80
 00000026  063F      LSL         R7,R7,#0x18
 00000028  0E3F      LSR         R7,R7,#0x18
  178:   comdr(position);
 0000002A  1C38      MOV         R0,R7 ; position
 0000002C  0600      LSL         R0,R0,#0x18 ; position
 0000002E  0E00      LSR         R0,R0,#0x18
 00000030  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000032  FFE6      BL          comdr?T  ; T=0x0001  (2)
  179:   ms_delay(5);
 00000034  2005      MOV         R0,#0x5
 00000036  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000038  FFE3      BL          ms_delay?T  ; T=0x0001  (2)
  180:   for(i=0; *d!='\0'; i++)
 0000003A  2100      MOV         R1,#0x0
 0000003C  A800      ADD         R0,R13,#0x0
 0000003E  7001      STRB        R1,[R0,#0x0] ; i
 00000040  E00B      B           L_28  ; T=0x0000005A
 00000042          L_29:
  182:    datar(*d);
 00000042  1C28      MOV         R0,R5 ; d
 00000044  7800      LDRB        R0,[R0,#0x0] ; d
 00000046  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000048  FFDB      BL          datar?T  ; T=0x0001  (2)
  183:    ms_delay(1);
 0000004A  2001      MOV         R0,#0x1
 0000004C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          ms_delay?T  ; T=0x0001  (2)
  184:    d++;
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 14  

 00000050  3501      ADD         R5,#0x1
  185:   }
 00000052  A800      ADD         R0,R13,#0x0
 00000054  7801      LDRB        R1,[R0,#0x0] ; i
 00000056  3101      ADD         R1,#0x1
 00000058  7001      STRB        R1,[R0,#0x0] ; i
 0000005A          L_28:
 0000005A  1C28      MOV         R0,R5 ; d
 0000005C  7800      LDRB        R0,[R0,#0x0] ; d
 0000005E  2800      CMP         R0,#0x0
 00000060  D1EF      BNE         L_29  ; T=0x00000042
  186:   d = scroll_data++;
 00000062  1C35      MOV         R5,R6 ; scroll_data
 00000064  3601      ADD         R6,#0x1
  187:   rtc_get_time();  //--------------
 00000066  F7FF      BL          rtc_get_time?T  ; T=0x0001  (1)
 00000068  FFCB      BL          rtc_get_time?T  ; T=0x0001  (2)
  188:   lcd_line4_disp(&Uc_real_time[0],12); //------------------
 0000006A  4800      LDR         R0,=Uc_real_time ; Uc_real_time
 0000006C  210C      MOV         R1,#0xC
 0000006E  F7FF      BL          lcd_line4_disp?T  ; T=0x0001  (1)
 00000070  FFC7      BL          lcd_line4_disp?T  ; T=0x0001  (2)
  189:   ms_delay(9000);
 00000072  4800      LDR         R0,=0x2328
 00000074  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000076  FFC4      BL          ms_delay?T  ; T=0x0001  (2)
  190:   clrscr();
 00000078  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 0000007A  FFC2      BL          clrscr?T  ; T=0x0001  (2)
  191:  }
 0000007C  3C01      SUB         R4,#0x1
 0000007E  0624      LSL         R4,R4,#0x18
 00000080  0E24      LSR         R4,R4,#0x18
 00000082          L_23:
 00000082  1C20      MOV         R0,R4 ; j
 00000084  0600      LSL         R0,R0,#0x18 ; j
 00000086  0E00      LSR         R0,R0,#0x18
 00000088  2800      CMP         R0,#0x0
 0000008A  DCC8      BGT         L_24  ; T=0x0000001E
 0000008C            ; SCOPE-END
  192: }
 0000008C  B001      ADD         R13,#0x4
 0000008E  BCF0      POP         {R4-R7}
 00000090  BC08      POP         {R3}
 00000092  4718      BX          R3
 00000094          ENDP ; 'lcd_scroll_disp?T'


*** CODE SEGMENT '?PR?clrscr?T?lcd':
  198: void clrscr()
 00000000  B500      PUSH        {LR}
  200:   comdr(0x01); //clear display
 00000002  2001      MOV         R0,#0x1
 00000004  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000006  FFFC      BL          comdr?T  ; T=0x0001  (2)
  201:   ms_delay(5);
 00000008  2005      MOV         R0,#0x5
 0000000A  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000000C  FFF9      BL          ms_delay?T  ; T=0x0001  (2)
  202: }  
 0000000E  BC08      POP         {R3}
 00000010  4718      BX          R3
 00000012          ENDP ; 'clrscr?T'


*** CODE SEGMENT '?PR?display_dots?T?lcd':
  205: void display_dots()
 00000000  B530      PUSH        {R4-R5,LR}
  206: {
 00000002            ; SCOPE-START
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 15  

  208:   for(b=0;b<5;b++)
 00000002  2400      MOV         R4,#0x0
 00000004  ---- Variable 'b' assigned to Register 'R4' ----
 00000004  E032      B           L_33  ; T=0x0000006C
  210:     for(m=0;m<3;m++)
 00000006          L_40:
 00000006  2500      MOV         R5,#0x0
 00000008  ---- Variable 'm' assigned to Register 'R5' ----
 00000008  E00E      B           L_38  ; T=0x00000028
 0000000A          L_39:
  212:             comdr(0x8c+m);
 0000000A  1C28      MOV         R0,R5 ; m
 0000000C  0600      LSL         R0,R0,#0x18 ; m
 0000000E  0E00      LSR         R0,R0,#0x18
 00000010  308C      ADD         R0,#0x8C
 00000012  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000014  FFF5      BL          comdr?T  ; T=0x0001  (2)
  213:             datar('.');
 00000016  202E      MOV         R0,#0x2E
 00000018  F7FF      BL          datar?T  ; T=0x0001  (1)
 0000001A  FFF2      BL          datar?T  ; T=0x0001  (2)
  214:             ms_delay(1000);
 0000001C  48FA      LDR         R0,=0x3E8
 0000001E  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000020  FFEF      BL          ms_delay?T  ; T=0x0001  (2)
  215:         }
 00000022  3501      ADD         R5,#0x1
 00000024  062D      LSL         R5,R5,#0x18
 00000026  0E2D      LSR         R5,R5,#0x18
 00000028          L_38:
 00000028  1C28      MOV         R0,R5 ; m
 0000002A  0600      LSL         R0,R0,#0x18 ; m
 0000002C  0E00      LSR         R0,R0,#0x18
 0000002E  2803      CMP         R0,#0x3
 00000030  DBEB      BLT         L_39  ; T=0x0000000A
  216:     for(m=0;m<3;m++)
 00000032  2500      MOV         R5,#0x0
 00000034  E00F      B           L_43  ; T=0x00000056
 00000036          L_44:
  218:             comdr(0x8e-m);
 00000036  1C28      MOV         R0,R5 ; m
 00000038  0601      LSL         R1,R0,#0x18 ; m
 0000003A  0E09      LSR         R1,R1,#0x18
 0000003C  208E      MOV         R0,#0x8E
 0000003E  1A40      SUB         R0,R1
 00000040  F7FF      BL          comdr?T  ; T=0x0001  (1)
 00000042  FFDE      BL          comdr?T  ; T=0x0001  (2)
  219:             datar(' ');
 00000044  2020      MOV         R0,#0x20
 00000046  F7FF      BL          datar?T  ; T=0x0001  (1)
 00000048  FFDB      BL          datar?T  ; T=0x0001  (2)
  220:             ms_delay(9);
 0000004A  2009      MOV         R0,#0x9
 0000004C  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 0000004E  FFD8      BL          ms_delay?T  ; T=0x0001  (2)
  221:         }
 00000050  3501      ADD         R5,#0x1
 00000052  062D      LSL         R5,R5,#0x18
 00000054  0E2D      LSR         R5,R5,#0x18
 00000056          L_43:
 00000056  1C28      MOV         R0,R5 ; m
 00000058  0600      LSL         R0,R0,#0x18 ; m
 0000005A  0E00      LSR         R0,R0,#0x18
 0000005C  2803      CMP         R0,#0x3
 0000005E  DBEA      BLT         L_44  ; T=0x00000036
  222:     ms_delay(50);
ARM COMPILER V2.50a,  lcd                                                                  16/01/13  17:05:48  PAGE 16  

 00000060  2032      MOV         R0,#0x32
 00000062  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000064  FFCD      BL          ms_delay?T  ; T=0x0001  (2)
  223:     }
 00000066  3401      ADD         R4,#0x1
 00000068  0624      LSL         R4,R4,#0x18
 0000006A  0E24      LSR         R4,R4,#0x18
 0000006C          L_33:
 0000006C  1C20      MOV         R0,R4 ; b
 0000006E  0600      LSL         R0,R0,#0x18 ; b
 00000070  0E00      LSR         R0,R0,#0x18
 00000072  2805      CMP         R0,#0x5
 00000074  DBC7      BLT         L_40  ; T=0x00000006
 00000076            ; SCOPE-END
  224: }
 00000076  BC30      POP         {R4-R5}
 00000078  BC08      POP         {R3}
 0000007A  4718      BX          R3
 0000007C          ENDP ; 'display_dots?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        10
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
