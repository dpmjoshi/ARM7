ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE lib
OBJECT MODULE PLACED IN lib.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe lib.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          
    3          void hex_dec(U8 *dec_arr, U8 hex_val)
    4          {
    5   1       *dec_arr  = hex_val/10;
    6   1       *dec_arr += 0x30;
    7   1       hex_val     = hex_val%10;
    8   1       dec_arr++;
    9   1       *dec_arr  = hex_val + 0x30;
   10   1      }
   11          
   12          
   13          void hex_dec1(U8 *dec_arr, U32 hex_val)
   14          {
   15   1       *dec_arr  = hex_val/1000;
   16   1       *dec_arr += 0x30;
   17   1       hex_val     = hex_val%1000;
   18   1       dec_arr++;
   19   1       *dec_arr  = hex_val/100;
   20   1       *dec_arr += 0x30;
   21   1       hex_val     = hex_val%100;
   22   1       dec_arr++;
   23   1       *dec_arr  = hex_val/10;
   24   1       *dec_arr += 0x30;
   25   1       hex_val     = hex_val%10;
   26   1       dec_arr++;
   27   1       *dec_arr  = hex_val + 0x30;
   28   1      }
   29          
   30          
   31          U32 LIB_ascii_hex(U8 *ascii_arr)
   32          {
   33   1       U8  uc_cnt = 0;
   34   1       U8  uc_str_cnt;
   35   1       U32 ui_mul_fctr = 0;
   36   1       U32 ui_hex_val  = 0;
   37   1      
   38   1       for(uc_str_cnt = 0; *ascii_arr != '\0'; uc_str_cnt++);
   39   1      
   40   1       for(uc_cnt = 0; uc_cnt <= uc_str_cnt; uc_cnt++)
   41   1       {
   42   2        ui_mul_fctr *= 10;
   43   2       }
   44   1       
   45   1       for(uc_cnt = 0; *ascii_arr != '\0'; uc_cnt++)
   46   1       {
   47   2        ui_hex_val += (*ascii_arr * ui_mul_fctr);
   48   2        ascii_arr++;
   49   2        ui_mul_fctr /= 10; 
   50   2       }
   51   1       return ui_hex_val;
   52   1      
   53   1      }
   54          
   55          
   56          void str_copy(U8 *str_input, U8 *str_output)
   57          {
   58   1       U8 uc_cnt = 0;
   59   1      
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 2   

   60   1       for(uc_cnt = 0; *str_input != '\0'; uc_cnt++)
   61   1       {
   62   2        *str_output = *str_input;
   63   2        str_output++;
   64   2        str_input++; 
   65   2       }
   66   1      }
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 3   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (?C?UDIV?T)
 EXTERN CODE16 (?C?SDIV?T)



*** PUBLICS:
 PUBLIC         hex_dec?T
 PUBLIC         hex_dec1?T
 PUBLIC         LIB_ascii_hex?T
 PUBLIC         str_copy?T



*** CODE SEGMENT '?PR?hex_dec?T?lib':
    3: void hex_dec(U8 *dec_arr, U8 hex_val)
 00000000  B500      PUSH        {LR}
 00000002  1C0B      MOV         R3,R1 ; hex_val
 00000004  ---- Variable 'hex_val' assigned to Register 'R3' ----
 00000004  1C02      MOV         R2,R0 ; dec_arr
 00000006  ---- Variable 'dec_arr' assigned to Register 'R2' ----
    5:  *dec_arr  = hex_val/10;
 00000006  1C18      MOV         R0,R3 ; hex_val
 00000008  0600      LSL         R0,R0,#0x18 ; hex_val
 0000000A  0E00      LSR         R0,R0,#0x18
 0000000C  210A      MOV         R1,#0xA
 0000000E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000010  FFF7      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000012  1C08      MOV         R0,R1
 00000014  0601      LSL         R1,R0,#0x18
 00000016  0E09      LSR         R1,R1,#0x18
 00000018  1C10      MOV         R0,R2 ; dec_arr
 0000001A  7001      STRB        R1,[R0,#0x0] ; dec_arr
    6:  *dec_arr += 0x30;
 0000001C  1C10      MOV         R0,R2 ; dec_arr
 0000001E  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000020  3130      ADD         R1,#0x30
 00000022  1C10      MOV         R0,R2 ; dec_arr
 00000024  7001      STRB        R1,[R0,#0x0] ; dec_arr
    7:  hex_val     = hex_val%10;
 00000026  1C18      MOV         R0,R3 ; hex_val
 00000028  0600      LSL         R0,R0,#0x18 ; hex_val
 0000002A  0E00      LSR         R0,R0,#0x18
 0000002C  210A      MOV         R1,#0xA
 0000002E  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000030  FFE7      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000032  1C01      MOV         R1,R0
 00000034  060B      LSL         R3,R1,#0x18
 00000036  0E1B      LSR         R3,R3,#0x18
    8:  dec_arr++;
 00000038  3201      ADD         R2,#0x1
    9:  *dec_arr  = hex_val + 0x30;
 0000003A  1C18      MOV         R0,R3 ; hex_val
 0000003C  0601      LSL         R1,R0,#0x18 ; hex_val
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  3130      ADD         R1,#0x30
 00000042  0609      LSL         R1,R1,#0x18
 00000044  0E09      LSR         R1,R1,#0x18
 00000046  1C10      MOV         R0,R2 ; dec_arr
 00000048  7001      STRB        R1,[R0,#0x0] ; dec_arr
   10: }
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'hex_dec?T'


*** CODE SEGMENT '?PR?hex_dec1?T?lib':
   13: void hex_dec1(U8 *dec_arr, U32 hex_val)
 00000000  B500      PUSH        {LR}
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 4   

 00000002  1C0B      MOV         R3,R1 ; hex_val
 00000004  ---- Variable 'hex_val' assigned to Register 'R3' ----
 00000004  1C02      MOV         R2,R0 ; dec_arr
 00000006  ---- Variable 'dec_arr' assigned to Register 'R2' ----
   15:  *dec_arr  = hex_val/1000;
 00000006  1C18      MOV         R0,R3 ; hex_val
 00000008  49FA      LDR         R1,=0x3E8
 0000000A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000000C  FFF9      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000000E  1C08      MOV         R0,R1
 00000010  0601      LSL         R1,R0,#0x18
 00000012  0E09      LSR         R1,R1,#0x18
 00000014  1C10      MOV         R0,R2 ; dec_arr
 00000016  7001      STRB        R1,[R0,#0x0] ; dec_arr
   16:  *dec_arr += 0x30;
 00000018  1C10      MOV         R0,R2 ; dec_arr
 0000001A  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 0000001C  3130      ADD         R1,#0x30
 0000001E  1C10      MOV         R0,R2 ; dec_arr
 00000020  7001      STRB        R1,[R0,#0x0] ; dec_arr
   17:  hex_val     = hex_val%1000;
 00000022  1C18      MOV         R0,R3 ; hex_val
 00000024  49FA      LDR         R1,=0x3E8
 00000026  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000028  FFEB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000002A  1C01      MOV         R1,R0
 0000002C  1C0B      MOV         R3,R1 ; hex_val
   18:  dec_arr++;
 0000002E  3201      ADD         R2,#0x1
   19:  *dec_arr  = hex_val/100;
 00000030  1C18      MOV         R0,R3 ; hex_val
 00000032  2164      MOV         R1,#0x64
 00000034  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000036  FFE4      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000038  1C08      MOV         R0,R1
 0000003A  0601      LSL         R1,R0,#0x18
 0000003C  0E09      LSR         R1,R1,#0x18
 0000003E  1C10      MOV         R0,R2 ; dec_arr
 00000040  7001      STRB        R1,[R0,#0x0] ; dec_arr
   20:  *dec_arr += 0x30;
 00000042  1C10      MOV         R0,R2 ; dec_arr
 00000044  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000046  3130      ADD         R1,#0x30
 00000048  1C10      MOV         R0,R2 ; dec_arr
 0000004A  7001      STRB        R1,[R0,#0x0] ; dec_arr
   21:  hex_val     = hex_val%100;
 0000004C  1C18      MOV         R0,R3 ; hex_val
 0000004E  2164      MOV         R1,#0x64
 00000050  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000052  FFD6      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000054  1C01      MOV         R1,R0
 00000056  1C0B      MOV         R3,R1 ; hex_val
   22:  dec_arr++;
 00000058  3201      ADD         R2,#0x1
   23:  *dec_arr  = hex_val/10;
 0000005A  1C18      MOV         R0,R3 ; hex_val
 0000005C  210A      MOV         R1,#0xA
 0000005E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000060  FFCF      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000062  1C08      MOV         R0,R1
 00000064  0601      LSL         R1,R0,#0x18
 00000066  0E09      LSR         R1,R1,#0x18
 00000068  1C10      MOV         R0,R2 ; dec_arr
 0000006A  7001      STRB        R1,[R0,#0x0] ; dec_arr
   24:  *dec_arr += 0x30;
 0000006C  1C10      MOV         R0,R2 ; dec_arr
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 5   

 0000006E  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000070  3130      ADD         R1,#0x30
 00000072  1C10      MOV         R0,R2 ; dec_arr
 00000074  7001      STRB        R1,[R0,#0x0] ; dec_arr
   25:  hex_val     = hex_val%10;
 00000076  1C18      MOV         R0,R3 ; hex_val
 00000078  210A      MOV         R1,#0xA
 0000007A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000007C  FFC1      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000007E  1C01      MOV         R1,R0
 00000080  1C0B      MOV         R3,R1 ; hex_val
   26:  dec_arr++;
 00000082  3201      ADD         R2,#0x1
   27:  *dec_arr  = hex_val + 0x30;
 00000084  1C19      MOV         R1,R3 ; hex_val
 00000086  3130      ADD         R1,#0x30
 00000088  0609      LSL         R1,R1,#0x18
 0000008A  0E09      LSR         R1,R1,#0x18
 0000008C  1C10      MOV         R0,R2 ; dec_arr
 0000008E  7001      STRB        R1,[R0,#0x0] ; dec_arr
   28: }
 00000090  BC08      POP         {R3}
 00000092  4718      BX          R3
 00000094          ENDP ; 'hex_dec1?T'


*** CODE SEGMENT '?PR?LIB_ascii_hex?T?lib':
   31: U32 LIB_ascii_hex(U8 *ascii_arr)
 00000000  B570      PUSH        {R4-R6,LR}
 00000002  1C05      MOV         R5,R0 ; ascii_arr
 00000004  ---- Variable 'ascii_arr' assigned to Register 'R5' ----
   32: {
 00000004            ; SCOPE-START
   33:  U8  uc_cnt = 0;
 00000004  2600      MOV         R6,#0x0
 00000006  1C34      MOV         R4,R6 ; uc_cnt
 00000008  ---- Variable 'uc_cnt' assigned to Register 'R4' ----
   35:  U32 ui_mul_fctr = 0;
 00000008  2200      MOV         R2,#0x0
 0000000A  1C13      MOV         R3,R2 ; ui_mul_fctr
 0000000C  ---- Variable 'ui_mul_fctr' assigned to Register 'R3' ----
   36:  U32 ui_hex_val  = 0;
 0000000C  ---- Variable 'ui_hex_val' assigned to Register 'R2' ----
   38:  for(uc_str_cnt = 0; *ascii_arr != '\0'; uc_str_cnt++);
 0000000C  1C31      MOV         R1,R6 ; uc_str_cnt
 0000000E  ---- Variable 'uc_str_cnt' assigned to Register 'R1' ----
 0000000E  E002      B           L_3  ; T=0x00000016
 00000010          L_1:
 00000010  3101      ADD         R1,#0x1
 00000012  0609      LSL         R1,R1,#0x18
 00000014  0E09      LSR         R1,R1,#0x18
 00000016          L_3:
 00000016  1C28      MOV         R0,R5 ; ascii_arr
 00000018  7800      LDRB        R0,[R0,#0x0] ; ascii_arr
 0000001A  2800      CMP         R0,#0x0
 0000001C  D1F8      BNE         L_1  ; T=0x00000010
   40:  for(uc_cnt = 0; uc_cnt <= uc_str_cnt; uc_cnt++)
 0000001E  1C34      MOV         R4,R6 ; uc_cnt
 00000020  E004      B           L_8  ; T=0x0000002C
 00000022          L_9:
   42:   ui_mul_fctr *= 10;
 00000022  200A      MOV         R0,#0xA
 00000024  4343      MUL         R3,R0
   43:  }
 00000026  3401      ADD         R4,#0x1
 00000028  0624      LSL         R4,R4,#0x18
 0000002A  0E24      LSR         R4,R4,#0x18
 0000002C          L_8:
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 6   

 0000002C  1C08      MOV         R0,R1 ; uc_str_cnt
 0000002E  0606      LSL         R6,R0,#0x18 ; uc_str_cnt
 00000030  0E36      LSR         R6,R6,#0x18
 00000032  1C20      MOV         R0,R4 ; uc_cnt
 00000034  0600      LSL         R0,R0,#0x18 ; uc_cnt
 00000036  0E00      LSR         R0,R0,#0x18
 00000038  42B0      CMP         R0,R6
 0000003A  D9F2      BLS         L_9  ; T=0x00000022
   45:  for(uc_cnt = 0; *ascii_arr != '\0'; uc_cnt++)
 0000003C  2400      MOV         R4,#0x0
 0000003E  E00E      B           L_13  ; T=0x0000005E
 00000040          L_14:
   47:   ui_hex_val += (*ascii_arr * ui_mul_fctr);
 00000040  1C28      MOV         R0,R5 ; ascii_arr
 00000042  7800      LDRB        R0,[R0,#0x0] ; ascii_arr
 00000044  1C19      MOV         R1,R3 ; ui_mul_fctr
 00000046  4348      MUL         R0,R1 ; ui_mul_fctr
 00000048  1812      ADD         R2,R0 ; ui_hex_val
   48:   ascii_arr++;
 0000004A  3501      ADD         R5,#0x1
   49:   ui_mul_fctr /= 10; 
 0000004C  1C18      MOV         R0,R3 ; ui_mul_fctr
 0000004E  210A      MOV         R1,#0xA
 00000050  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000052  FFD6      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000054  1C08      MOV         R0,R1
 00000056  1C03      MOV         R3,R0 ; ui_mul_fctr
   50:  }
 00000058  3401      ADD         R4,#0x1
 0000005A  0624      LSL         R4,R4,#0x18
 0000005C  0E24      LSR         R4,R4,#0x18
 0000005E          L_13:
 0000005E  1C28      MOV         R0,R5 ; ascii_arr
 00000060  7800      LDRB        R0,[R0,#0x0] ; ascii_arr
 00000062  2800      CMP         R0,#0x0
 00000064  D1EC      BNE         L_14  ; T=0x00000040
   51:  return ui_hex_val;
 00000066  1C10      MOV         R0,R2 ; ui_hex_val
 00000068            ; SCOPE-END
   53: }
 00000068  BC70      POP         {R4-R6}
 0000006A  BC08      POP         {R3}
 0000006C  4718      BX          R3
 0000006E          ENDP ; 'LIB_ascii_hex?T'


*** CODE SEGMENT '?PR?str_copy?T?lib':
   56: void str_copy(U8 *str_input, U8 *str_output)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'str_output' assigned to Register 'R1' ----
 00000002  ---- Variable 'str_input' assigned to Register 'R0' ----
   57: {
 00000002            ; SCOPE-START
   58:  U8 uc_cnt = 0;
 00000002  2300      MOV         R3,#0x0
 00000004  1C1A      MOV         R2,R3 ; uc_cnt
 00000006  ---- Variable 'uc_cnt' assigned to Register 'R2' ----
   60:  for(uc_cnt = 0; *str_input != '\0'; uc_cnt++)
 00000006  1C1A      MOV         R2,R3 ; uc_cnt
 00000008  E008      B           L_19  ; T=0x0000001C
 0000000A          L_20:
   62:   *str_output = *str_input;
 0000000A  1C03      MOV         R3,R0 ; str_input
 0000000C  781C      LDRB        R4,[R3,#0x0] ; str_input
 0000000E  1C0B      MOV         R3,R1 ; str_output
 00000010  701C      STRB        R4,[R3,#0x0] ; str_output
   63:   str_output++;
 00000012  3101      ADD         R1,#0x1
ARM COMPILER V2.50a,  lib                                                                  03/01/13  17:10:56  PAGE 7   

   64:   str_input++; 
 00000014  3001      ADD         R0,#0x1
   65:  }
 00000016  3201      ADD         R2,#0x1
 00000018  0612      LSL         R2,R2,#0x18
 0000001A  0E12      LSR         R2,R2,#0x18
 0000001C          L_19:
 0000001C  1C03      MOV         R3,R0 ; str_input
 0000001E  781B      LDRB        R3,[R3,#0x0] ; str_input
 00000020  2B00      CMP         R3,#0x0
 00000022  D1F2      BNE         L_20  ; T=0x0000000A
 00000024            ; SCOPE-END
   66: }
 00000024  BC10      POP         {R4}
 00000026  4770      BX          R14
 00000028          ENDP ; 'str_copy?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
