ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE rtc
OBJECT MODULE PLACED IN rtc.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe rtc.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include"includes.h"
    2          
    3          void rtc_init();
    4          void rtc_init_interrupt();
    5          void rtc_ISR()__irq;
    6          void rtc_get_time();
    7          
    8          
    9          U8  Uc_real_time[9]  = {"00:00:00"};
   10          U8  Uc_date[11]      = {"00/00/0000"};
   11          U16 Uc_time_sec;
   12          U8  Uc_alrm = 0;
   13          
   14          void rtc_init()
   15          {
   16   1          SEC     = 0;
   17   1          MIN     = 02;
   18   1          HOUR    = 11;
   19   1      
   20   1          DOM     = 28;
   21   1          MONTH   = 02;
   22   1          YEAR    = 2012;
   23   1      
   24   1          CCR     = 0x11;
   25   1      }
   26          
   27          
   28          void rtc_init_interrupt()
   29          {
   30   1          VICVectAddr4 = (U32)&rtc_ISR;
   31   1          VICVectCntl4 = 0x20 | 13;
   32   1          VICIntEnable = 1 << 13;
   33   1      
   34   1      /*  
   35   1          SEC     = 0;
   36   1          MIN     = 53;
   37   1          HOUR    = 15;
   38   1      
   39   1          DOM     = 2;
   40   1          MONTH   = 03;
   41   1          YEAR    = 2012;
   42   1      */  
   43   1          AMR     = 0xF8;
   44   1          CIIR    = 0x01;
   45   1          CCR     = 0x11;
   46   1      }
   47          
   48          //*******************************************************//
   49          //*******************************************************//
   50          
   51          void rtc_ISR()__irq
   52          {
   53   1          if(ILR & 0x01)
   54   1           {
   55   2              Uc_time_sec++;
   56   2              if((Uc_user_dwn_hr + Uc_user_dwn_min + Uc_user_dwn_sec) != 0)
   57   2              Uc_user_dwn_sec -= 1;
   58   2              ILR = 1;
   59   2          
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 2   

   60   2           }
   61   1          if(ILR & 0x02)
   62   1           {
   63   2              Uc_alrm = 1;
   64   2              ILR = 2;
   65   2          
   66   2           }
   67   1      
   68   1          VICVectAddr   = 0x00;
   69   1      }
   70          //*******************************************************//
   71          //*******************************************************//
   72          void set_alarm(U8 alarm_hr, U8 alarm_min, U8 alarm_sec)
   73          {
   74   1          alarm_sec = alarm_sec + SEC;
   75   1          if(alarm_sec > 59)
   76   1          {
   77   2              ALSEC      = alarm_sec - 59;
   78   2              alarm_min += 1;
   79   2          }
   80   1          else
   81   1          {
   82   2              ALSEC = alarm_sec;
   83   2          }
   84   1      
   85   1          alarm_min = alarm_min + MIN;
   86   1          if(alarm_min > 59)
   87   1          {
   88   2              ALMIN      = alarm_min - 59;
   89   2              alarm_hr  += 1;
   90   2          }
   91   1          else
   92   1          {
   93   2              ALMIN      = alarm_min;
   94   2          }
   95   1      
   96   1          alarm_hr = alarm_hr + HOUR;
   97   1          if(alarm_hr > 23)
   98   1          {
   99   2              ALHOUR      = alarm_hr - 23;
  100   2          }
  101   1          else
  102   1          {
  103   2              ALHOUR      = alarm_hr;
  104   2          }
  105   1      }
  106          
  107          
  108          //**********************************************************//
  109          
  110          void rtc_get_time()
  111          {
  112   1          U16 us_temp_y, us_temp_yr;
  113   1          U8 uc_temp;
  114   1      
  115   1          us_temp_y  = YEAR;
  116   1          us_temp_y  = us_temp_y / 1000;
  117   1          Uc_date[6] = us_temp_y + 0x30;
  118   1          us_temp_y  = YEAR;
  119   1          
  120   1          us_temp_y  = us_temp_y % 1000;
  121   1          us_temp_yr = us_temp_y;
  122   1      
  123   1          us_temp_y  = us_temp_y / 100;
  124   1          Uc_date[7] = us_temp_y + 0x30;
  125   1      
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 3   

  126   1          us_temp_y  = us_temp_yr;
  127   1          us_temp_y  = us_temp_y % 100;
  128   1          us_temp_yr = us_temp_y;
  129   1                  
  130   1          us_temp_y  = us_temp_y / 10;
  131   1          Uc_date[8] = us_temp_y + 0x30;
  132   1      
  133   1          us_temp_y  = us_temp_yr;
  134   1          us_temp_y  = us_temp_y % 10;
  135   1          Uc_date[9] = us_temp_y + 0x30;
  136   1      
  137   1      
  138   1          uc_temp    = MONTH;
  139   1          uc_temp    = uc_temp / 10;
  140   1          Uc_date[3] = uc_temp + 0x30;
  141   1      
  142   1          uc_temp    = MONTH;
  143   1          uc_temp    = uc_temp % 10;      
  144   1          Uc_date[4] = uc_temp + 0x30;
  145   1      
  146   1      
  147   1          uc_temp    = DOM;
  148   1          uc_temp    = uc_temp / 10;
  149   1          Uc_date[0] = uc_temp + 0x30;
  150   1      
  151   1          uc_temp    = DOM;
  152   1          uc_temp    = uc_temp % 10;      
  153   1          Uc_date[1] = uc_temp + 0x30;
  154   1      //********************************************************************************************
  155   1          
  156   1          uc_temp    = SEC;
  157   1          uc_temp    = uc_temp / 10;
  158   1          Uc_real_time[6] = uc_temp + 0x30;
  159   1      
  160   1          uc_temp    = SEC;
  161   1          uc_temp    = uc_temp % 10;      
  162   1          Uc_real_time[7] = uc_temp + 0x30;
  163   1      
  164   1      
  165   1          uc_temp    = MIN;
  166   1          uc_temp    = uc_temp / 10;
  167   1          Uc_real_time[3] = uc_temp + 0x30;
  168   1      
  169   1          uc_temp    = MIN;
  170   1          uc_temp    = uc_temp % 10;      
  171   1          Uc_real_time[4] = uc_temp +0x30;
  172   1      
  173   1      
  174   1          uc_temp    = HOUR;
  175   1          uc_temp    = uc_temp / 10;
  176   1          Uc_real_time[0] = uc_temp +0x30;
  177   1      
  178   1          uc_temp    = HOUR;
  179   1          uc_temp    = uc_temp % 10;      
  180   1          Uc_real_time[1] = uc_temp +0x30;
  181   1      
  182   1      
  183   1      }
  184          
  185          void rtc_change_time()
  186          {
  187   1          U8 uc_rtc_change_count = 0;
  188   1          U8 uc_rtc_hr  = 0;
  189   1          U8 uc_rtc_min = 0;
  190   1          U8 uc_rtc_sec = 0;
  191   1      
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 4   

  192   1          U8 Uc_rtc_change_time[9] = {"00:00:00"};
  193   1          
  194   1          clrscr();
  195   1          ms_delay(20);
  196   1          lcd_line1_disp("Clock",8);
  197   1          ms_delay(10);
  198   1          lcd_line2_disp("Time",2);
  199   1          while(uc_rtc_change_count < 8)
  200   1          {
  201   2              Uc_key_temp = get_key(1);
  202   2              if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
  203   2              {
  204   3                  if(uc_rtc_change_count == 0)
  205   3                  {
  206   4                      if(Uc_key_temp < '3')
  207   4                      {
  208   5                          Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  209   5                          uc_rtc_change_count += 1;
  210   5                      }
  211   4                  }
  212   3                  else if(uc_rtc_change_count == 1)
  213   3                  {
  214   4                      if((Uc_rtc_change_time[0] - 0x30) == 2)
  215   4                      {
  216   5                          if(Uc_key_temp < '4')
  217   5                          {
  218   6                              Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  219   6                              uc_rtc_change_count += 2;
  220   6                          }
  221   5                      }
  222   4                      else
  223   4                      {
  224   5                              Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  225   5                              uc_rtc_change_count += 2;
  226   5                      }
  227   4      
  228   4                  }
  229   3                  else if(uc_rtc_change_count == 3)
  230   3                  {
  231   4                      if(Uc_key_temp < '6')
  232   4                      {
  233   5                          Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  234   5                          uc_rtc_change_count += 1;
  235   5                      }
  236   4                  }
  237   3                  else if(uc_rtc_change_count == 4)
  238   3                  {
  239   4                      Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  240   4                      uc_rtc_change_count += 2;
  241   4                  
  242   4                  }
  243   3                  else if(uc_rtc_change_count == 6)
  244   3                  {
  245   4                      if(Uc_key_temp < '6')
  246   4                      {
  247   5                          Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  248   5                          uc_rtc_change_count += 1;
  249   5                      }
  250   4                  }
  251   3                  else if(uc_rtc_change_count == 7)
  252   3                  {
  253   4                      if(Uc_key_temp < 'A')
  254   4                      {
  255   5                          Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
  256   5                          uc_rtc_change_count += 1;
  257   5                      }
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 5   

  258   4                  }
  259   3      
  260   3              }
  261   2              key_delay(250);
  262   2              lcd_line3_disp(&Uc_rtc_change_time[0],0);
  263   2      
  264   2          }
  265   1          uc_rtc_hr    = (Uc_rtc_change_time[0] - 0x30)* 10;
  266   1          uc_rtc_hr   += (Uc_rtc_change_time[1] - 0x30);
  267   1          uc_rtc_min   = (Uc_rtc_change_time[3] - 0x30)* 10;
  268   1          uc_rtc_min  += (Uc_rtc_change_time[4] - 0x30);
  269   1          uc_rtc_sec   = (Uc_rtc_change_time[6] - 0x30)* 10;
  270   1          uc_rtc_sec  += (Uc_rtc_change_time[7] - 0x30);
  271   1          
  272   1          while((Uc_key_temp = get_key(1)) != 'D');
  273   1          HOUR = uc_rtc_hr;
  274   1          MIN  = uc_rtc_min;
  275   1          SEC  = uc_rtc_sec;
  276   1      
  277   1          default_page();
  278   1      }
  279          
  280          
  281          
  282          
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN DATA (Uc_user_dwn_hr)
 EXTERN DATA (Uc_user_dwn_min)
 EXTERN DATA (Uc_user_dwn_sec)
 EXTERN CODE16 (default_page?T)
 EXTERN CODE16 (clrscr?T)
 EXTERN CODE16 (ms_delay?T)
 EXTERN CODE16 (lcd_line1_disp?T)
 EXTERN CODE16 (lcd_line2_disp?T)
 EXTERN CODE16 (lcd_line3_disp?T)
 EXTERN CODE16 (key_delay?T)
 EXTERN CODE16 (get_key?T)
 EXTERN DATA (Uc_key_temp)
 EXTERN CODE16 (?C?SDIV?T)
 EXTERN CODE16 (?C?UDIV?T)



*** PUBLICS:
 PUBLIC         rtc_init?T
 PUBLIC         rtc_init_interrupt?T
 PUBLIC         rtc_get_time?T
 PUBLIC         set_alarm?T
 PUBLIC         rtc_change_time?T
 PUBLIC         rtc_ISR?A
 PUBLIC         Uc_real_time
 PUBLIC         Uc_date
 PUBLIC         Uc_time_sec
 PUBLIC         Uc_alrm



*** DATA SEGMENT '?CON?rtc':
 00000000          ??S_4:
 00000000            DB          'Time',0x00
 00000005          ??S_3:
 00000005            DB          'Clock',0x00
 0000000B            ALIGN       4
 0000000C          ?tpl?0001:
 0000000C           BEGIN_INIT
 0000000C            DB          '00:00:00',0x00
 00000015           END_INIT

*** DATA SEGMENT '?DT0?rtc':
 00000000          Uc_time_sec:
 00000000            DS          2
 00000002          Uc_real_time:
 00000002           BEGIN_INIT
 00000002            DB          '00:00:00',0x00
 0000000B           END_INIT
 0000000B          Uc_date:
 0000000B           BEGIN_INIT
 0000000B            DB          '00/00/0000',0x00
 00000016           END_INIT
 00000016          Uc_alrm:
 00000016           BEGIN_INIT
 00000016  00        DB          0x0
 00000017           END_INIT



*** CODE SEGMENT '?PR?rtc_init?T?rtc':
   16:     SEC     = 0;
 00000000  2100      MOV         R1,#0x0
 00000002  4800      LDR         R0,=0xE0024020
 00000004  7001      STRB        R1,[R0,#0x0]
   17:     MIN     = 02;
 00000006  2102      MOV         R1,#0x2
 00000008  4800      LDR         R0,=0xE0024024
 0000000A  7001      STRB        R1,[R0,#0x0]
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 7   

   18:     HOUR    = 11;
 0000000C  220B      MOV         R2,#0xB
 0000000E  4800      LDR         R0,=0xE0024028
 00000010  7002      STRB        R2,[R0,#0x0]
   20:     DOM        = 28;
 00000012  221C      MOV         R2,#0x1C
 00000014  4800      LDR         R0,=0xE002402C
 00000016  7002      STRB        R2,[R0,#0x0]
   21:     MONTH   = 02;
 00000018  4800      LDR         R0,=0xE0024038
 0000001A  7001      STRB        R1,[R0,#0x0]
   22:     YEAR    = 2012;
 0000001C  4800      LDRH        R1,=0x7DC
 0000001E  4800      LDR         R0,=0xE002403C
 00000020  8001      STRH        R1,[R0,#0x0]
   24:     CCR     = 0x11;
 00000022  2111      MOV         R1,#0x11
 00000024  4800      LDR         R0,=0xE0024008
 00000026  7001      STRB        R1,[R0,#0x0]
   25: }
 00000028  4770      BX          R14
 0000002A          ENDP ; 'rtc_init?T'


*** CODE SEGMENT '?PR?rtc_init_interrupt?T?rtc':
   30:        VICVectAddr4 = (U32)&rtc_ISR;
 00000000  4900      LDR         R1,=rtc_ISR?A ; rtc_ISR?A
 00000002  4800      LDR         R0,=0xFFFFF110
 00000004  6001      STR         R1,[R0,#0x0]
   31:       VICVectCntl4 = 0x20 | 13;
 00000006  212D      MOV         R1,#0x2D
 00000008  4800      LDR         R0,=0xFFFFF210
 0000000A  6001      STR         R1,[R0,#0x0]
   32:       VICIntEnable = 1 << 13;
 0000000C  4800      LDR         R1,=0x2000
 0000000E  4800      LDR         R0,=0xFFFFF010
 00000010  6001      STR         R1,[R0,#0x0]
   43:     AMR        = 0xF8;
 00000012  21F8      MOV         R1,#0xF8
 00000014  4800      LDR         R0,=0xE0024010
 00000016  7001      STRB        R1,[R0,#0x0]
   44:     CIIR    = 0x01;
 00000018  2101      MOV         R1,#0x1
 0000001A  4800      LDR         R0,=0xE002400C
 0000001C  7001      STRB        R1,[R0,#0x0]
   45:     CCR     = 0x11;
 0000001E  2111      MOV         R1,#0x11
 00000020  4800      LDR         R0,=0xE0024008
 00000022  7001      STRB        R1,[R0,#0x0]
   46: }
 00000024  4770      BX          R14
 00000026          ENDP ; 'rtc_init_interrupt?T'


*** CODE SEGMENT '?PR?rtc_ISR?A?rtc':
   51: void rtc_ISR()__irq
 00000000  E92D0007  STMDB       R13!,{R0-R2}
   53:     if(ILR & 0x01)
 00000004  E5100000  LDR         R0,=0xE0024000
 00000008  E5D00000  LDRB        R0,[R0,#0x0]
 0000000C  E3100001  TST         R0,#0x0001
 00000010  0A000015  BEQ         L_1  ; Targ=0x6C
   55:          Uc_time_sec++;
 00000014  E5100000  LDR         R0,=Uc_time_sec ; Uc_time_sec
 00000018  E1D010B0  LDRH        R1,[R0,#0x0] ; Uc_time_sec
 0000001C  E2811001  ADD         R1,R1,#0x0001
 00000020  E1C010B0  STRH        R1,[R0,#0x0] ; Uc_time_sec
   56:           if((Uc_user_dwn_hr + Uc_user_dwn_min + Uc_user_dwn_sec) != 0)
 00000024  E5100000  LDR         R0,=Uc_user_dwn_min ; Uc_user_dwn_min
 00000028  E5D00000  LDRB        R0,[R0,#0x0] ; Uc_user_dwn_min
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 8   

 0000002C  E1A01000  MOV         R1,R0
 00000030  E5100000  LDR         R0,=Uc_user_dwn_hr ; Uc_user_dwn_hr
 00000034  E5D00000  LDRB        R0,[R0,#0x0] ; Uc_user_dwn_hr
 00000038  E0800001  ADD         R0,R0,R1
 0000003C  E5101000  LDR         R1,=Uc_user_dwn_sec ; Uc_user_dwn_sec
 00000040  E5D11000  LDRB        R1,[R1,#0x0] ; Uc_user_dwn_sec
 00000044  E1A02001  MOV         R2,R1
 00000048  E0800002  ADD         R0,R0,R2
 0000004C  E3500000  CMP         R0,#0x0000
 00000050  0A000002  BEQ         L_2  ; Targ=0x60
   57:         Uc_user_dwn_sec -= 1;
 00000054  E2411001  SUB         R1,R1,#0x0001
 00000058  E5100000  LDR         R0,=Uc_user_dwn_sec ; Uc_user_dwn_sec
 0000005C  E5C01000  STRB        R1,[R0,#0x0] ; Uc_user_dwn_sec
 00000060          L_2:
   58:         ILR = 1;
 00000060  E3A01001  MOV         R1,#0x1
 00000064  E5100000  LDR         R0,=0xE0024000
 00000068  E5C01000  STRB        R1,[R0,#0x0]
   60:      }
 0000006C          L_1:
   61:     if(ILR & 0x02)
 0000006C  E5100000  LDR         R0,=0xE0024000
 00000070  E5D00000  LDRB        R0,[R0,#0x0]
 00000074  E3100002  TST         R0,#0x0002
 00000078  0A000005  BEQ         L_3  ; Targ=0x94
   63:          Uc_alrm = 1;
 0000007C  E3A01001  MOV         R1,#0x1
 00000080  E5100000  LDR         R0,=Uc_alrm ; Uc_alrm
 00000084  E5C01000  STRB        R1,[R0,#0x0] ; Uc_alrm
   64:         ILR = 2;
 00000088  E3A01002  MOV         R1,#0x2
 0000008C  E5100000  LDR         R0,=0xE0024000
 00000090  E5C01000  STRB        R1,[R0,#0x0]
   66:      }
 00000094          L_3:
   68:     VICVectAddr   = 0x00;
 00000094  E3A01000  MOV         R1,#0x0
 00000098  E5100000  LDR         R0,=0xFFFFF030
 0000009C  E5801000  STR         R1,[R0,#0x0]
   69: }
 000000A0  E8BD0007  LDMIA       R13!,{R0-R2}
 000000A4  E25EF004  SUBS        R15,R14,#0x0004
 000000A8          ENDP ; 'rtc_ISR?A'


*** CODE SEGMENT '?PR?set_alarm?T?rtc':
   72: void set_alarm(U8 alarm_hr, U8 alarm_min, U8 alarm_sec)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'alarm_sec' assigned to Register 'R2' ----
 00000002  1C0C      MOV         R4,R1 ; alarm_min
 00000004  ---- Variable 'alarm_min' assigned to Register 'R4' ----
 00000004  1C03      MOV         R3,R0 ; alarm_hr
 00000006  ---- Variable 'alarm_hr' assigned to Register 'R3' ----
   74:     alarm_sec = alarm_sec + SEC;
 00000006  4800      LDR         R0,=0xE0024020
 00000008  7800      LDRB        R0,[R0,#0x0]
 0000000A  1C11      MOV         R1,R2 ; alarm_sec
 0000000C  060A      LSL         R2,R1,#0x18 ; alarm_sec
 0000000E  0E12      LSR         R2,R2,#0x18
 00000010  1812      ADD         R2,R0
 00000012  0612      LSL         R2,R2,#0x18
 00000014  0E12      LSR         R2,R2,#0x18
   75:     if(alarm_sec > 59)
 00000016  1C10      MOV         R0,R2 ; alarm_sec
 00000018  0600      LSL         R0,R0,#0x18 ; alarm_sec
 0000001A  0E00      LSR         R0,R0,#0x18
 0000001C  283B      CMP         R0,#0x3B
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 9   

 0000001E  DD0B      BLE         L_4  ; T=0x00000038
   77:         ALSEC      = alarm_sec - 59;
 00000020  1C10      MOV         R0,R2 ; alarm_sec
 00000022  0601      LSL         R1,R0,#0x18 ; alarm_sec
 00000024  0E09      LSR         R1,R1,#0x18
 00000026  393B      SUB         R1,#0x3B
 00000028  0609      LSL         R1,R1,#0x18
 0000002A  0E09      LSR         R1,R1,#0x18
 0000002C  4800      LDR         R0,=0xE0024060
 0000002E  7001      STRB        R1,[R0,#0x0]
   78:         alarm_min += 1;
 00000030  3401      ADD         R4,#0x1
 00000032  0624      LSL         R4,R4,#0x18
 00000034  0E24      LSR         R4,R4,#0x18
   79:     }
 00000036  E002      B           L_5  ; T=0x0000003E
 00000038          L_4:
   82:         ALSEC = alarm_sec;
 00000038  1C11      MOV         R1,R2 ; alarm_sec
 0000003A  4800      LDR         R0,=0xE0024060
 0000003C  7001      STRB        R1,[R0,#0x0]
   83:     }
 0000003E          L_5:
   85:     alarm_min = alarm_min + MIN;
 0000003E  4800      LDR         R0,=0xE0024024
 00000040  7800      LDRB        R0,[R0,#0x0]
 00000042  1C21      MOV         R1,R4 ; alarm_min
 00000044  060C      LSL         R4,R1,#0x18 ; alarm_min
 00000046  0E24      LSR         R4,R4,#0x18
 00000048  1824      ADD         R4,R0
 0000004A  0624      LSL         R4,R4,#0x18
 0000004C  0E24      LSR         R4,R4,#0x18
   86:     if(alarm_min > 59)
 0000004E  1C20      MOV         R0,R4 ; alarm_min
 00000050  0600      LSL         R0,R0,#0x18 ; alarm_min
 00000052  0E00      LSR         R0,R0,#0x18
 00000054  283B      CMP         R0,#0x3B
 00000056  DD0B      BLE         L_6  ; T=0x00000070
   88:         ALMIN      = alarm_min - 59;
 00000058  1C20      MOV         R0,R4 ; alarm_min
 0000005A  0601      LSL         R1,R0,#0x18 ; alarm_min
 0000005C  0E09      LSR         R1,R1,#0x18
 0000005E  393B      SUB         R1,#0x3B
 00000060  0609      LSL         R1,R1,#0x18
 00000062  0E09      LSR         R1,R1,#0x18
 00000064  4800      LDR         R0,=0xE0024064
 00000066  7001      STRB        R1,[R0,#0x0]
   89:         alarm_hr  += 1;
 00000068  3301      ADD         R3,#0x1
 0000006A  061B      LSL         R3,R3,#0x18
 0000006C  0E1B      LSR         R3,R3,#0x18
   90:     }
 0000006E  E002      B           L_7  ; T=0x00000076
 00000070          L_6:
   93:         ALMIN      = alarm_min;
 00000070  1C21      MOV         R1,R4 ; alarm_min
 00000072  4800      LDR         R0,=0xE0024064
 00000074  7001      STRB        R1,[R0,#0x0]
   94:     }
 00000076          L_7:
   96:     alarm_hr = alarm_hr + HOUR;
 00000076  4800      LDR         R0,=0xE0024028
 00000078  7800      LDRB        R0,[R0,#0x0]
 0000007A  1C01      MOV         R1,R0
 0000007C  1C18      MOV         R0,R3 ; alarm_hr
 0000007E  0603      LSL         R3,R0,#0x18 ; alarm_hr
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 10  

 00000080  0E1B      LSR         R3,R3,#0x18
 00000082  185B      ADD         R3,R1
 00000084  061B      LSL         R3,R3,#0x18
 00000086  0E1B      LSR         R3,R3,#0x18
   97:     if(alarm_hr > 23)
 00000088  1C18      MOV         R0,R3 ; alarm_hr
 0000008A  0600      LSL         R0,R0,#0x18 ; alarm_hr
 0000008C  0E00      LSR         R0,R0,#0x18
 0000008E  2817      CMP         R0,#0x17
 00000090  DD08      BLE         L_8  ; T=0x000000A4
   99:         ALHOUR      = alarm_hr - 23;
 00000092  1C18      MOV         R0,R3 ; alarm_hr
 00000094  0601      LSL         R1,R0,#0x18 ; alarm_hr
 00000096  0E09      LSR         R1,R1,#0x18
 00000098  3917      SUB         R1,#0x17
 0000009A  0609      LSL         R1,R1,#0x18
 0000009C  0E09      LSR         R1,R1,#0x18
 0000009E  4800      LDR         R0,=0xE0024068
 000000A0  7001      STRB        R1,[R0,#0x0]
  100:     }
 000000A2  E002      B           L_9  ; T=0x000000AA
 000000A4          L_8:
  103:         ALHOUR      = alarm_hr;
 000000A4  1C19      MOV         R1,R3 ; alarm_hr
 000000A6  4800      LDR         R0,=0xE0024068
 000000A8  7001      STRB        R1,[R0,#0x0]
  104:     }
 000000AA          L_9:
  105: }
 000000AA  BC10      POP         {R4}
 000000AC  4770      BX          R14
 000000AE          ENDP ; 'set_alarm?T'


*** CODE SEGMENT '?PR?rtc_get_time?T?rtc':
  110: void rtc_get_time()
 00000000  B510      PUSH        {R4,LR}
  111: {
 00000002            ; SCOPE-START
  115:       us_temp_y  = YEAR;
 00000002  4800      LDR         R0,=0xE002403C
 00000004  8802      LDRH        R2,[R0,#0x0]
 00000006  ---- Variable 'us_temp_y' assigned to Register 'R2' ----
  116:     us_temp_y  = us_temp_y / 1000;
 00000006  1C10      MOV         R0,R2 ; us_temp_y
 00000008  0400      LSL         R0,R0,#0x10 ; us_temp_y
 0000000A  0C00      LSR         R0,R0,#0x10
 0000000C  4BFA      LDR         R3,=0x3E8
 0000000E  1C19      MOV         R1,R3
 00000010  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000012  FFF6      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000014  1C08      MOV         R0,R1
 00000016  0402      LSL         R2,R0,#0x10
 00000018  0C12      LSR         R2,R2,#0x10
  117:     Uc_date[6] = us_temp_y + 0x30;
 0000001A  1C10      MOV         R0,R2 ; us_temp_y
 0000001C  0401      LSL         R1,R0,#0x10 ; us_temp_y
 0000001E  0C09      LSR         R1,R1,#0x10
 00000020  3130      ADD         R1,#0x30
 00000022  0609      LSL         R1,R1,#0x18
 00000024  0E09      LSR         R1,R1,#0x18
 00000026  4800      LDR         R0,=Uc_date + 0x6 ; Uc_date+6
 00000028  7001      STRB        R1,[R0,#0x0] ; Uc_date+6
  118:     us_temp_y  = YEAR;
 0000002A  4800      LDR         R0,=0xE002403C
 0000002C  8802      LDRH        R2,[R0,#0x0]
  120:     us_temp_y  = us_temp_y % 1000;
 0000002E  1C10      MOV         R0,R2 ; us_temp_y
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 11  

 00000030  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000032  0C00      LSR         R0,R0,#0x10
 00000034  1C19      MOV         R1,R3
 00000036  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000038  FFE3      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000003A  1C01      MOV         R1,R0
 0000003C  040A      LSL         R2,R1,#0x10
 0000003E  0C12      LSR         R2,R2,#0x10
  121:     us_temp_yr = us_temp_y;
 00000040  1C14      MOV         R4,R2 ; us_temp_y
 00000042  ---- Variable 'us_temp_yr' assigned to Register 'R4' ----
  123:     us_temp_y  = us_temp_y / 100;
 00000042  1C10      MOV         R0,R2 ; us_temp_y
 00000044  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000046  0C00      LSR         R0,R0,#0x10
 00000048  2364      MOV         R3,#0x64
 0000004A  1C19      MOV         R1,R3
 0000004C  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000004E  FFD8      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000050  1C08      MOV         R0,R1
 00000052  0402      LSL         R2,R0,#0x10
 00000054  0C12      LSR         R2,R2,#0x10
  124:     Uc_date[7] = us_temp_y + 0x30;
 00000056  1C10      MOV         R0,R2 ; us_temp_y
 00000058  0401      LSL         R1,R0,#0x10 ; us_temp_y
 0000005A  0C09      LSR         R1,R1,#0x10
 0000005C  3130      ADD         R1,#0x30
 0000005E  0609      LSL         R1,R1,#0x18
 00000060  0E09      LSR         R1,R1,#0x18
 00000062  4800      LDR         R0,=Uc_date + 0x7 ; Uc_date+7
 00000064  7001      STRB        R1,[R0,#0x0] ; Uc_date+7
  126:     us_temp_y  = us_temp_yr;
 00000066  1C22      MOV         R2,R4 ; us_temp_yr
  127:     us_temp_y  = us_temp_y % 100;
 00000068  1C10      MOV         R0,R2 ; us_temp_y
 0000006A  0400      LSL         R0,R0,#0x10 ; us_temp_y
 0000006C  0C00      LSR         R0,R0,#0x10
 0000006E  1C19      MOV         R1,R3
 00000070  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000072  FFC6      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000074  1C01      MOV         R1,R0
 00000076  040A      LSL         R2,R1,#0x10
 00000078  0C12      LSR         R2,R2,#0x10
  128:     us_temp_yr = us_temp_y;
 0000007A  1C14      MOV         R4,R2 ; us_temp_y
  130:     us_temp_y  = us_temp_y / 10;
 0000007C  1C10      MOV         R0,R2 ; us_temp_y
 0000007E  0400      LSL         R0,R0,#0x10 ; us_temp_y
 00000080  0C00      LSR         R0,R0,#0x10
 00000082  230A      MOV         R3,#0xA
 00000084  1C19      MOV         R1,R3
 00000086  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000088  FFBB      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000008A  1C08      MOV         R0,R1
 0000008C  0402      LSL         R2,R0,#0x10
 0000008E  0C12      LSR         R2,R2,#0x10
  131:     Uc_date[8] = us_temp_y + 0x30;
 00000090  1C10      MOV         R0,R2 ; us_temp_y
 00000092  0401      LSL         R1,R0,#0x10 ; us_temp_y
 00000094  0C09      LSR         R1,R1,#0x10
 00000096  3130      ADD         R1,#0x30
 00000098  0609      LSL         R1,R1,#0x18
 0000009A  0E09      LSR         R1,R1,#0x18
 0000009C  4800      LDR         R0,=Uc_date + 0x8 ; Uc_date+8
 0000009E  7001      STRB        R1,[R0,#0x0] ; Uc_date+8
  133:     us_temp_y  = us_temp_yr;
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 12  

 000000A0  1C22      MOV         R2,R4 ; us_temp_yr
  134:     us_temp_y  = us_temp_y % 10;
 000000A2  1C10      MOV         R0,R2 ; us_temp_y
 000000A4  0400      LSL         R0,R0,#0x10 ; us_temp_y
 000000A6  0C00      LSR         R0,R0,#0x10
 000000A8  1C19      MOV         R1,R3
 000000AA  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000AC  FFA9      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000AE  1C01      MOV         R1,R0
 000000B0  040A      LSL         R2,R1,#0x10
 000000B2  0C12      LSR         R2,R2,#0x10
  135:     Uc_date[9] = us_temp_y + 0x30;
 000000B4  1C10      MOV         R0,R2 ; us_temp_y
 000000B6  0401      LSL         R1,R0,#0x10 ; us_temp_y
 000000B8  0C09      LSR         R1,R1,#0x10
 000000BA  3130      ADD         R1,#0x30
 000000BC  0609      LSL         R1,R1,#0x18
 000000BE  0E09      LSR         R1,R1,#0x18
 000000C0  4800      LDR         R0,=Uc_date + 0x9 ; Uc_date+9
 000000C2  7001      STRB        R1,[R0,#0x0] ; Uc_date+9
  138:       uc_temp    = MONTH;
 000000C4  4800      LDR         R0,=0xE0024038
 000000C6  7802      LDRB        R2,[R0,#0x0]
 000000C8  ---- Variable 'uc_temp' assigned to Register 'R2' ----
  139:     uc_temp    = uc_temp / 10;
 000000C8  1C10      MOV         R0,R2 ; uc_temp
 000000CA  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000CC  0E00      LSR         R0,R0,#0x18
 000000CE  240A      MOV         R4,#0xA
 000000D0  1C21      MOV         R1,R4
 000000D2  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000000D4  FF95      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000000D6  1C08      MOV         R0,R1
 000000D8  0602      LSL         R2,R0,#0x18
 000000DA  0E12      LSR         R2,R2,#0x18
  140:     Uc_date[3] = uc_temp + 0x30;
 000000DC  1C10      MOV         R0,R2 ; uc_temp
 000000DE  0601      LSL         R1,R0,#0x18 ; uc_temp
 000000E0  0E09      LSR         R1,R1,#0x18
 000000E2  3130      ADD         R1,#0x30
 000000E4  0609      LSL         R1,R1,#0x18
 000000E6  0E09      LSR         R1,R1,#0x18
 000000E8  4800      LDR         R0,=Uc_date + 0x3 ; Uc_date+3
 000000EA  7001      STRB        R1,[R0,#0x0] ; Uc_date+3
  142:     uc_temp    = MONTH;
 000000EC  4800      LDR         R0,=0xE0024038
 000000EE  7802      LDRB        R2,[R0,#0x0]
  143:     uc_temp    = uc_temp % 10;      
 000000F0  1C10      MOV         R0,R2 ; uc_temp
 000000F2  0600      LSL         R0,R0,#0x18 ; uc_temp
 000000F4  0E00      LSR         R0,R0,#0x18
 000000F6  1C19      MOV         R1,R3
 000000F8  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000000FA  FF82      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000000FC  1C01      MOV         R1,R0
 000000FE  060A      LSL         R2,R1,#0x18
 00000100  0E12      LSR         R2,R2,#0x18
  144:     Uc_date[4] = uc_temp + 0x30;
 00000102  1C10      MOV         R0,R2 ; uc_temp
 00000104  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000106  0E09      LSR         R1,R1,#0x18
 00000108  3130      ADD         R1,#0x30
 0000010A  0609      LSL         R1,R1,#0x18
 0000010C  0E09      LSR         R1,R1,#0x18
 0000010E  4800      LDR         R0,=Uc_date + 0x4 ; Uc_date+4
 00000110  7001      STRB        R1,[R0,#0x0] ; Uc_date+4
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 13  

  147:      uc_temp    = DOM;
 00000112  4800      LDR         R0,=0xE002402C
 00000114  7802      LDRB        R2,[R0,#0x0]
  148:     uc_temp    = uc_temp / 10;
 00000116  1C10      MOV         R0,R2 ; uc_temp
 00000118  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000011A  0E00      LSR         R0,R0,#0x18
 0000011C  1C21      MOV         R1,R4
 0000011E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000120  FF6F      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000122  1C08      MOV         R0,R1
 00000124  0602      LSL         R2,R0,#0x18
 00000126  0E12      LSR         R2,R2,#0x18
  149:     Uc_date[0] = uc_temp + 0x30;
 00000128  1C10      MOV         R0,R2 ; uc_temp
 0000012A  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000012C  0E09      LSR         R1,R1,#0x18
 0000012E  3130      ADD         R1,#0x30
 00000130  0609      LSL         R1,R1,#0x18
 00000132  0E09      LSR         R1,R1,#0x18
 00000134  4800      LDR         R0,=Uc_date ; Uc_date
 00000136  7001      STRB        R1,[R0,#0x0] ; Uc_date
  151:     uc_temp    = DOM;
 00000138  4800      LDR         R0,=0xE002402C
 0000013A  7802      LDRB        R2,[R0,#0x0]
  152:     uc_temp    = uc_temp % 10;      
 0000013C  1C10      MOV         R0,R2 ; uc_temp
 0000013E  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000140  0E00      LSR         R0,R0,#0x18
 00000142  1C19      MOV         R1,R3
 00000144  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000146  FF5C      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000148  1C01      MOV         R1,R0
 0000014A  060A      LSL         R2,R1,#0x18
 0000014C  0E12      LSR         R2,R2,#0x18
  153:     Uc_date[1] = uc_temp + 0x30;
 0000014E  1C10      MOV         R0,R2 ; uc_temp
 00000150  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000152  0E09      LSR         R1,R1,#0x18
 00000154  3130      ADD         R1,#0x30
 00000156  0609      LSL         R1,R1,#0x18
 00000158  0E09      LSR         R1,R1,#0x18
 0000015A  4800      LDR         R0,=Uc_date + 0x1 ; Uc_date+1
 0000015C  7001      STRB        R1,[R0,#0x0] ; Uc_date+1
  156:     uc_temp    = SEC;
 0000015E  4800      LDR         R0,=0xE0024020
 00000160  7802      LDRB        R2,[R0,#0x0]
  157:     uc_temp    = uc_temp / 10;
 00000162  1C10      MOV         R0,R2 ; uc_temp
 00000164  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000166  0E00      LSR         R0,R0,#0x18
 00000168  1C21      MOV         R1,R4
 0000016A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000016C  FF49      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000016E  1C08      MOV         R0,R1
 00000170  0602      LSL         R2,R0,#0x18
 00000172  0E12      LSR         R2,R2,#0x18
  158:     Uc_real_time[6] = uc_temp + 0x30;
 00000174  1C10      MOV         R0,R2 ; uc_temp
 00000176  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000178  0E09      LSR         R1,R1,#0x18
 0000017A  3130      ADD         R1,#0x30
 0000017C  0609      LSL         R1,R1,#0x18
 0000017E  0E09      LSR         R1,R1,#0x18
 00000180  4800      LDR         R0,=Uc_real_time + 0x6 ; Uc_real_time+6
 00000182  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+6
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 14  

  160:     uc_temp    = SEC;
 00000184  4800      LDR         R0,=0xE0024020
 00000186  7802      LDRB        R2,[R0,#0x0]
  161:     uc_temp    = uc_temp % 10;      
 00000188  1C10      MOV         R0,R2 ; uc_temp
 0000018A  0600      LSL         R0,R0,#0x18 ; uc_temp
 0000018C  0E00      LSR         R0,R0,#0x18
 0000018E  1C19      MOV         R1,R3
 00000190  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000192  FF36      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000194  1C01      MOV         R1,R0
 00000196  060A      LSL         R2,R1,#0x18
 00000198  0E12      LSR         R2,R2,#0x18
  162:     Uc_real_time[7] = uc_temp + 0x30;
 0000019A  1C10      MOV         R0,R2 ; uc_temp
 0000019C  0601      LSL         R1,R0,#0x18 ; uc_temp
 0000019E  0E09      LSR         R1,R1,#0x18
 000001A0  3130      ADD         R1,#0x30
 000001A2  0609      LSL         R1,R1,#0x18
 000001A4  0E09      LSR         R1,R1,#0x18
 000001A6  4800      LDR         R0,=Uc_real_time + 0x7 ; Uc_real_time+7
 000001A8  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+7
  165:     uc_temp    = MIN;
 000001AA  4800      LDR         R0,=0xE0024024
 000001AC  7802      LDRB        R2,[R0,#0x0]
  166:     uc_temp    = uc_temp / 10;
 000001AE  1C10      MOV         R0,R2 ; uc_temp
 000001B0  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001B2  0E00      LSR         R0,R0,#0x18
 000001B4  1C21      MOV         R1,R4
 000001B6  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 000001B8  FF23      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 000001BA  1C08      MOV         R0,R1
 000001BC  0602      LSL         R2,R0,#0x18
 000001BE  0E12      LSR         R2,R2,#0x18
  167:     Uc_real_time[3] = uc_temp + 0x30;
 000001C0  1C10      MOV         R0,R2 ; uc_temp
 000001C2  0601      LSL         R1,R0,#0x18 ; uc_temp
 000001C4  0E09      LSR         R1,R1,#0x18
 000001C6  3130      ADD         R1,#0x30
 000001C8  0609      LSL         R1,R1,#0x18
 000001CA  0E09      LSR         R1,R1,#0x18
 000001CC  4800      LDR         R0,=Uc_real_time + 0x3 ; Uc_real_time+3
 000001CE  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+3
  169:     uc_temp    = MIN;
 000001D0  4800      LDR         R0,=0xE0024024
 000001D2  7802      LDRB        R2,[R0,#0x0]
  170:     uc_temp    = uc_temp % 10;      
 000001D4  1C10      MOV         R0,R2 ; uc_temp
 000001D6  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001D8  0E00      LSR         R0,R0,#0x18
 000001DA  1C19      MOV         R1,R3
 000001DC  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 000001DE  FF10      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 000001E0  1C01      MOV         R1,R0
 000001E2  060A      LSL         R2,R1,#0x18
 000001E4  0E12      LSR         R2,R2,#0x18
  171:     Uc_real_time[4] = uc_temp +0x30;
 000001E6  1C10      MOV         R0,R2 ; uc_temp
 000001E8  0601      LSL         R1,R0,#0x18 ; uc_temp
 000001EA  0E09      LSR         R1,R1,#0x18
 000001EC  3130      ADD         R1,#0x30
 000001EE  0609      LSL         R1,R1,#0x18
 000001F0  0E09      LSR         R1,R1,#0x18
 000001F2  4800      LDR         R0,=Uc_real_time + 0x4 ; Uc_real_time+4
 000001F4  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+4
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 15  

  174:     uc_temp    = HOUR;
 000001F6  4800      LDR         R0,=0xE0024028
 000001F8  7802      LDRB        R2,[R0,#0x0]
  175:     uc_temp    = uc_temp / 10;
 000001FA  1C10      MOV         R0,R2 ; uc_temp
 000001FC  0600      LSL         R0,R0,#0x18 ; uc_temp
 000001FE  0E00      LSR         R0,R0,#0x18
 00000200  1C21      MOV         R1,R4
 00000202  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000204  FEFD      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000206  1C08      MOV         R0,R1
 00000208  0602      LSL         R2,R0,#0x18
 0000020A  0E12      LSR         R2,R2,#0x18
  176:     Uc_real_time[0] = uc_temp +0x30;
 0000020C  1C10      MOV         R0,R2 ; uc_temp
 0000020E  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000210  0E09      LSR         R1,R1,#0x18
 00000212  3130      ADD         R1,#0x30
 00000214  0609      LSL         R1,R1,#0x18
 00000216  0E09      LSR         R1,R1,#0x18
 00000218  4800      LDR         R0,=Uc_real_time ; Uc_real_time
 0000021A  7001      STRB        R1,[R0,#0x0] ; Uc_real_time
  178:     uc_temp    = HOUR;
 0000021C  4800      LDR         R0,=0xE0024028
 0000021E  7802      LDRB        R2,[R0,#0x0]
  179:     uc_temp    = uc_temp % 10;      
 00000220  1C10      MOV         R0,R2 ; uc_temp
 00000222  0600      LSL         R0,R0,#0x18 ; uc_temp
 00000224  0E00      LSR         R0,R0,#0x18
 00000226  1C19      MOV         R1,R3
 00000228  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 0000022A  FEEA      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 0000022C  1C01      MOV         R1,R0
 0000022E  060A      LSL         R2,R1,#0x18
 00000230  0E12      LSR         R2,R2,#0x18
  180:     Uc_real_time[1] = uc_temp +0x30;
 00000232  1C10      MOV         R0,R2 ; uc_temp
 00000234  0601      LSL         R1,R0,#0x18 ; uc_temp
 00000236  0E09      LSR         R1,R1,#0x18
 00000238  3130      ADD         R1,#0x30
 0000023A  0609      LSL         R1,R1,#0x18
 0000023C  0E09      LSR         R1,R1,#0x18
 0000023E  4800      LDR         R0,=Uc_real_time + 0x1 ; Uc_real_time+1
 00000240  7001      STRB        R1,[R0,#0x0] ; Uc_real_time+1
 00000242            ; SCOPE-END
  183: }
 00000242  BC10      POP         {R4}
 00000244  BC08      POP         {R3}
 00000246  4718      BX          R3
 00000248          ENDP ; 'rtc_get_time?T'


*** CODE SEGMENT '?PR?rtc_change_time?T?rtc':
  185: void rtc_change_time()
 00000000  B5F0      PUSH        {R4-R7,LR}
 00000002  B083      SUB         R13,#0xC
  186: {
 00000004            ; SCOPE-START
  187:     U8 uc_rtc_change_count = 0;
 00000004  2400      MOV         R4,#0x0
 00000006  1C27      MOV         R7,R4 ; uc_rtc_change_count
 00000008  ---- Variable 'uc_rtc_change_count' assigned to Register 'R7' ----
  188:     U8 uc_rtc_hr  = 0;
 00000008  1C26      MOV         R6,R4 ; uc_rtc_hr
 0000000A  ---- Variable 'uc_rtc_hr' assigned to Register 'R6' ----
  189:     U8 uc_rtc_min = 0;
 0000000A  1C25      MOV         R5,R4 ; uc_rtc_min
 0000000C  ---- Variable 'uc_rtc_min' assigned to Register 'R5' ----
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 16  

  190:     U8 uc_rtc_sec = 0;
 0000000C  ---- Variable 'uc_rtc_sec' assigned to Register 'R4' ----
  192:     U8 Uc_rtc_change_time[9] = {"00:00:00"};
 0000000C  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 0000000E  A800      ADD         R0,R13,#0x0
 00000010  2209      MOV         R2,#0x9
 00000012          L_42:
 00000012  780B      LDRB        R3,[R1,#0x0]
 00000014  7003      STRB        R3,[R0,#0x0]
 00000016  1C49      ADD         R1,R1,#0x1
 00000018  1C40      ADD         R0,R0,#0x1
 0000001A  1E52      SUB         R2,R2,#0x1
 0000001C  D1F9      BNE         L_42  ; T=0x00000012
  194:     clrscr();
 0000001E  F7FF      BL          clrscr?T  ; T=0x0001  (1)
 00000020  FFEF      BL          clrscr?T  ; T=0x0001  (2)
  195:     ms_delay(20);
 00000022  2014      MOV         R0,#0x14
 00000024  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000026  FFEC      BL          ms_delay?T  ; T=0x0001  (2)
  196:     lcd_line1_disp("Clock",8);
 00000028  4800      LDR         R0,=??S_3 ; ??S_3
 0000002A  2108      MOV         R1,#0x8
 0000002C  F7FF      BL          lcd_line1_disp?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          lcd_line1_disp?T  ; T=0x0001  (2)
  197:     ms_delay(10);
 00000030  200A      MOV         R0,#0xA
 00000032  F7FF      BL          ms_delay?T  ; T=0x0001  (1)
 00000034  FFE5      BL          ms_delay?T  ; T=0x0001  (2)
  198:     lcd_line2_disp("Time",2);
 00000036  4800      LDR         R0,=??S_4 ; ??S_4
 00000038  2102      MOV         R1,#0x2
 0000003A  F7FF      BL          lcd_line2_disp?T  ; T=0x0001  (1)
 0000003C  FFE1      BL          lcd_line2_disp?T  ; T=0x0001  (2)
  199:     while(uc_rtc_change_count < 8)
 0000003E  E09D      B           L_10  ; T=0x0000017C
 00000040          L_12:
  201:          Uc_key_temp = get_key(1);
 00000040  2001      MOV         R0,#0x1
 00000042  F7FF      BL          get_key?T  ; T=0x0001  (1)
 00000044  FFDD      BL          get_key?T  ; T=0x0001  (2)
 00000046  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 00000048  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
  202:         if((Uc_key_temp <= '9')&(Uc_key_temp >= '0'))
 0000004A  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000004C  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000004E  2830      CMP         R0,#0x30
 00000050  DB01      BLT         L_15  ; T=0x00000056
 00000052  2101      MOV         R1,#0x1
 00000054  E000      B           L_16  ; T=0x00000058
 00000056          L_15:
 00000056  2100      MOV         R1,#0x0
 00000058          L_16:
 00000058  2839      CMP         R0,#0x39
 0000005A  DC01      BGT         L_17  ; T=0x00000060
 0000005C  2001      MOV         R0,#0x1
 0000005E  E000      B           L_18  ; T=0x00000062
 00000060          L_17:
 00000060  2000      MOV         R0,#0x0
 00000062          L_18:
 00000062  4008      AND         R0,R1
 00000064  2800      CMP         R0,#0x0
 00000066  D100      BEQ         $+4
 00000068  E081      B           L_14  ; T=0x0000016E
  204:             if(uc_rtc_change_count == 0)
 0000006C  1C38      MOV         R0,R7 ; uc_rtc_change_count
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 17  

 0000006E  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 00000070  0E00      LSR         R0,R0,#0x18
 00000072  2800      CMP         R0,#0x0
 00000074  D10D      BNE         L_19  ; T=0x00000092
  206:                 if(Uc_key_temp < '3')
 00000076  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000078  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 0000007A  2833      CMP         R0,#0x33
 0000007C  DA77      BGE         L_14  ; T=0x0000016E
  208:                     Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 0000007E  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000080  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000082  1C39      MOV         R1,R7 ; uc_rtc_change_count
 00000084  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 00000086  0E12      LSR         R2,R2,#0x18
 00000088  A900      ADD         R1,R13,#0x0
 0000008A  5488      STRB        R0,[R1,R2]
  209:                     uc_rtc_change_count += 1;
 0000008C  3701      ADD         R7,#0x1
 0000008E  063F      LSL         R7,R7,#0x18
 00000090  0E3F      LSR         R7,R7,#0x18
  211:             }
 00000092  E06C      B           L_14  ; T=0x0000016E
 00000094          L_19:
  212:             else if(uc_rtc_change_count == 1)
 00000094  1C38      MOV         R0,R7 ; uc_rtc_change_count
 00000096  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 00000098  0E00      LSR         R0,R0,#0x18
 0000009A  2801      CMP         R0,#0x1
 0000009C  D11C      BNE         L_22  ; T=0x000000D8
  214:                 if((Uc_rtc_change_time[0] - 0x30) == 2)
 0000009E  A900      ADD         R1,R13,#0x0
 000000A0  7808      LDRB        R0,[R1,#0x0] ; Uc_rtc_change_time
 000000A2  3830      SUB         R0,#0x30
 000000A4  2802      CMP         R0,#0x2
 000000A6  D10C      BNE         L_23  ; T=0x000000C2
  216:                     if(Uc_key_temp < '4')
 000000A8  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000AA  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000AC  2834      CMP         R0,#0x34
 000000AE  DA5E      BGE         L_14  ; T=0x0000016E
  218:                         Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 000000B0  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000B2  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000B4  1C3A      MOV         R2,R7 ; uc_rtc_change_count
 000000B6  0612      LSL         R2,R2,#0x18 ; uc_rtc_change_count
 000000B8  0E12      LSR         R2,R2,#0x18
 000000BA  5488      STRB        R0,[R1,R2]
  219:                         uc_rtc_change_count += 2;
 000000BC  3702      ADD         R7,#0x2
 000000BE  063F      LSL         R7,R7,#0x18
 000000C0  0E3F      LSR         R7,R7,#0x18
  221:                 }
 000000C2  E054      B           L_14  ; T=0x0000016E
 000000C4          L_23:
  224:                         Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 000000C4  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000C6  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000C8  1C39      MOV         R1,R7 ; uc_rtc_change_count
 000000CA  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 000000CC  0E12      LSR         R2,R2,#0x18
 000000CE  A900      ADD         R1,R13,#0x0
 000000D0  5488      STRB        R0,[R1,R2]
  225:                         uc_rtc_change_count += 2;
 000000D2  3702      ADD         R7,#0x2
 000000D4  063F      LSL         R7,R7,#0x18
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 18  

 000000D6  0E3F      LSR         R7,R7,#0x18
  228:             }
 000000D8  E049      B           L_14  ; T=0x0000016E
 000000DA          L_22:
  229:             else if(uc_rtc_change_count == 3)
 000000DA  1C38      MOV         R0,R7 ; uc_rtc_change_count
 000000DC  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 000000DE  0E00      LSR         R0,R0,#0x18
 000000E0  2803      CMP         R0,#0x3
 000000E2  D10D      BNE         L_27  ; T=0x00000100
  231:                 if(Uc_key_temp < '6')
 000000E4  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000E6  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000E8  2836      CMP         R0,#0x36
 000000EA  DA40      BGE         L_14  ; T=0x0000016E
  233:                     Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 000000EC  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 000000EE  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 000000F0  1C39      MOV         R1,R7 ; uc_rtc_change_count
 000000F2  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 000000F4  0E12      LSR         R2,R2,#0x18
 000000F6  A900      ADD         R1,R13,#0x0
 000000F8  5488      STRB        R0,[R1,R2]
  234:                     uc_rtc_change_count += 1;
 000000FA  3701      ADD         R7,#0x1
 000000FC  063F      LSL         R7,R7,#0x18
 000000FE  0E3F      LSR         R7,R7,#0x18
  236:             }
 00000100  E035      B           L_14  ; T=0x0000016E
 00000102          L_27:
  237:             else if(uc_rtc_change_count == 4)
 00000102  1C38      MOV         R0,R7 ; uc_rtc_change_count
 00000104  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 00000106  0E00      LSR         R0,R0,#0x18
 00000108  2804      CMP         R0,#0x4
 0000010A  D109      BNE         L_30  ; T=0x00000120
  239:                 Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 0000010C  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000010E  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000110  1C39      MOV         R1,R7 ; uc_rtc_change_count
 00000112  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 00000114  0E12      LSR         R2,R2,#0x18
 00000116  A900      ADD         R1,R13,#0x0
 00000118  5488      STRB        R0,[R1,R2]
  240:                 uc_rtc_change_count += 2;
 0000011A  3702      ADD         R7,#0x2
 0000011C  063F      LSL         R7,R7,#0x18
 0000011E  0E3F      LSR         R7,R7,#0x18
  242:             }
 00000120  E025      B           L_14  ; T=0x0000016E
 00000122          L_30:
  243:             else if(uc_rtc_change_count == 6)
 00000122  1C38      MOV         R0,R7 ; uc_rtc_change_count
 00000124  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 00000126  0E00      LSR         R0,R0,#0x18
 00000128  2806      CMP         R0,#0x6
 0000012A  D10D      BNE         L_32  ; T=0x00000148
  245:                 if(Uc_key_temp < '6')
 0000012C  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000012E  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000130  2836      CMP         R0,#0x36
 00000132  DA1C      BGE         L_14  ; T=0x0000016E
  247:                     Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 00000134  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000136  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000138  1C39      MOV         R1,R7 ; uc_rtc_change_count
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 19  

 0000013A  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 0000013C  0E12      LSR         R2,R2,#0x18
 0000013E  A900      ADD         R1,R13,#0x0
 00000140  5488      STRB        R0,[R1,R2]
  248:                     uc_rtc_change_count += 1;
 00000142  3701      ADD         R7,#0x1
 00000144  063F      LSL         R7,R7,#0x18
 00000146  0E3F      LSR         R7,R7,#0x18
  250:             }
 00000148  E011      B           L_14  ; T=0x0000016E
 0000014A          L_32:
  251:             else if(uc_rtc_change_count == 7)
 0000014A  1C38      MOV         R0,R7 ; uc_rtc_change_count
 0000014C  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 0000014E  0E00      LSR         R0,R0,#0x18
 00000150  2807      CMP         R0,#0x7
 00000152  D10C      BNE         L_14  ; T=0x0000016E
  253:                 if(Uc_key_temp < 'A')
 00000154  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 00000156  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000158  2841      CMP         R0,#0x41
 0000015A  DA08      BGE         L_14  ; T=0x0000016E
  255:                     Uc_rtc_change_time[uc_rtc_change_count] = Uc_key_temp;
 0000015C  4800      LDR         R0,=Uc_key_temp ; Uc_key_temp
 0000015E  7800      LDRB        R0,[R0,#0x0] ; Uc_key_temp
 00000160  1C39      MOV         R1,R7 ; uc_rtc_change_count
 00000162  060A      LSL         R2,R1,#0x18 ; uc_rtc_change_count
 00000164  0E12      LSR         R2,R2,#0x18
 00000166  A900      ADD         R1,R13,#0x0
 00000168  5488      STRB        R0,[R1,R2]
  256:                     uc_rtc_change_count += 1;
 0000016A  3701      ADD         R7,#0x1
 0000016C  063F      LSL         R7,R7,#0x18
 0000016E  0E3F      LSR         R7,R7,#0x18
  260:         }
 00000170          L_14:
  261:         key_delay(250);
 00000170  20FA      MOV         R0,#0xFA
 00000172  F7FF      BL          key_delay?T  ; T=0x0001  (1)
 00000174  FF45      BL          key_delay?T  ; T=0x0001  (2)
  262:         lcd_line3_disp(&Uc_rtc_change_time[0],0);
 00000176  A800      ADD         R0,R13,#0x0
 00000178  2100      MOV         R1,#0x0
 0000017A  F7FF      BL          lcd_line3_disp?T  ; T=0x0001  (1)
 0000017C  FF41      BL          lcd_line3_disp?T  ; T=0x0001  (2)
  264:     }
 0000017E          L_10:
 0000017E  1C38      MOV         R0,R7 ; uc_rtc_change_count
 00000180  0600      LSL         R0,R0,#0x18 ; uc_rtc_change_count
 00000182  0E00      LSR         R0,R0,#0x18
 00000184  2808      CMP         R0,#0x8
 00000186  DA00      BLT         $+4
 00000188  E75A      B           L_12  ; T=0x00000040
  265:     uc_rtc_hr    = (Uc_rtc_change_time[0] - 0x30)* 10;
 0000018C  A800      ADD         R0,R13,#0x0
 0000018E  7800      LDRB        R0,[R0,#0x0] ; Uc_rtc_change_time
 00000190  1C06      MOV         R6,R0
 00000192  3E30      SUB         R6,#0x30
 00000194  200A      MOV         R0,#0xA
 00000196  4346      MUL         R6,R0
 00000198  0636      LSL         R6,R6,#0x18
 0000019A  0E36      LSR         R6,R6,#0x18
  266:     uc_rtc_hr   += (Uc_rtc_change_time[1] - 0x30);
 0000019C  2101      MOV         R1,#0x1
 0000019E  4469      ADD         R1,R13
 000001A0  7809      LDRB        R1,[R1,#0x0] ; Uc_rtc_change_time+1
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 20  

 000001A2  3930      SUB         R1,#0x30
 000001A4  0609      LSL         R1,R1,#0x18
 000001A6  0E09      LSR         R1,R1,#0x18
 000001A8  1876      ADD         R6,R1 ; uc_rtc_hr
 000001AA  0636      LSL         R6,R6,#0x18
 000001AC  0E36      LSR         R6,R6,#0x18
  267:     uc_rtc_min   = (Uc_rtc_change_time[3] - 0x30)* 10;
 000001AE  2103      MOV         R1,#0x3
 000001B0  4469      ADD         R1,R13
 000001B2  7809      LDRB        R1,[R1,#0x0] ; Uc_rtc_change_time+3
 000001B4  1C0D      MOV         R5,R1
 000001B6  3D30      SUB         R5,#0x30
 000001B8  4345      MUL         R5,R0
 000001BA  062D      LSL         R5,R5,#0x18
 000001BC  0E2D      LSR         R5,R5,#0x18
  268:     uc_rtc_min  += (Uc_rtc_change_time[4] - 0x30);
 000001BE  A901      ADD         R1,R13,#0x4
 000001C0  7809      LDRB        R1,[R1,#0x0] ; Uc_rtc_change_time+4
 000001C2  3930      SUB         R1,#0x30
 000001C4  0609      LSL         R1,R1,#0x18
 000001C6  0E09      LSR         R1,R1,#0x18
 000001C8  186D      ADD         R5,R1 ; uc_rtc_min
 000001CA  062D      LSL         R5,R5,#0x18
 000001CC  0E2D      LSR         R5,R5,#0x18
  269:     uc_rtc_sec   = (Uc_rtc_change_time[6] - 0x30)* 10;
 000001CE  2106      MOV         R1,#0x6
 000001D0  4469      ADD         R1,R13
 000001D2  7809      LDRB        R1,[R1,#0x0] ; Uc_rtc_change_time+6
 000001D4  1C0C      MOV         R4,R1
 000001D6  3C30      SUB         R4,#0x30
 000001D8  4344      MUL         R4,R0
 000001DA  0624      LSL         R4,R4,#0x18
 000001DC  0E24      LSR         R4,R4,#0x18
  270:     uc_rtc_sec  += (Uc_rtc_change_time[7] - 0x30);
 000001DE  2007      MOV         R0,#0x7
 000001E0  4468      ADD         R0,R13
 000001E2  7800      LDRB        R0,[R0,#0x0] ; Uc_rtc_change_time+7
 000001E4  3830      SUB         R0,#0x30
 000001E6  0600      LSL         R0,R0,#0x18
 000001E8  0E00      LSR         R0,R0,#0x18
 000001EA  1824      ADD         R4,R0 ; uc_rtc_sec
 000001EC  0624      LSL         R4,R4,#0x18
 000001EE  0E24      LSR         R4,R4,#0x18
  272:     while((Uc_key_temp = get_key(1)) != 'D');
 000001F0          L_37:
 000001F0  2001      MOV         R0,#0x1
 000001F2  F7FF      BL          get_key?T  ; T=0x0001  (1)
 000001F4  FF05      BL          get_key?T  ; T=0x0001  (2)
 000001F6  4800      LDR         R1,=Uc_key_temp ; Uc_key_temp
 000001F8  7008      STRB        R0,[R1,#0x0] ; Uc_key_temp
 000001FA  0600      LSL         R0,R0,#0x18 ; get_key?T
 000001FC  0E00      LSR         R0,R0,#0x18
 000001FE  2844      CMP         R0,#0x44
 00000200  D1F6      BNE         L_37  ; T=0x000001F0
  273:     HOUR = uc_rtc_hr;
 00000202  1C31      MOV         R1,R6 ; uc_rtc_hr
 00000204  4800      LDR         R0,=0xE0024028
 00000206  7001      STRB        R1,[R0,#0x0]
  274:     MIN  = uc_rtc_min;
 00000208  1C29      MOV         R1,R5 ; uc_rtc_min
 0000020A  4800      LDR         R0,=0xE0024024
 0000020C  7001      STRB        R1,[R0,#0x0]
  275:     SEC     = uc_rtc_sec;
 0000020E  1C21      MOV         R1,R4 ; uc_rtc_sec
 00000210  4800      LDR         R0,=0xE0024020
 00000212  7001      STRB        R1,[R0,#0x0]
ARM COMPILER V2.50a,  rtc                                                                  03/01/13  15:17:53  PAGE 21  

  277:     default_page();
 00000214  F7FF      BL          default_page?T  ; T=0x0001  (1)
 00000216  FEF4      BL          default_page?T  ; T=0x0001  (2)
 00000218            ; SCOPE-END
  278: }
 00000218  B003      ADD         R13,#0xC
 0000021A  BCF0      POP         {R4-R7}
 0000021C  BC08      POP         {R3}
 0000021E  4718      BX          R3
 00000220          ENDP ; 'rtc_change_time?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =        23
  const size           =        21
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
