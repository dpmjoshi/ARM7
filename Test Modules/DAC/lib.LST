ARM COMPILER V2.50a,  lib                                                                  01/11/12  14:36:58  PAGE 1   


ARM COMPILER V2.50a, COMPILATION OF MODULE lib
OBJECT MODULE PLACED IN lib.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe lib.c THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include "includes.h"
    2          
    3          void hex_dec(U8 *dec_arr, U8 hex_val)
    4          {
    5   1       *dec_arr  = hex_val/10;
    6   1       *dec_arr += 0x30;
    7   1       hex_val     = hex_val%10;
    8   1       dec_arr++;
    9   1       *dec_arr  = hex_val + 0x30;
   10   1      }
   11          
   12          
   13          void hex_dec1(U8 *dec_arr, U32 hex_val)
   14          {
   15   1       *dec_arr  = hex_val/1000;
   16   1       *dec_arr += 0x30;
   17   1       hex_val     = hex_val%1000;
   18   1       dec_arr++;
   19   1       *dec_arr  = hex_val/100;
   20   1       *dec_arr += 0x30;
   21   1       hex_val     = hex_val%100;
   22   1       dec_arr++;
   23   1       *dec_arr  = hex_val/10;
   24   1       *dec_arr += 0x30;
   25   1       hex_val     = hex_val%10;
   26   1       dec_arr++;
   27   1       *dec_arr  = hex_val + 0x30;
   28   1      }
ARM COMPILER V2.50a,  lib                                                                  01/11/12  14:36:58  PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN CODE16 (?C?UDIV?T)
 EXTERN CODE16 (?C?SDIV?T)



*** PUBLICS:
 PUBLIC         hex_dec?T
 PUBLIC         hex_dec1?T



*** CODE SEGMENT '?PR?hex_dec?T?lib':
    3: void hex_dec(U8 *dec_arr, U8 hex_val)
 00000000  B500      PUSH        {LR}
 00000002  1C0B      MOV         R3,R1 ; hex_val
 00000004  ---- Variable 'hex_val' assigned to Register 'R3' ----
 00000004  1C02      MOV         R2,R0 ; dec_arr
 00000006  ---- Variable 'dec_arr' assigned to Register 'R2' ----
    5:  *dec_arr  = hex_val/10;
 00000006  1C18      MOV         R0,R3 ; hex_val
 00000008  0600      LSL         R0,R0,#0x18 ; hex_val
 0000000A  0E00      LSR         R0,R0,#0x18
 0000000C  210A      MOV         R1,#0xA
 0000000E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000010  FFF7      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000012  1C08      MOV         R0,R1
 00000014  0601      LSL         R1,R0,#0x18
 00000016  0E09      LSR         R1,R1,#0x18
 00000018  1C10      MOV         R0,R2 ; dec_arr
 0000001A  7001      STRB        R1,[R0,#0x0] ; dec_arr
    6:  *dec_arr += 0x30;
 0000001C  1C10      MOV         R0,R2 ; dec_arr
 0000001E  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000020  3130      ADD         R1,#0x30
 00000022  1C10      MOV         R0,R2 ; dec_arr
 00000024  7001      STRB        R1,[R0,#0x0] ; dec_arr
    7:  hex_val     = hex_val%10;
 00000026  1C18      MOV         R0,R3 ; hex_val
 00000028  0600      LSL         R0,R0,#0x18 ; hex_val
 0000002A  0E00      LSR         R0,R0,#0x18
 0000002C  210A      MOV         R1,#0xA
 0000002E  F7FF      BL          ?C?SDIV?T  ; T=0x0001  (1) ; ?C?SDIV?T
 00000030  FFE7      BL          ?C?SDIV?T  ; T=0x0001  (2) ; ?C?SDIV?T
 00000032  1C01      MOV         R1,R0
 00000034  060B      LSL         R3,R1,#0x18
 00000036  0E1B      LSR         R3,R3,#0x18
    8:  dec_arr++;
 00000038  3201      ADD         R2,#0x1
    9:  *dec_arr  = hex_val + 0x30;
 0000003A  1C18      MOV         R0,R3 ; hex_val
 0000003C  0601      LSL         R1,R0,#0x18 ; hex_val
 0000003E  0E09      LSR         R1,R1,#0x18
 00000040  3130      ADD         R1,#0x30
 00000042  0609      LSL         R1,R1,#0x18
 00000044  0E09      LSR         R1,R1,#0x18
 00000046  1C10      MOV         R0,R2 ; dec_arr
 00000048  7001      STRB        R1,[R0,#0x0] ; dec_arr
   10: }
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'hex_dec?T'


*** CODE SEGMENT '?PR?hex_dec1?T?lib':
   13: void hex_dec1(U8 *dec_arr, U32 hex_val)
 00000000  B500      PUSH        {LR}
 00000002  1C0B      MOV         R3,R1 ; hex_val
 00000004  ---- Variable 'hex_val' assigned to Register 'R3' ----
ARM COMPILER V2.50a,  lib                                                                  01/11/12  14:36:58  PAGE 3   

 00000004  1C02      MOV         R2,R0 ; dec_arr
 00000006  ---- Variable 'dec_arr' assigned to Register 'R2' ----
   15:  *dec_arr  = hex_val/1000;
 00000006  1C18      MOV         R0,R3 ; hex_val
 00000008  49FA      LDR         R1,=0x3E8
 0000000A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000000C  FFF9      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000000E  1C08      MOV         R0,R1
 00000010  0601      LSL         R1,R0,#0x18
 00000012  0E09      LSR         R1,R1,#0x18
 00000014  1C10      MOV         R0,R2 ; dec_arr
 00000016  7001      STRB        R1,[R0,#0x0] ; dec_arr
   16:  *dec_arr += 0x30;
 00000018  1C10      MOV         R0,R2 ; dec_arr
 0000001A  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 0000001C  3130      ADD         R1,#0x30
 0000001E  1C10      MOV         R0,R2 ; dec_arr
 00000020  7001      STRB        R1,[R0,#0x0] ; dec_arr
   17:  hex_val     = hex_val%1000;
 00000022  1C18      MOV         R0,R3 ; hex_val
 00000024  49FA      LDR         R1,=0x3E8
 00000026  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000028  FFEB      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000002A  1C01      MOV         R1,R0
 0000002C  1C0B      MOV         R3,R1 ; hex_val
   18:  dec_arr++;
 0000002E  3201      ADD         R2,#0x1
   19:  *dec_arr  = hex_val/100;
 00000030  1C18      MOV         R0,R3 ; hex_val
 00000032  2164      MOV         R1,#0x64
 00000034  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000036  FFE4      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000038  1C08      MOV         R0,R1
 0000003A  0601      LSL         R1,R0,#0x18
 0000003C  0E09      LSR         R1,R1,#0x18
 0000003E  1C10      MOV         R0,R2 ; dec_arr
 00000040  7001      STRB        R1,[R0,#0x0] ; dec_arr
   20:  *dec_arr += 0x30;
 00000042  1C10      MOV         R0,R2 ; dec_arr
 00000044  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000046  3130      ADD         R1,#0x30
 00000048  1C10      MOV         R0,R2 ; dec_arr
 0000004A  7001      STRB        R1,[R0,#0x0] ; dec_arr
   21:  hex_val     = hex_val%100;
 0000004C  1C18      MOV         R0,R3 ; hex_val
 0000004E  2164      MOV         R1,#0x64
 00000050  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000052  FFD6      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000054  1C01      MOV         R1,R0
 00000056  1C0B      MOV         R3,R1 ; hex_val
   22:  dec_arr++;
 00000058  3201      ADD         R2,#0x1
   23:  *dec_arr  = hex_val/10;
 0000005A  1C18      MOV         R0,R3 ; hex_val
 0000005C  210A      MOV         R1,#0xA
 0000005E  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 00000060  FFCF      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 00000062  1C08      MOV         R0,R1
 00000064  0601      LSL         R1,R0,#0x18
 00000066  0E09      LSR         R1,R1,#0x18
 00000068  1C10      MOV         R0,R2 ; dec_arr
 0000006A  7001      STRB        R1,[R0,#0x0] ; dec_arr
   24:  *dec_arr += 0x30;
 0000006C  1C10      MOV         R0,R2 ; dec_arr
 0000006E  7801      LDRB        R1,[R0,#0x0] ; dec_arr
 00000070  3130      ADD         R1,#0x30
ARM COMPILER V2.50a,  lib                                                                  01/11/12  14:36:58  PAGE 4   

 00000072  1C10      MOV         R0,R2 ; dec_arr
 00000074  7001      STRB        R1,[R0,#0x0] ; dec_arr
   25:  hex_val     = hex_val%10;
 00000076  1C18      MOV         R0,R3 ; hex_val
 00000078  210A      MOV         R1,#0xA
 0000007A  F7FF      BL          ?C?UDIV?T  ; T=0x0001  (1) ; ?C?UDIV?T
 0000007C  FFC1      BL          ?C?UDIV?T  ; T=0x0001  (2) ; ?C?UDIV?T
 0000007E  1C01      MOV         R1,R0
 00000080  1C0B      MOV         R3,R1 ; hex_val
   26:  dec_arr++;
 00000082  3201      ADD         R2,#0x1
   27:  *dec_arr  = hex_val + 0x30;
 00000084  1C19      MOV         R1,R3 ; hex_val
 00000086  3130      ADD         R1,#0x30
 00000088  0609      LSL         R1,R1,#0x18
 0000008A  0E09      LSR         R1,R1,#0x18
 0000008C  1C10      MOV         R0,R2 ; dec_arr
 0000008E  7001      STRB        R1,[R0,#0x0] ; dec_arr
 00000090  BC08      POP         {R3}
 00000092  4718      BX          R3
 00000094          ENDP ; 'hex_dec1?T'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =    ------
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
